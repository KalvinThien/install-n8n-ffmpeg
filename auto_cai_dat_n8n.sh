#!/bin/bash

# Hi·ªÉn th·ªã banner
echo "======================================================================"
echo "     Script c√†i ƒë·∫∑t N8N v·ªõi FFmpeg, yt-dlp, Puppeteer v√† SSL t·ª± ƒë·ªông  "
echo "======================================================================"

# Ki·ªÉm tra xem script c√≥ ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root kh√¥ng
if [[ $EUID -ne 0 ]]; then
   echo "Script n√†y c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root" 
   exit 1
fi

# H√†m thi·∫øt l·∫≠p swap t·ª± ƒë·ªông
setup_swap() {
    echo "Ki·ªÉm tra v√† thi·∫øt l·∫≠p swap t·ª± ƒë·ªông..."
    
    # Ki·ªÉm tra n·∫øu swap ƒë√£ ƒë∆∞·ª£c b·∫≠t
    if [ "$(swapon --show | wc -l)" -gt 0 ]; then
        SWAP_SIZE=$(free -h | grep Swap | awk '{print $2}')
        echo "Swap ƒë√£ ƒë∆∞·ª£c b·∫≠t v·ªõi k√≠ch th∆∞·ªõc ${SWAP_SIZE}. B·ªè qua thi·∫øt l·∫≠p."
        return
    fi
    
    # L·∫•y th√¥ng tin RAM (ƒë∆°n v·ªã MB)
    RAM_MB=$(free -m | grep Mem | awk '{print $2}')
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc swap d·ª±a tr√™n RAM
    if [ "$RAM_MB" -le 2048 ]; then
        # V·ªõi RAM <= 2GB, swap = 2x RAM
        SWAP_SIZE=$((RAM_MB * 2))
    elif [ "$RAM_MB" -gt 2048 ] && [ "$RAM_MB" -le 8192 ]; then
        # V·ªõi 2GB < RAM <= 8GB, swap = RAM
        SWAP_SIZE=$RAM_MB
    else
        # V·ªõi RAM > 8GB, swap = 4GB
        SWAP_SIZE=4096
    fi
    
    # Chuy·ªÉn ƒë·ªïi sang GB cho d·ªÖ nh√¨n (l√†m tr√≤n l√™n)
    SWAP_GB=$(( (SWAP_SIZE + 1023) / 1024 ))
    
    echo "ƒêang thi·∫øt l·∫≠p swap v·ªõi k√≠ch th∆∞·ªõc ${SWAP_GB}GB (${SWAP_SIZE}MB)..."
    
    # T·∫°o swap file v·ªõi ƒë∆°n v·ªã MB
    dd if=/dev/zero of=/swapfile bs=1M count=$SWAP_SIZE status=progress
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    
    # Th√™m v√†o fstab ƒë·ªÉ swap ƒë∆∞·ª£c k√≠ch ho·∫°t sau khi kh·ªüi ƒë·ªông l·∫°i
    if ! grep -q "/swapfile" /etc/fstab; then
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
    fi
    
    # C·∫•u h√¨nh swappiness v√† cache pressure
    sysctl vm.swappiness=10
    sysctl vm.vfs_cache_pressure=50
    
    # L∆∞u c·∫•u h√¨nh v√†o sysctl.conf n·∫øu ch∆∞a c√≥
    if ! grep -q "vm.swappiness" /etc/sysctl.conf; then
        echo "vm.swappiness=10" >> /etc/sysctl.conf
    fi
    
    if ! grep -q "vm.vfs_cache_pressure" /etc/sysctl.conf; then
        echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.conf
    fi
    
    echo "ƒê√£ thi·∫øt l·∫≠p swap v·ªõi k√≠ch th∆∞·ªõc ${SWAP_GB}GB th√†nh c√¥ng."
    echo "Swappiness ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh 10 (m·∫∑c ƒë·ªãnh: 60)"
    echo "Vfs_cache_pressure ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh 50 (m·∫∑c ƒë·ªãnh: 100)"
}

# H√†m hi·ªÉn th·ªã tr·ª£ gi√∫p
show_help() {
    echo "C√°ch s·ª≠ d·ª•ng: $0 [t√πy ch·ªçn]"
    echo "T√πy ch·ªçn:"
    echo "  -h, --help      Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
    echo "  -d, --dir DIR   Ch·ªâ ƒë·ªãnh th∆∞ m·ª•c c√†i ƒë·∫∑t n8n (m·∫∑c ƒë·ªãnh: /home/n8n)"
    echo "  -s, --skip-docker B·ªè qua c√†i ƒë·∫∑t Docker (n·∫øu ƒë√£ c√≥)"
    exit 0
}

# X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
N8N_DIR="/home/n8n"
SKIP_DOCKER=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            ;;
        -d|--dir)
            N8N_DIR="$2"
            shift 2
            ;;
        -s|--skip-docker)
            SKIP_DOCKER=true
            shift
            ;;
        *)
            echo "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
            show_help
            ;;
    esac
done

# H√†m ki·ªÉm tra domain
check_domain() {
    local domain=$1
    local server_ip=$(curl -s https://api.ipify.org)
    local domain_ip=$(dig +short $domain)

    if [ "$domain_ip" = "$server_ip" ]; then
        return 0  # Domain ƒë√£ tr·ªè ƒë√∫ng
    else
        return 1  # Domain ch∆∞a tr·ªè ƒë√∫ng
    fi
}

# H√†m ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
check_commands() {
    if ! command -v dig &> /dev/null; then
        echo "C√†i ƒë·∫∑t dnsutils (ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh dig)..."
        apt-get update
        apt-get install -y dnsutils
    fi
}

# Thi·∫øt l·∫≠p swap
setup_swap

# Ph√°t hi·ªán m√¥i tr∆∞·ªùng tr∆∞·ªõc khi c√†i ƒë·∫∑t
detect_environment

# H√†m ph√°t hi·ªán m√¥i tr∆∞·ªùng
detect_environment() {
    IS_WSL=false
    IS_VPS=true
    
    # Ki·ªÉm tra WSL
    if [ -f /proc/version ] && grep -qi microsoft /proc/version; then
        IS_WSL=true
        IS_VPS=false
        echo "üîç Ph√°t hi·ªán m√¥i tr∆∞·ªùng: WSL (Windows Subsystem for Linux)"
    elif [ -f /proc/version ] && grep -qi wsl /proc/version; then
        IS_WSL=true
        IS_VPS=false
        echo "üîç Ph√°t hi·ªán m√¥i tr∆∞·ªùng: WSL2 (Windows Subsystem for Linux)"
    else
        echo "üîç Ph√°t hi·ªán m√¥i tr∆∞·ªùng: VPS/Server Linux"
    fi
}

# H√†m kh·ªüi ƒë·ªông Docker daemon cho WSL
start_docker_wsl() {
    echo "üê≥ Kh·ªüi ƒë·ªông Docker daemon cho m√¥i tr∆∞·ªùng WSL..."
    
    # Ki·ªÉm tra xem Docker daemon c√≥ ƒëang ch·∫°y kh√¥ng
    if ! pgrep dockerd > /dev/null; then
        echo "Kh·ªüi ƒë·ªông Docker daemon..."
        
        # Kh·ªüi ƒë·ªông Docker daemon trong background
        sudo dockerd > /var/log/docker.log 2>&1 &
        
        # ƒê·ª£i Docker daemon kh·ªüi ƒë·ªông
        echo "ƒê·ª£i Docker daemon kh·ªüi ƒë·ªông..."
        for i in {1..30}; do
            if docker version &> /dev/null; then
                echo "‚úÖ Docker daemon ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!"
                return 0
            fi
            echo "ƒê·ª£i Docker daemon... ($i/30)"
            sleep 2
        done
        
        echo "‚ùå Docker daemon kh√¥ng th·ªÉ kh·ªüi ƒë·ªông sau 60 gi√¢y"
        echo "Th·ª≠ kh·ªüi ƒë·ªông th·ªß c√¥ng b·∫±ng l·ªánh: sudo dockerd"
        return 1
    else
        echo "‚úÖ Docker daemon ƒë√£ ƒëang ch·∫°y!"
        return 0
    fi
}

# H√†m c√†i ƒë·∫∑t Docker
install_docker() {
    if $SKIP_DOCKER; then
        echo "B·ªè qua c√†i ƒë·∫∑t Docker theo y√™u c·∫ßu..."
        return
    fi
    
    echo "C√†i ƒë·∫∑t Docker v√† Docker Compose..."
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    
    # Th√™m kh√≥a Docker GPG theo c√°ch m·ªõi
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # Th√™m repository Docker
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # C√†i ƒë·∫∑t Docker
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    
    # C√†i ƒë·∫∑t Docker Compose
    if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
        echo "C√†i ƒë·∫∑t Docker Compose..."
        apt-get install -y docker-compose
    elif command -v docker &> /dev/null && ! docker compose version &> /dev/null; then
        echo "C√†i ƒë·∫∑t Docker Compose plugin..."
        apt-get install -y docker-compose-plugin
    fi
    
    # Ki·ªÉm tra Docker ƒë√£ c√†i ƒë·∫∑t th√†nh c√¥ng ch∆∞a
    if ! command -v docker &> /dev/null; then
        echo "L·ªói: Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        exit 1
    fi

    if ! command -v docker-compose &> /dev/null && ! (command -v docker &> /dev/null && docker compose version &> /dev/null); then
        echo "L·ªói: Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        exit 1
    fi

    # Th√™m user hi·ªán t·∫°i v√†o nh√≥m docker n·∫øu kh√¥ng ph·∫£i root
    if [ "$SUDO_USER" != "" ]; then
        echo "Th√™m user $SUDO_USER v√†o nh√≥m docker ƒë·ªÉ c√≥ th·ªÉ ch·∫°y docker m√† kh√¥ng c·∫ßn sudo..."
        usermod -aG docker $SUDO_USER
        echo "ƒê√£ th√™m user $SUDO_USER v√†o nh√≥m docker. C√°c thay ƒë·ªïi s·∫Ω c√≥ hi·ªáu l·ª±c sau khi ƒëƒÉng nh·∫≠p l·∫°i."
    fi

    # X·ª≠ l√Ω kh·ªüi ƒë·ªông Docker theo m√¥i tr∆∞·ªùng
    if $IS_WSL; then
        echo "‚ö†Ô∏è  M√¥i tr∆∞·ªùng WSL: Docker daemon s·∫Ω ƒë∆∞·ª£c kh·ªüi ƒë·ªông th·ªß c√¥ng"
        start_docker_wsl
    else
        # Kh·ªüi ƒë·ªông Docker service cho VPS/Server
        systemctl enable docker
        systemctl restart docker
        
        # Ki·ªÉm tra Docker service
        if systemctl is-active --quiet docker; then
            echo "‚úÖ Docker service ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng!"
        else
            echo "‚ùå L·ªói kh·ªüi ƒë·ªông Docker service"
            systemctl status docker
            exit 1
        fi
    fi

    echo "Docker v√† Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
}

# C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
echo "ƒêang c√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt..."
apt-get update
apt-get install -y dnsutils curl cron jq tar gzip python3-full python3-venv pipx net-tools

# C√†i ƒë·∫∑t yt-dlp th√¥ng qua pipx ho·∫∑c virtual environment
echo "C√†i ƒë·∫∑t yt-dlp..."
if command -v pipx &> /dev/null; then
    pipx install yt-dlp
else
    # T·∫°o virtual environment v√† c√†i ƒë·∫∑t yt-dlp v√†o ƒë√≥
    python3 -m venv /opt/yt-dlp-venv
    /opt/yt-dlp-venv/bin/pip install yt-dlp
    ln -sf /opt/yt-dlp-venv/bin/yt-dlp /usr/local/bin/yt-dlp
    chmod +x /usr/local/bin/yt-dlp
fi

# ƒê·∫£m b·∫£o cron service ƒëang ch·∫°y
systemctl enable cron
systemctl start cron

# Ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
check_commands

# Nh·∫≠n input domain t·ª´ ng∆∞·ªùi d√πng
read -p "Nh·∫≠p t√™n mi·ªÅn ho·∫∑c t√™n mi·ªÅn ph·ª• c·ªßa b·∫°n: " DOMAIN

# C·∫•u h√¨nh Telegram backup (t√πy ch·ªçn)
echo ""
echo "üîî C·∫•u h√¨nh g·ª≠i backup qua Telegram (t√πy ch·ªçn)"
read -p "B·∫°n c√≥ mu·ªën c·∫•u h√¨nh g·ª≠i backup t·ª± ƒë·ªông qua Telegram kh√¥ng? (y/n): " SETUP_TELEGRAM
if [ "$SETUP_TELEGRAM" = "y" ] || [ "$SETUP_TELEGRAM" = "Y" ]; then
    echo "ƒê·ªÉ c·∫•u h√¨nh Telegram, b·∫°n c·∫ßn:"
    echo "1. T·∫°o bot Telegram b·∫±ng c√°ch nh·∫Øn tin cho @BotFather"
    echo "2. L·∫•y Bot Token t·ª´ BotFather"
    echo "3. L·∫•y Chat ID b·∫±ng c√°ch nh·∫Øn tin cho bot v√† truy c·∫≠p: https://api.telegram.org/bot<TOKEN>/getUpdates"
    echo ""
    read -p "Nh·∫≠p Bot Token: " TELEGRAM_BOT_TOKEN
    read -p "Nh·∫≠p Chat ID: " TELEGRAM_CHAT_ID
    
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        echo "TELEGRAM_BOT_TOKEN=\"$TELEGRAM_BOT_TOKEN\"" > /tmp/telegram_config.txt
        echo "TELEGRAM_CHAT_ID=\"$TELEGRAM_CHAT_ID\"" >> /tmp/telegram_config.txt
        echo "‚úÖ C·∫•u h√¨nh Telegram ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi"
    else
        echo "‚ö†Ô∏è Th√¥ng tin Telegram kh√¥ng ƒë·∫ßy ƒë·ªß, b·ªè qua c·∫•u h√¨nh n√†y"
        SETUP_TELEGRAM="n"
    fi
else
    SETUP_TELEGRAM="n"
fi

# C·∫•u h√¨nh FastAPI News Content API (t√πy ch·ªçn)
echo ""
echo "üì∞ C·∫•u h√¨nh API l·∫•y n·ªôi dung tin t·ª©c (FastAPI + Newspaper4k)"
read -p "B·∫°n c√≥ mu·ªën t·∫°o API ri√™ng ƒë·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt kh√¥ng? (y/n): " SETUP_NEWS_API
if [ "$SETUP_NEWS_API" = "y" ] || [ "$SETUP_NEWS_API" = "Y" ]; then
    read -p "Nh·∫≠p m·∫≠t kh·∫©u Bearer Token cho API (ƒë·ªÉ b·∫£o m·∫≠t): " NEWS_API_TOKEN
    if [ -z "$NEWS_API_TOKEN" ]; then
        NEWS_API_TOKEN=$(openssl rand -hex 16)
        echo "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p token, s·ª≠ d·ª•ng token t·ª± ƒë·ªông: $NEWS_API_TOKEN"
    fi
    echo "‚úÖ S·∫Ω t·∫°o News API v·ªõi Bearer Token ƒë√£ c·∫•u h√¨nh"
    echo "üîë L∆∞u token n√†y ƒë·ªÉ s·ª≠ d·ª•ng: $NEWS_API_TOKEN"
else
    SETUP_NEWS_API="n"
fi

# Ki·ªÉm tra domain
echo "Ki·ªÉm tra domain $DOMAIN..."
if check_domain $DOMAIN; then
    echo "Domain $DOMAIN ƒë√£ ƒë∆∞·ª£c tr·ªè ƒë√∫ng ƒë·∫øn server n√†y. Ti·∫øp t·ª•c c√†i ƒë·∫∑t"
else
    echo "Domain $DOMAIN ch∆∞a ƒë∆∞·ª£c tr·ªè ƒë·∫øn server n√†y."
    echo "Vui l√≤ng c·∫≠p nh·∫≠t b·∫£n ghi DNS ƒë·ªÉ tr·ªè $DOMAIN ƒë·∫øn IP $(curl -s https://api.ipify.org)"
    echo "Sau khi c·∫≠p nh·∫≠t DNS, h√£y ch·∫°y l·∫°i script n√†y"
    exit 1
fi

# C√†i ƒë·∫∑t Docker v√† Docker Compose
install_docker

# Function cleanup containers v√† images c≈©
cleanup_old_installation() {
    echo "üßπ D·ªçn d·∫πp c√°c container v√† image c≈©..."
    
    # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c N8N n·∫øu c√≥
    if [ -d "$N8N_DIR" ]; then
        cd "$N8N_DIR"
        
        # D·ª´ng v√† x√≥a containers b·∫±ng docker-compose n·∫øu c√≥
        if [ -f "docker-compose.yml" ]; then
            echo "D·ª´ng containers v·ªõi docker-compose..."
            if command -v docker-compose &> /dev/null; then
                docker-compose down --remove-orphans --volumes 2>/dev/null || true
            elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
                docker compose down --remove-orphans --volumes 2>/dev/null || true
            fi
        fi
    fi
    
    # D·ª´ng t·∫•t c·∫£ containers li√™n quan
    echo "D·ª´ng c√°c container c≈©..."
    docker stop $(docker ps -a -q --filter "name=n8n") 2>/dev/null || true
    docker stop $(docker ps -a -q --filter "name=caddy") 2>/dev/null || true
    docker stop $(docker ps -a -q --filter "name=fastapi") 2>/dev/null || true
    
    # X√≥a containers c≈©
    echo "X√≥a c√°c container c≈©..."
    docker rm $(docker ps -a -q --filter "name=n8n") 2>/dev/null || true
    docker rm $(docker ps -a -q --filter "name=caddy") 2>/dev/null || true
    docker rm $(docker ps -a -q --filter "name=fastapi") 2>/dev/null || true
    
    # X√≥a images c≈© n·∫øu c√≥
    echo "X√≥a c√°c image c≈©..."
    docker rmi n8n-ffmpeg-latest 2>/dev/null || true
    docker rmi $(docker images -q --filter "dangling=true") 2>/dev/null || true
    
    # X√≥a networks orphan
    echo "D·ªçn d·∫πp networks..."
    docker network prune -f 2>/dev/null || true
    
    # D·ªçn d·∫πp volumes kh√¥ng s·ª≠ d·ª•ng (c·∫©n th·∫≠n v·ªõi volumes)
    echo "D·ªçn d·∫πp volumes kh√¥ng s·ª≠ d·ª•ng..."
    docker volume ls -q --filter "dangling=true" | xargs -r docker volume rm 2>/dev/null || true
    
    echo "‚úÖ Ho√†n t·∫•t d·ªçn d·∫πp!"
}

# Ki·ªÉm tra xem c√≥ c·∫ßn d·ªçn d·∫πp kh√¥ng
echo "üîç Ki·ªÉm tra c√°c container N8N hi·ªán c√≥..."
EXISTING_CONTAINERS=$(docker ps -a --filter "name=n8n" --format "{{.Names}}" 2>/dev/null || true)
if [ -n "$EXISTING_CONTAINERS" ]; then
    echo "‚ö†Ô∏è  Ph√°t hi·ªán container N8N c≈©: $EXISTING_CONTAINERS"
    read -p "B·∫°n c√≥ mu·ªën d·ªçn d·∫πp v√† c√†i ƒë·∫∑t l·∫°i t·ª´ ƒë·∫ßu? (y/n): " CLEANUP_CHOICE
    if [ "$CLEANUP_CHOICE" = "y" ] || [ "$CLEANUP_CHOICE" = "Y" ]; then
        cleanup_old_installation
    fi
fi

# T·∫°o th∆∞ m·ª•c cho n8n
echo "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c cho n8n t·∫°i $N8N_DIR..."
mkdir -p $N8N_DIR
mkdir -p $N8N_DIR/files
mkdir -p $N8N_DIR/files/temp
mkdir -p $N8N_DIR/files/youtube_content_anylystic
mkdir -p $N8N_DIR/files/backup_full

# T·∫°o Dockerfile - C·∫¨P NH·∫¨T V·ªöI PUPPETEER
echo "T·∫°o Dockerfile ƒë·ªÉ c√†i ƒë·∫∑t n8n v·ªõi FFmpeg, yt-dlp v√† Puppeteer..."
cat << 'EOF' > $N8N_DIR/Dockerfile
FROM n8nio/n8n:latest

USER root

# C√†i ƒë·∫∑t FFmpeg, wget, zip v√† c√°c g√≥i ph·ª• thu·ªôc c∆° b·∫£n
RUN apk update && \
    apk add --no-cache ffmpeg wget zip unzip python3 py3-pip jq tar

# C√†i ƒë·∫∑t yt-dlp tr·ª±c ti·∫øp s·ª≠ d·ª•ng pip trong container
RUN pip3 install --break-system-packages -U yt-dlp && \
    chmod +x /usr/bin/yt-dlp

# C√†i ƒë·∫∑t Puppeteer dependencies (v·ªõi error handling)
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    ttf-liberation \
    font-noto \
    font-noto-cjk \
    font-noto-emoji \
    dbus \
    udev \
    || echo "Warning: Some Puppeteer dependencies failed to install"

# Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho Puppeteer (n·∫øu c√≥)
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# C√†i ƒë·∫∑t n8n-nodes-puppeteer (v·ªõi error handling)
WORKDIR /usr/local/lib/node_modules/n8n
RUN npm install n8n-nodes-puppeteer || echo "Warning: n8n-nodes-puppeteer installation failed, skipping..."

# Ki·ªÉm tra c√†i ƒë·∫∑t c√°c c√¥ng c·ª• (v·ªõi error handling cho Puppeteer)
RUN ffmpeg -version && \
    wget --version | head -n 1 && \
    zip --version | head -n 2 && \
    yt-dlp --version

# Ki·ªÉm tra Chromium (t√πy ch·ªçn)
RUN chromium-browser --version || echo "Warning: Chromium not available, Puppeteer features will be disabled"

# T·∫°o th∆∞ m·ª•c youtube_content_anylystic v√† backup_full v√† set ƒë√∫ng quy·ªÅn
RUN mkdir -p /files/youtube_content_anylystic && \
    mkdir -p /files/backup_full && \
    chown -R node:node /files

# T·∫°o file c·∫£nh b√°o v·ªÅ tr·∫°ng th√°i Puppeteer
RUN if command -v chromium-browser >/dev/null 2>&1; then \
        echo "Puppeteer: AVAILABLE" > /files/puppeteer_status.txt; \
    else \
        echo "Puppeteer: NOT_AVAILABLE" > /files/puppeteer_status.txt; \
    fi

# Tr·ªü l·∫°i user node
USER node
WORKDIR /home/node
EOF

# T·∫°o file docker-compose.yml
echo "T·∫°o file docker-compose.yml..."
if [ "$SETUP_NEWS_API" = "y" ]; then
    # Docker-compose v·ªõi FastAPI
    cat << EOF > $N8N_DIR/docker-compose.yml
# C·∫•u h√¨nh Docker Compose cho N8N v·ªõi FFmpeg, yt-dlp, Puppeteer v√† News API
services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    image: n8n-ffmpeg-latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      # C·∫•u h√¨nh binary data mode
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_STORAGE=/files
      - N8N_DEFAULT_BINARY_DATA_FILESYSTEM_DIRECTORY=/files
      - N8N_DEFAULT_BINARY_DATA_TEMP_DIRECTORY=/files/temp
      - NODE_FUNCTION_ALLOW_BUILTIN=child_process,path,fs,util,os
      - N8N_EXECUTIONS_DATA_MAX_SIZE=304857600
      # C·∫•u h√¨nh Puppeteer
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    volumes:
      - ${N8N_DIR}:/home/node/.n8n
      - ${N8N_DIR}/files:/files
    user: "1000:1000"
    cap_add:
      - SYS_ADMIN  # Th√™m quy·ªÅn cho Puppeteer

  fastapi:
    build:
      context: ./fastapi
      dockerfile: Dockerfile
    image: n8n-fastapi:latest
    restart: always
    ports:
      - "8000:8000"
    environment:
      - API_TOKEN=${NEWS_API_TOKEN}
      - PYTHONUNBUFFERED=1
    volumes:
      - ${N8N_DIR}/fastapi:/app
    depends_on:
      - n8n

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${N8N_DIR}/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - n8n
      - fastapi

volumes:
  caddy_data:
  caddy_config:
EOF
else
    # Docker-compose kh√¥ng c√≥ FastAPI
    cat << EOF > $N8N_DIR/docker-compose.yml
# C·∫•u h√¨nh Docker Compose cho N8N v·ªõi FFmpeg, yt-dlp, v√† Puppeteer
services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    image: n8n-ffmpeg-latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      # C·∫•u h√¨nh binary data mode
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_STORAGE=/files
      - N8N_DEFAULT_BINARY_DATA_FILESYSTEM_DIRECTORY=/files
      - N8N_DEFAULT_BINARY_DATA_TEMP_DIRECTORY=/files/temp
      - NODE_FUNCTION_ALLOW_BUILTIN=child_process,path,fs,util,os
      - N8N_EXECUTIONS_DATA_MAX_SIZE=304857600
      # C·∫•u h√¨nh Puppeteer
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
    volumes:
      - ${N8N_DIR}:/home/node/.n8n
      - ${N8N_DIR}/files:/files
    user: "1000:1000"
    cap_add:
      - SYS_ADMIN  # Th√™m quy·ªÅn cho Puppeteer

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${N8N_DIR}/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - n8n

volumes:
  caddy_data:
  caddy_config:
EOF
fi

# T·∫°o file Caddyfile
echo "T·∫°o file Caddyfile..."
if [ "$SETUP_NEWS_API" = "y" ]; then
    # Caddyfile v·ªõi API subdomain
    cat << EOF > $N8N_DIR/Caddyfile
${DOMAIN} {
    reverse_proxy n8n:5678
}

api.${DOMAIN} {
    reverse_proxy fastapi:8000
}
EOF
else
    # Caddyfile ch·ªâ c√≥ domain ch√≠nh
    cat << EOF > $N8N_DIR/Caddyfile
${DOMAIN} {
    reverse_proxy n8n:5678
}
EOF
fi

# T·∫°o script sao l∆∞u workflow v√† credentials
echo "T·∫°o script sao l∆∞u workflow v√† credentials..."
cat << EOF > $N8N_DIR/backup-workflows.sh
#!/bin/bash

# Thi·∫øt l·∫≠p bi·∫øn
N8N_DIR="$N8N_DIR"
BACKUP_DIR="\$N8N_DIR/files/backup_full"
DATE=\$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="\$BACKUP_DIR/n8n_backup_\$DATE.tar"
TEMP_DIR="/tmp/n8n_backup_\$DATE"

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" | tee -a \$BACKUP_DIR/backup.log
}

# T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
mkdir -p \$BACKUP_DIR

log "B·∫Øt ƒë·∫ßu sao l∆∞u workflows v√† credentials..."

# Ki·ªÉm tra l·ªánh docker v√† quy·ªÅn truy c·∫≠p
if ! command -v docker &> /dev/null; then
    log "L·ªói: Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    exit 1
fi

# X√°c ƒë·ªãnh l·ªánh docker ph√π h·ª£p
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
else
    DOCKER_CMD="docker"
fi

# T√¨m container n8n
N8N_CONTAINER=\$(\$DOCKER_CMD ps -q --filter "name=n8n" 2>/dev/null)
if [ -z "\$N8N_CONTAINER" ]; then
    log "L·ªói: Kh√¥ng t√¨m th·∫•y container n8n ƒëang ch·∫°y"
    exit 1
fi

# T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
mkdir -p \$TEMP_DIR
mkdir -p \$TEMP_DIR/workflows
mkdir -p \$TEMP_DIR/credentials
mkdir -p \$TEMP_DIR/database

# Xu·∫•t workflows (v·ªõi error handling)
log "ƒêang xu·∫•t workflows..."
WORKFLOWS=\$(\$DOCKER_CMD exec \$N8N_CONTAINER n8n list:workflows --json 2>/dev/null || echo "[]")
if [ "\$WORKFLOWS" = "[]" ] || [ -z "\$WORKFLOWS" ]; then
    log "C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y workflow n√†o ƒë·ªÉ sao l∆∞u"
    echo "[]" > \$TEMP_DIR/workflows/empty_workflows.json
else
    # Xu·∫•t t·∫•t c·∫£ workflows th√†nh 1 file
    echo "\$WORKFLOWS" > \$TEMP_DIR/workflows/all_workflows.json
    log "ƒê√£ xu·∫•t \$(echo "\$WORKFLOWS" | jq length) workflows"
    
    # Xu·∫•t t·ª´ng workflow ri√™ng l·∫ª (n·∫øu c√≥ th·ªÉ)
    echo "\$WORKFLOWS" | jq -c '.[]' 2>/dev/null | while read -r workflow; do
        id=\$(echo "\$workflow" | jq -r '.id' 2>/dev/null)
        name=\$(echo "\$workflow" | jq -r '.name' 2>/dev/null | tr -dc '[:alnum:][:space:]' | tr '[:space:]' '_')
        if [ -n "\$id" ] && [ "\$id" != "null" ]; then
            \$DOCKER_CMD exec \$N8N_CONTAINER n8n export:workflow --id="\$id" --output="/tmp/workflow_\$id.json" 2>/dev/null || true
            \$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/workflow_\$id.json \$TEMP_DIR/workflows/\$id-\$name.json 2>/dev/null || true
        fi
    done
fi

# Sao l∆∞u database v√† credentials t·ª´ container
log "ƒêang sao l∆∞u database v√† credentials..."
\$DOCKER_CMD exec \$N8N_CONTAINER cp /home/node/.n8n/database.sqlite /tmp/database_backup.sqlite 2>/dev/null || true
\$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/database_backup.sqlite \$TEMP_DIR/database/ 2>/dev/null || true

\$DOCKER_CMD exec \$N8N_CONTAINER cp /home/node/.n8n/config /tmp/config_backup -r 2>/dev/null || true
\$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/config_backup \$TEMP_DIR/credentials/ 2>/dev/null || true

# Sao l∆∞u to√†n b·ªô th∆∞ m·ª•c .n8n t·ª´ host (volume mount)
if [ -d "\$N8N_DIR" ]; then
    log "ƒêang sao l∆∞u th∆∞ m·ª•c c·∫•u h√¨nh n8n t·ª´ host..."
    cp -r "\$N8N_DIR"/*.sqlite \$TEMP_DIR/database/ 2>/dev/null || true
    cp -r "\$N8N_DIR"/config \$TEMP_DIR/credentials/ 2>/dev/null || true
    cp -r "\$N8N_DIR"/nodes \$TEMP_DIR/credentials/ 2>/dev/null || true
fi

# T·∫°o file th√¥ng tin backup
cat > \$TEMP_DIR/backup_info.txt << BACKUP_INFO
Backup Date: \$(date)
N8N Directory: \$N8N_DIR
Container ID: \$N8N_CONTAINER
Workflows Count: \$(echo "\$WORKFLOWS" | jq length 2>/dev/null || echo "0")
BACKUP_INFO

# T·∫°o file tar n√©n
log "ƒêang t·∫°o file n√©n backup..."
tar -czf \$BACKUP_FILE -C \$(dirname \$TEMP_DIR) \$(basename \$TEMP_DIR)

# X√≥a th∆∞ m·ª•c t·∫°m th·ªùi
rm -rf \$TEMP_DIR

# Ki·ªÉm tra k√≠ch th∆∞·ªõc file backup
if [ -f "\$BACKUP_FILE" ]; then
    BACKUP_SIZE=\$(du -h "\$BACKUP_FILE" | cut -f1)
    log "Sao l∆∞u ho√†n t·∫•t: \$BACKUP_FILE (K√≠ch th∆∞·ªõc: \$BACKUP_SIZE)"
else
    log "L·ªói: Kh√¥ng th·ªÉ t·∫°o file backup"
    exit 1
fi

# Gi·ªØ l·∫°i t·ªëi ƒëa 30 b·∫£n sao l∆∞u g·∫ßn nh·∫•t
log "D·ªçn d·∫πp c√°c b·∫£n sao l∆∞u c≈©..."
find \$BACKUP_DIR -name "n8n_backup_*.tar" -type f -mtime +30 -delete 2>/dev/null || true
BACKUP_COUNT=\$(ls -1 \$BACKUP_DIR/n8n_backup_*.tar 2>/dev/null | wc -l)
log "Hi·ªán c√≥ \$BACKUP_COUNT b·∫£n sao l∆∞u trong th∆∞ m·ª•c"

# G·ª≠i backup qua Telegram (n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh)
if [ -f "\$N8N_DIR/telegram_backup.conf" ]; then
    source "\$N8N_DIR/telegram_backup.conf"
    if [ -n "\$TELEGRAM_BOT_TOKEN" ] && [ -n "\$TELEGRAM_CHAT_ID" ]; then
        log "ƒêang g·ª≠i backup qua Telegram..."
        curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendDocument" \
            -F chat_id="\$TELEGRAM_CHAT_ID" \
            -F document=@"\$BACKUP_FILE" \
            -F caption="üîÑ Backup N8N t·ª± ƒë·ªông - \$(date '+%d/%m/%Y %H:%M:%S')%0AK√≠ch th∆∞·ªõc: \$BACKUP_SIZE" \
            > /dev/null 2>&1 && log "ƒê√£ g·ª≠i backup qua Telegram th√†nh c√¥ng" || log "L·ªói g·ª≠i backup qua Telegram"
    fi
fi

log "Ho√†n t·∫•t qu√° tr√¨nh sao l∆∞u"
EOF

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho script sao l∆∞u
chmod +x $N8N_DIR/backup-workflows.sh

# T·∫°o script backup th·ªß c√¥ng
echo "T·∫°o script backup th·ªß c√¥ng..."
cat << 'EOF' > $N8N_DIR/manual-backup.sh
#!/bin/bash

# Script backup th·ªß c√¥ng v·ªõi ƒë·∫ßy ƒë·ªß th√¥ng tin
echo "üîÑ B·∫ÆT ƒê·∫¶U BACKUP TH·ª¶ C√îNG"
echo "========================="

N8N_DIR="$(dirname "$0")"
cd "$N8N_DIR"

# Ch·∫°y script backup ch√≠nh
echo "Ch·∫°y script backup ch√≠nh..."
./backup-workflows.sh

# Hi·ªÉn th·ªã th√¥ng tin backup
echo ""
echo "üìä TH√îNG TIN BACKUP:"
echo "==================="

BACKUP_DIR="$N8N_DIR/files/backup_full"
if [ -d "$BACKUP_DIR" ]; then
    echo "üìÅ Th∆∞ m·ª•c backup: $BACKUP_DIR"
    echo "üìà S·ªë l∆∞·ª£ng backup:"
    ls -1 "$BACKUP_DIR"/n8n_backup_*.tar* 2>/dev/null | wc -l || echo "0"
    
    echo ""
    echo "üìã Danh s√°ch backup g·∫ßn nh·∫•t:"
    ls -lht "$BACKUP_DIR"/n8n_backup_*.tar* 2>/dev/null | head -5 || echo "Ch∆∞a c√≥ backup n√†o"
    
    echo ""
    echo "üíæ T·ªïng dung l∆∞·ª£ng backup:"
    du -sh "$BACKUP_DIR" 2>/dev/null || echo "N/A"
    
    # Ki·ªÉm tra backup log
    if [ -f "$BACKUP_DIR/backup.log" ]; then
        echo ""
        echo "üìú Log backup m·ªõi nh·∫•t (5 d√≤ng cu·ªëi):"
        tail -5 "$BACKUP_DIR/backup.log"
    fi
else
    echo "‚ùå Th∆∞ m·ª•c backup kh√¥ng t·ªìn t·∫°i: $BACKUP_DIR"
fi

echo ""
echo "‚úÖ HO√ÄN T·∫§T BACKUP TH·ª¶ C√îNG"
EOF

chmod +x $N8N_DIR/manual-backup.sh

# L∆∞u c·∫•u h√¨nh Telegram n·∫øu c√≥
if [ "$SETUP_TELEGRAM" = "y" ] && [ -f "/tmp/telegram_config.txt" ]; then
    echo "L∆∞u c·∫•u h√¨nh Telegram..."
    mv /tmp/telegram_config.txt $N8N_DIR/telegram_backup.conf
    chmod 600 $N8N_DIR/telegram_backup.conf
fi

# T·∫°o News API n·∫øu ng∆∞·ªùi d√πng ch·ªçn
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "ƒêang t·∫°o News Content API v·ªõi FastAPI v√† Newspaper4k..."
    
    # T·∫°o th∆∞ m·ª•c cho FastAPI
    mkdir -p $N8N_DIR/fastapi
    
    # T·∫°o Dockerfile cho FastAPI
    cat << 'EOF' > $N8N_DIR/fastapi/Dockerfile
FROM python:3.11-slim

WORKDIR /app

# C√†i ƒë·∫∑t c√°c g√≥i h·ªá th·ªëng c·∫ßn thi·∫øt
RUN apt-get update && apt-get install -y \
    curl \
    && rm -rf /var/lib/apt/lists/*

COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

    # T·∫°o requirements.txt
    cat << 'EOF' > $N8N_DIR/fastapi/requirements.txt
fastapi==0.104.1
uvicorn[standard]==0.24.0
newspaper4k==0.9.2
fake-useragent==1.4.0
feedparser==6.0.10
python-multipart==0.0.6
requests==2.31.0
beautifulsoup4==4.12.2
lxml==4.9.3
pydantic==2.5.0
EOF
    
    # T·∫°o file main.py cho FastAPI
    cat << 'EOF' > $N8N_DIR/fastapi/main.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import logging
from datetime import datetime
from typing import Optional
from fake_useragent import UserAgent
import feedparser
import requests

from fastapi import FastAPI, HTTPException, Depends, Security, Query
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import HTMLResponse
import newspaper
from newspaper import Article

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# C·∫•u h√¨nh
API_TOKEN = os.getenv("API_TOKEN", "your-secret-token-here")

# FastAPI app
app = FastAPI(
    title="üì∞ News Content API by Kalvin Thien",
    description="API l·∫•y n·ªôi dung tin t·ª©c s·ª≠ d·ª•ng Newspaper4k - Ph√°t tri·ªÉn b·ªüi Nguy·ªÖn Ng·ªçc Thi·ªán",
    version="2.0.0",
    docs_url=None,  # T·∫Øt docs m·∫∑c ƒë·ªãnh
    redoc_url=None
)

# Security
security = HTTPBearer()

# Authentication v·ªõi logging chi ti·∫øt
async def verify_token(credentials: HTTPAuthorizationCredentials = Security(security)):
    logger.info(f"Received token: {credentials.credentials[:10]}...")
    logger.info(f"Expected token: {API_TOKEN[:10]}...")
    
    if credentials.credentials != API_TOKEN:
        logger.error("Token authentication failed")
        raise HTTPException(status_code=401, detail="Invalid API token")
    
    logger.info("Token authentication successful")
    return credentials.credentials

# User agent
ua = UserAgent()

# Routes
@app.get("/", response_class=HTMLResponse)
async def home():
    return f"""
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>üì∞ News Content API - Kalvin Thien Social</title>
        <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
        <style>
            :root {{
                --primary: #2563eb;
                --primary-dark: #1d4ed8;
                --secondary: #64748b;
                --accent: #f59e0b;
                --background: #ffffff;
                --surface: #f8fafc;
                --text-primary: #0f172a;
                --text-secondary: #475569;
                --border: #e2e8f0;
                --success: #10b981;
                --warning: #f59e0b;
                --error: #ef4444;
            }}
            
            * {{
                margin: 0;
                padding: 0;
                box-sizing: border-box;
            }}
            
            body {{
                font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
                color: var(--text-primary);
                line-height: 1.6;
                padding-top: 80px; /* Space for fixed navbar */
            }}
            
            /* Navigation Menu */
            .author-nav {{
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                background: rgba(255, 255, 255, 0.95);
                backdrop-filter: blur(10px);
                box-shadow: 0 2px 20px rgba(0, 0, 0, 0.1);
                z-index: 1000;
                transition: transform 0.3s ease;
                padding: 12px 0;
            }}
            
            .author-nav.hidden {{
                transform: translateY(-100%);
            }}
            
            .nav-container {{
                max-width: 1200px;
                margin: 0 auto;
                padding: 0 20px;
                display: flex;
                justify-content: space-between;
                align-items: center;
                flex-wrap: wrap;
                gap: 15px;
            }}
            
            .nav-brand {{
                display: flex;
                align-items: center;
                gap: 10px;
                font-weight: 600;
                color: var(--primary);
                text-decoration: none;
                font-size: 1.1rem;
            }}
            
            .nav-links {{
                display: flex;
                gap: 15px;
                align-items: center;
                flex-wrap: wrap;
            }}
            
            .nav-link {{
                display: flex;
                align-items: center;
                gap: 6px;
                padding: 8px 12px;
                border-radius: 8px;
                text-decoration: none;
                color: var(--text-primary);
                transition: all 0.3s ease;
                font-size: 0.9rem;
                border: 1px solid transparent;
                white-space: nowrap;
            }}
            
            .nav-link:hover {{
                background: var(--primary);
                color: white;
                transform: translateY(-2px);
                box-shadow: 0 4px 12px rgba(37, 99, 235, 0.3);
            }}
            
            .nav-link.phone {{
                background: var(--success);
                color: white;
                font-weight: 500;
            }}
            
            .nav-link.phone:hover {{
                background: #059669;
            }}
            
            /* Responsive Navigation */
            @media (max-width: 768px) {{
                body {{
                    padding-top: 120px; /* More space for mobile nav */
                }}
                
                .nav-container {{
                    flex-direction: column;
                    gap: 10px;
                    padding: 8px 15px;
                }}
                
                .nav-links {{
                    justify-content: center;
                    gap: 8px;
                }}
                
                .nav-link {{
                    font-size: 0.8rem;
                    padding: 6px 10px;
                }}
                
                .nav-brand {{
                    font-size: 1rem;
                }}
            }}
            
            @media (max-width: 480px) {{
                body {{
                    padding-top: 140px;
                }}
                
                .nav-links {{
                    display: grid;
                    grid-template-columns: repeat(2, 1fr);
                    width: 100%;
                    gap: 8px;
                }}
                
                .nav-link {{
                    justify-content: center;
                    text-align: center;
                    font-size: 0.75rem;
                }}
            }}
            
            .container {{
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
            }}
            
            .header {{
                background: var(--background);
                border-radius: 20px;
                padding: 40px;
                text-align: center;
                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);
                margin-bottom: 30px;
                backdrop-filter: blur(10px);
            }}
            
            .header h1 {{
                font-size: 3rem;
                font-weight: 700;
                background: linear-gradient(135deg, var(--primary), var(--accent));
                -webkit-background-clip: text;
                -webkit-text-fill-color: transparent;
                margin-bottom: 15px;
            }}
            
            .header p {{
                font-size: 1.2rem;
                color: var(--text-secondary);
                margin-bottom: 20px;
            }}
            
            .author-info {{
                background: var(--surface);
                border-radius: 15px;
                padding: 20px;
                margin-bottom: 20px;
                border: 1px solid var(--border);
            }}
            
            .author-info h3 {{
                color: var(--primary);
                margin-bottom: 15px;
                font-size: 1.3rem;
            }}
            
            .social-links {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 15px;
                margin-top: 15px;
            }}
            
            .social-link {{
                display: flex;
                align-items: center;
                padding: 12px 16px;
                background: var(--background);
                border-radius: 10px;
                text-decoration: none;
                color: var(--text-primary);
                border: 1px solid var(--border);
                transition: all 0.3s ease;
            }}
            
            .social-link:hover {{
                transform: translateY(-2px);
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
                border-color: var(--primary);
            }}
            
            .social-link .icon {{
                margin-right: 10px;
                font-size: 1.2rem;
            }}
            
            .api-section {{
                background: var(--background);
                border-radius: 20px;
                padding: 30px;
                margin-bottom: 30px;
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            }}
            
            .api-section h2 {{
                color: var(--primary);
                margin-bottom: 20px;
                font-size: 1.8rem;
                display: flex;
                align-items: center;
                gap: 10px;
            }}
            
            .auth-box {{
                background: linear-gradient(135deg, #fef3c7, #fde68a);
                border-radius: 15px;
                padding: 25px;
                border-left: 4px solid var(--warning);
                margin-bottom: 25px;
            }}
            
            .auth-box h3 {{
                color: #92400e;
                margin-bottom: 15px;
            }}
            
            .code-block {{
                background: #1e293b;
                color: #e2e8f0;
                padding: 20px;
                border-radius: 10px;
                font-family: 'Fira Code', monospace;
                font-size: 0.9rem;
                overflow-x: auto;
                margin: 15px 0;
                border: 1px solid #374151;
            }}
            
            .endpoints-grid {{
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 20px;
                margin-top: 25px;
            }}
            
            .endpoint-card {{
                background: var(--surface);
                border-radius: 15px;
                padding: 25px;
                border: 1px solid var(--border);
                transition: all 0.3s ease;
            }}
            
            .endpoint-card:hover {{
                transform: translateY(-5px);
                box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
                border-color: var(--primary);
            }}
            
            .endpoint-card h4 {{
                color: var(--primary);
                margin-bottom: 10px;
                font-size: 1.2rem;
            }}
            
            .method-badge {{
                display: inline-block;
                padding: 4px 12px;
                border-radius: 20px;
                font-size: 0.8rem;
                font-weight: 600;
                margin-bottom: 10px;
            }}
            
            .method-get {{
                background: #dcfce7;
                color: #166534;
            }}
            
            .method-post {{
                background: #dbeafe;
                color: #1e40af;
            }}
            
            .example-section {{
                background: var(--background);
                border-radius: 20px;
                padding: 30px;
                margin-bottom: 30px;
                box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1);
            }}
            
            .curl-example {{
                background: #0f172a;
                color: #e2e8f0;
                padding: 25px;
                border-radius: 15px;
                font-family: 'Fira Code', monospace;
                font-size: 0.9rem;
                overflow-x: auto;
                margin: 20px 0;
                border: 1px solid #1e293b;
            }}
            
            .curl-example .comment {{
                color: #64748b;
            }}
            
            .curl-example .string {{
                color: #10b981;
            }}
            
            .curl-example .flag {{
                color: #f59e0b;
            }}
            
            .footer {{
                text-align: center;
                padding: 40px 20px;
                color: var(--background);
                font-size: 0.9rem;
            }}
            
            .footer a {{
                color: var(--background);
                text-decoration: none;
                font-weight: 500;
            }}
            
            .footer a:hover {{
                text-decoration: underline;
            }}
            
            .status-badge {{
                display: inline-flex;
                align-items: center;
                gap: 8px;
                padding: 8px 16px;
                background: #dcfce7;
                color: #166534;
                border-radius: 20px;
                font-size: 0.9rem;
                font-weight: 500;
                margin-top: 10px;
            }}
            
            .token-display {{
                background: #fef3c7;
                border: 2px dashed #f59e0b;
                border-radius: 10px;
                padding: 15px;
                margin: 15px 0;
                text-align: center;
                font-family: 'Fira Code', monospace;
                font-weight: 600;
                color: #92400e;
            }}
            
            @media (max-width: 768px) {{
                .header h1 {{
                    font-size: 2rem;
                }}
                
                .container {{
                    padding: 15px;
                }}
                
                .social-links {{
                    grid-template-columns: 1fr;
                }}
            }}
        </style>
    </head>
    <body>
        <!-- Navigation Menu -->
        <nav class="author-nav" id="authorNav">
            <div class="nav-container">
                <a href="#" class="nav-brand">
                    <span>üë®‚Äçüíª</span>
                    <span>Nguy·ªÖn Ng·ªçc Thi·ªán</span>
                </a>
                <div class="nav-links">
                    <a href="https://www.youtube.com/@kalvinthiensocial?sub_confirmation=1" class="nav-link" target="_blank">
                        <span>üì∫</span>
                        <span>YouTube</span>
                    </a>
                    <a href="https://www.facebook.com/Ban.Thien.Handsome/" class="nav-link" target="_blank">
                        <span>üìò</span>
                        <span>Facebook</span>
                    </a>
                    <a href="tel:0888884749" class="nav-link phone">
                        <span>üì±</span>
                        <span>08.8888.4749</span>
                    </a>
                    <a href="https://www.youtube.com/@kalvinthiensocial/playlists" class="nav-link" target="_blank">
                        <span>üé¨</span>
                        <span>N8N Tutorials</span>
                    </a>
                </div>
            </div>
        </nav>
        
        <div class="container">
            <div class="header">
                <h1>üì∞ News Content API</h1>
                <p>API l·∫•y n·ªôi dung tin t·ª©c chuy√™n nghi·ªáp v·ªõi Newspaper4k</p>
                <div class="status-badge">
                    <span>üü¢</span>
                    <span>API ƒëang ho·∫°t ƒë·ªông - Version 2.0.0</span>
                </div>
            </div>
            
            <div class="author-info">
                <h3>üë®‚Äçüíª Th√¥ng Tin T√°c Gi·∫£</h3>
                <p><strong>Nguy·ªÖn Ng·ªçc Thi·ªán</strong> - Chuy√™n gia N8N & Automation</p>
                
                <div class="social-links">
                    <a href="https://www.youtube.com/@kalvinthiensocial?sub_confirmation=1" class="social-link" target="_blank">
                        <span class="icon">üì∫</span>
                        <div>
                            <strong>YouTube: Kalvin Thien Social</strong><br>
                            <small>H·∫¢Y ƒêƒÇNG K√ù ƒê·ªÇ ·ª¶NG H·ªò!</small>
                        </div>
                    </a>
                    <a href="https://www.facebook.com/Ban.Thien.Handsome/" class="social-link" target="_blank">
                        <span class="icon">üìò</span>
                        <div>
                            <strong>Facebook</strong><br>
                            <small>Ban Thien Handsome</small>
                        </div>
                    </a>
                    <a href="tel:0888884749" class="social-link">
                        <span class="icon">üì±</span>
                        <div>
                            <strong>Zalo/Phone</strong><br>
                            <small>08.8888.4749</small>
                        </div>
                    </a>
                    <a href="https://www.youtube.com/@kalvinthiensocial/playlists" class="social-link" target="_blank">
                        <span class="icon">üé¨</span>
                        <div>
                            <strong>N8N Tutorials</strong><br>
                            <small>Playlist chuy√™n s√¢u</small>
                        </div>
                    </a>
                </div>
            </div>
            
            <div class="api-section">
                <h2>üîê X√°c Th·ª±c API</h2>
                <div class="auth-box">
                    <h3>‚ö†Ô∏è Quan tr·ªçng: Bearer Token</h3>
                    <p>T·∫•t c·∫£ c√°c API endpoints y√™u c·∫ßu Bearer Token trong header Authorization:</p>
                    <div class="code-block">Authorization: Bearer YOUR_TOKEN</div>
                    <div class="token-display">
                        <strong>‚ö†Ô∏è Token ƒë∆∞·ª£c ·∫©n v√¨ l√Ω do b·∫£o m·∫≠t</strong>
                        <p style="font-size: 0.9em; margin-top: 8px; color: #666;">
                            ƒê·ªÉ xem ho·∫∑c ƒë·ªïi token, ch·∫°y l·ªánh: <code>./change-api-token.sh</code>
                        </p>
                    </div>
                </div>
            </div>
            
            <div class="api-section">
                <h2>üöÄ API Endpoints</h2>
                <div class="endpoints-grid">
                    <div class="endpoint-card">
                        <span class="method-badge method-get">GET</span>
                        <h4>/health</h4>
                        <p>Ki·ªÉm tra tr·∫°ng th√°i ho·∫°t ƒë·ªông c·ªßa API</p>
                    </div>
                    
                    <div class="endpoint-card">
                        <span class="method-badge method-get">GET</span>
                        <h4>/article</h4>
                        <p>L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt t·ª´ URL</p>
                    </div>
                    
                    <div class="endpoint-card">
                        <span class="method-badge method-get">GET</span>
                        <h4>/feed</h4>
                        <p>Crawl nhi·ªÅu b√†i vi·∫øt t·ª´ RSS feed</p>
                    </div>
                    
                    <div class="endpoint-card">
                        <span class="method-badge method-get">GET</span>
                        <h4>/docs</h4>
                        <p>T√†i li·ªáu API t∆∞∆°ng t√°c (Swagger UI)</p>
                    </div>
                </div>
            </div>
            
            <div class="example-section">
                <h2>üí° V√≠ D·ª• S·ª≠ D·ª•ng</h2>
                
                <h3>1. Ki·ªÉm tra tr·∫°ng th√°i API:</h3>
                <div class="curl-example">
<span class="comment"># Ki·ªÉm tra API c√≥ ho·∫°t ƒë·ªông kh√¥ng</span>
curl <span class="flag">-H</span> <span class="string">"Authorization: Bearer YOUR_TOKEN"</span> \\
  <span class="string">"https://api.${DOMAIN}/health"</span>
                </div>
                
                <h3>2. L·∫•y n·ªôi dung b√†i vi·∫øt:</h3>
                <div class="curl-example">
<span class="comment"># L·∫•y n·ªôi dung t·ª´ URL b√†i b√°o</span>
curl <span class="flag">-H</span> <span class="string">"Authorization: Bearer YOUR_TOKEN"</span> \\
  <span class="string">"https://api.${DOMAIN}/article?url=https://vnexpress.net/example-article"</span>
                </div>
                
                <h3>3. Crawl RSS feed:</h3>
                <div class="curl-example">
<span class="comment"># L·∫•y 10 b√†i vi·∫øt m·ªõi nh·∫•t t·ª´ RSS feed</span>
curl <span class="flag">-H</span> <span class="string">"Authorization: Bearer YOUR_TOKEN"</span> \\
  <span class="string">"https://api.${DOMAIN}/feed?url=https://vnexpress.net/rss&limit=10"</span>
                </div>
                
                <h3>4. S·ª≠ d·ª•ng trong N8N:</h3>
                <div class="curl-example">
<span class="comment"># C·∫•u h√¨nh HTTP Request node trong N8N:</span>
<span class="comment"># Method: GET</span>
<span class="comment"># URL: https://api.${DOMAIN}/article</span>
<span class="comment"># Headers: Authorization = Bearer YOUR_TOKEN</span>
<span class="comment"># Query Parameters: url = {{$json.article_url}}</span>
                </div>
            </div>
            
            <div class="api-section">
                <h2>üìö T√†i Li·ªáu & H·ªó Tr·ª£</h2>
                <div class="endpoints-grid">
                    <div class="endpoint-card">
                        <h4>üìñ API Documentation</h4>
                        <p>T√†i li·ªáu chi ti·∫øt v·ªõi Swagger UI</p>
                        <a href="/docs" style="color: var(--primary); text-decoration: none; font-weight: 500;">‚Üí Xem docs</a>
                    </div>
                    
                    <div class="endpoint-card">
                        <h4>üé• Video Tutorials</h4>
                        <p>H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng API trong N8N</p>
                        <a href="https://www.youtube.com/@kalvinthiensocial/playlists" target="_blank" style="color: var(--primary); text-decoration: none; font-weight: 500;">‚Üí Xem playlist</a>
                    </div>
                    
                    <div class="endpoint-card">
                        <h4>üí¨ H·ªó Tr·ª£</h4>
                        <p>Li√™n h·ªá tr·ª±c ti·∫øp qua Zalo</p>
                        <a href="tel:0888884749" style="color: var(--primary); text-decoration: none; font-weight: 500;">‚Üí 08.8888.4749</a>
                    </div>
                    
                    <div class="endpoint-card">
                        <h4>‚öôÔ∏è ƒê·ªïi Token</h4>
                        <p>H∆∞·ªõng d·∫´n thay ƒë·ªïi Bearer Token</p>
                        <a href="#change-token" style="color: var(--primary); text-decoration: none; font-weight: 500;">‚Üí Xem h∆∞·ªõng d·∫´n</a>
                    </div>
                </div>
            </div>
            
            <div class="api-section" id="change-token">
                <h2>üîë H∆∞·ªõng D·∫´n ƒê·ªïi Bearer Token</h2>
                <div style="background: #f8f9fa; padding: 20px; border-radius: 8px; border-left: 4px solid var(--primary);">
                    <h3>üìã C√°c b∆∞·ªõc th·ª±c hi·ªán:</h3>
                    <ol style="line-height: 1.8;">
                        <li><strong>SSH v√†o server</strong> v√† di chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c N8N:</li>
                        <div class="code-block" style="margin: 10px 0;">cd /home/n8n</div>
                        
                        <li><strong>Ch·∫°y script ƒë·ªïi token:</strong></li>
                        <div class="code-block" style="margin: 10px 0;">sudo ./change-api-token.sh</div>
                        
                        <li><strong>Ch·ªçn m·ªôt trong hai c√°ch:</strong>
                            <ul style="margin-top: 8px;">
                                <li>Nh·∫≠p token t√πy ch·ªânh c·ªßa b·∫°n</li>
                                <li>ƒê·ªÉ tr·ªëng ƒë·ªÉ t·∫°o token t·ª± ƒë·ªông</li>
                            </ul>
                        </li>
                        
                        <li><strong>Script s·∫Ω t·ª± ƒë·ªông:</strong>
                            <ul style="margin-top: 8px;">
                                <li>C·∫≠p nh·∫≠t file c·∫•u h√¨nh</li>
                                <li>Restart FastAPI container</li>
                                <li>Hi·ªÉn th·ªã token m·ªõi</li>
                            </ul>
                        </li>
                        
                        <li><strong>C·∫≠p nh·∫≠t token m·ªõi</strong> trong t·∫•t c·∫£ N8N workflows c·ªßa b·∫°n</li>
                    </ol>
                    
                    <h3 style="margin-top: 20px;">üîç Ki·ªÉm tra token hi·ªán t·∫°i:</h3>
                    <div class="code-block" style="margin: 10px 0;">cat /home/n8n/fastapi/.env</div>
                    
                    <h3 style="margin-top: 20px;">‚úÖ Test API v·ªõi token m·ªõi:</h3>
                    <div class="code-block" style="margin: 10px 0;">curl -H "Authorization: Bearer YOUR_NEW_TOKEN" "https://api.${DOMAIN}/health"</div>
                </div>
            </div>
        </div>
        
        <div class="footer">
            <p>¬© 2025 <a href="https://www.youtube.com/@kalvinthiensocial">Kalvin Thien Social</a> - Ph√°t tri·ªÉn b·ªüi Nguy·ªÖn Ng·ªçc Thi·ªán</p>
            <p>üöÄ H√£y ƒëƒÉng k√Ω k√™nh YouTube ƒë·ªÉ ·ªßng h·ªô t√°c gi·∫£!</p>
        </div>
        
        <!-- JavaScript for Navigation -->
        <script>
            let lastScrollTop = 0;
            const nav = document.getElementById('authorNav');
            
            window.addEventListener('scroll', function() {{
                let scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                
                if (scrollTop > lastScrollTop && scrollTop > 100) {{
                    // Scrolling down & past header
                    nav.classList.add('hidden');
                }} else {{
                    // Scrolling up or at top
                    nav.classList.remove('hidden');
                }}
                
                lastScrollTop = scrollTop <= 0 ? 0 : scrollTop; // For Mobile or negative scrolling
            }});
            
            // Smooth scroll for anchor links
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {{
                anchor.addEventListener('click', function (e) {{
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {{
                        target.scrollIntoView({{
                            behavior: 'smooth',
                            block: 'start'
                        }});
                    }}
                }});
            }});
        </script>
    </body>
    </html>
    """

@app.get("/docs", response_class=HTMLResponse)
async def api_docs():
    return """
    <!DOCTYPE html>
    <html>
    <head>
        <title>API Documentation</title>
        <link rel="stylesheet" type="text/css" href="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui.css" />
    </head>
    <body>
        <div id="swagger-ui"></div>
        <script src="https://unpkg.com/swagger-ui-dist@3.25.0/swagger-ui-bundle.js"></script>
        <script>
            SwaggerUIBundle({
                url: '/openapi.json',
                dom_id: '#swagger-ui',
                presets: [
                    SwaggerUIBundle.presets.apis,
                    SwaggerUIBundle.presets.standalone
                ]
            });
        </script>
    </body>
    </html>
    """

@app.get("/health")
async def health_check(credentials: HTTPAuthorizationCredentials = Depends(verify_token)):
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "2.0.0",
        "api_token_status": "valid",
        "features": ["article_extraction", "rss_parsing", "content_crawling"]
    }

@app.get("/article")
async def get_article(
    url: str = Query(..., description="URL c·ªßa b√†i vi·∫øt c·∫ßn l·∫•y n·ªôi dung"),
    credentials: HTTPAuthorizationCredentials = Depends(verify_token)
):
    """L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt t·ª´ URL"""
    
    try:
        # T·∫°o article object
        article = newspaper.Article(url)
        
        # C·∫•u h√¨nh user agent
        config = newspaper.Config()
        config.browser_user_agent = ua.random
        config.request_timeout = 30
        
        article.config = config
        
        # Download v√† parse
        article.download()
        article.parse()
        
        # Tr√≠ch xu·∫•t th√¥ng tin
        result = {
            "success": True,
            "url": url,
            "title": article.title,
            "text": article.text,
            "summary": article.summary if hasattr(article, 'summary') else "",
            "authors": article.authors,
            "publish_date": article.publish_date.isoformat() if article.publish_date else None,
            "top_image": article.top_image,
            "meta_keywords": article.meta_keywords,
            "meta_description": article.meta_description,
            "word_count": len(article.text.split()) if article.text else 0,
            "language": article.meta_lang if hasattr(article, 'meta_lang') else "unknown"
        }
        
        return result
        
    except Exception as e:
        logger.error(f"Error processing article {url}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x·ª≠ l√Ω b√†i vi·∫øt: {str(e)}")

@app.get("/feed")
async def parse_feed(
    url: str = Query(..., description="URL c·ªßa RSS feed"),
    limit: int = Query(10, description="S·ªë l∆∞·ª£ng b√†i vi·∫øt t·ªëi ƒëa", ge=1, le=50),
    credentials: HTTPAuthorizationCredentials = Depends(verify_token)
):
    """Ph√¢n t√≠ch RSS feed v√† l·∫•y danh s√°ch b√†i vi·∫øt"""
    
    try:
        feed = feedparser.parse(url)
        
        if not feed.entries:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt trong feed")
        
        articles = []
        processed = 0
        
        for entry in feed.entries[:limit]:
            if processed >= limit:
                break
                
            try:
                article_data = {
                    "title": entry.get("title", ""),
                    "url": entry.get("link", ""),
                    "description": entry.get("description", ""),
                    "published": entry.get("published", ""),
                    "author": entry.get("author", ""),
                    "tags": [tag.term for tag in entry.get("tags", [])]
                }
                articles.append(article_data)
                processed += 1
                
            except Exception as e:
                logger.warning(f"Error processing entry: {str(e)}")
                continue
        
        return {
            "success": True,
            "feed_url": url,
            "feed_title": feed.feed.get("title", ""),
            "feed_description": feed.feed.get("description", ""),
            "articles": articles,
            "total_articles": len(articles),
            "requested_limit": limit
        }
        
    except Exception as e:
        logger.error(f"Error processing feed {url}: {str(e)}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x·ª≠ l√Ω RSS feed: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    print(f"üöÄ Kh·ªüi ƒë·ªông News Content API t·∫°i http://0.0.0.0:8000")
    print(f"üìö T√†i li·ªáu API: http://0.0.0.0:8000/docs")
    print(f"üîë Bearer Token: {API_TOKEN}")
    
    uvicorn.run(
        "main:app",
        host="0.0.0.0",
        port=8000,
        reload=False,
        workers=1
    )
EOF

    # L∆∞u token v√†o file c·∫•u h√¨nh
    echo "API_TOKEN=\"$NEWS_API_TOKEN\"" > $N8N_DIR/fastapi/.env
    
    # T·∫°o script ƒë·ªïi token
    cat << EOF > $N8N_DIR/change-api-token.sh
#!/bin/bash

# Script ƒë·ªïi Bearer Token cho News API
echo "üîë SCRIPT ƒê·ªîI BEARER TOKEN CHO NEWS API"
echo "======================================"

N8N_DIR="\$(dirname "\$0")"
cd "\$N8N_DIR"

# L·∫•y domain t·ª´ docker-compose.yml
DOMAIN=\$(grep "N8N_HOST=" docker-compose.yml | cut -d'=' -f2 | tr -d '{}'  2>/dev/null || echo "yourdomain.com")

# Hi·ªÉn th·ªã token hi·ªán t·∫°i
if [ -f "fastapi/.env" ]; then
    CURRENT_TOKEN=\$(grep "API_TOKEN=" fastapi/.env | cut -d'"' -f2)
    echo "üîç Token hi·ªán t·∫°i: \$CURRENT_TOKEN"
else
    echo "‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y file c·∫•u h√¨nh token"
fi

echo ""
read -p "Nh·∫≠p Bearer Token m·ªõi (ƒë·ªÉ tr·ªëng = t·∫°o t·ª± ƒë·ªông): " NEW_TOKEN

if [ -z "\$NEW_TOKEN" ]; then
    NEW_TOKEN=\$(openssl rand -hex 16)
    echo "üé≤ Token t·ª± ƒë·ªông ƒë∆∞·ª£c t·∫°o: \$NEW_TOKEN"
fi

# C·∫≠p nh·∫≠t token
echo "API_TOKEN=\"\$NEW_TOKEN\"" > fastapi/.env

# C·∫≠p nh·∫≠t docker-compose.yml
if [ -f "docker-compose.yml" ]; then
    sed -i "s/API_TOKEN=.*/API_TOKEN=\$NEW_TOKEN/" docker-compose.yml
    echo "‚úÖ ƒê√£ c·∫≠p nh·∫≠t docker-compose.yml"
fi

# Restart FastAPI container
echo "üîÑ ƒêang restart FastAPI container..."
if command -v docker-compose &> /dev/null; then
    docker-compose restart fastapi
elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
    docker compose restart fastapi
else
    echo "‚ùå Kh√¥ng t√¨m th·∫•y docker-compose command"
    exit 1
fi

echo ""
echo "‚úÖ HO√ÄN T·∫§T ƒê·ªîI TOKEN!"
echo "üîë Token m·ªõi: \$NEW_TOKEN"
echo "üåê H√£y c·∫≠p nh·∫≠t token n√†y trong N8N workflows c·ªßa b·∫°n"
echo "üìö Ki·ªÉm tra API: https://api.\$DOMAIN/health"
echo ""
echo "üìã V√ç D·ª§ S·ª¨ D·ª§NG CURL:"
echo "curl -H \"Authorization: Bearer \$NEW_TOKEN\" \\"
echo "  \"https://api.\$DOMAIN/article?url=https://example.com/news\""
EOF

    chmod +x $N8N_DIR/change-api-token.sh
    
    echo "‚úÖ News API ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh th√†nh c√¥ng"
fi

# ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n
echo "ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n..."
chown -R 1000:1000 $N8N_DIR
chmod -R 755 $N8N_DIR

# Kh·ªüi ƒë·ªông c√°c container
echo "Kh·ªüi ƒë·ªông c√°c container..."
echo "L∆∞u √Ω: Qu√° tr√¨nh build image c√≥ th·ªÉ m·∫•t v√†i ph√∫t, vui l√≤ng ƒë·ª£i..."
cd $N8N_DIR

# Ki·ªÉm tra c·ªïng 80 c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
if netstat -tuln | grep -q ":80\s"; then
    echo "C·∫¢NH B√ÅO: C·ªïng 80 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi m·ªôt ·ª©ng d·ª•ng kh√°c. Caddy s·∫Ω s·ª≠ d·ª•ng c·ªïng 8080."
    # ƒê√£ c·∫•u h√¨nh 8080 trong docker-compose.yml
else
    # N·∫øu c·ªïng 80 tr·ªëng, c·∫≠p nh·∫≠t docker-compose.yml ƒë·ªÉ s·ª≠ d·ª•ng c·ªïng 80
    sed -i 's/"8080:80"/"80:80"/g' $N8N_DIR/docker-compose.yml
    echo "C·ªïng 80 ƒëang tr·ªëng. Caddy s·∫Ω s·ª≠ d·ª•ng c·ªïng 80 m·∫∑c ƒë·ªãnh."
fi

# Ki·ªÉm tra quy·ªÅn truy c·∫≠p Docker
echo "Ki·ªÉm tra quy·ªÅn truy c·∫≠p Docker..."
if ! docker ps &>/dev/null; then
    echo "Kh·ªüi ƒë·ªông container v·ªõi sudo v√¨ quy·ªÅn truy c·∫≠p Docker..."
    DOCKER_COMPOSE_CMD="sudo docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="sudo docker compose"
    fi
else
    DOCKER_COMPOSE_CMD="docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
    fi
fi

# Build v√† kh·ªüi ƒë·ªông containers v·ªõi error handling
echo "üî® B·∫Øt ƒë·∫ßu build Docker image..."
BUILD_OUTPUT=$($DOCKER_COMPOSE_CMD build 2>&1)
BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -ne 0 ]; then
    echo "‚ùå L·ªói build Docker image:"
    echo "$BUILD_OUTPUT"
    echo ""
    echo "C√≥ th·ªÉ th·ª≠ c√°c c√°ch kh·∫Øc ph·ª•c sau:"
    echo "1. Ch·∫°y l·∫°i script n√†y"
    echo "2. Ki·ªÉm tra k·∫øt n·ªëi internet"
    echo "3. Gi·∫£i ph√≥ng dung l∆∞·ª£ng disk"
    exit 1
else
    echo "‚úÖ Build Docker image th√†nh c√¥ng!"
fi

echo "üöÄ Kh·ªüi ƒë·ªông containers..."
START_OUTPUT=$($DOCKER_COMPOSE_CMD up -d --remove-orphans 2>&1)
START_EXIT_CODE=$?

if [ $START_EXIT_CODE -ne 0 ]; then
    echo "‚ùå L·ªói kh·ªüi ƒë·ªông containers:"
    echo "$START_OUTPUT"
    exit 1
else
    echo "‚úÖ Containers ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!"
fi

# ƒê·ª£i l√¢u h∆°n ƒë·ªÉ c√°c container c√≥ th·ªÉ kh·ªüi ƒë·ªông ho√†n to√†n
echo "‚è≥ ƒê·ª£i containers kh·ªüi ƒë·ªông ho√†n to√†n (30 gi√¢y)..."
sleep 30

# Ki·ªÉm tra c√°c container ƒë√£ ch·∫°y ch∆∞a
echo "üîç Ki·ªÉm tra tr·∫°ng th√°i containers..."

# X√°c ƒë·ªãnh l·ªánh docker ph√π h·ª£p v·ªõi quy·ªÅn truy c·∫≠p
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
    DOCKER_COMPOSE_CMD="sudo docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="sudo docker compose"
    fi
else
    DOCKER_CMD="docker"
    DOCKER_COMPOSE_CMD="docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
    fi
fi

# Ki·ªÉm tra container N8N
N8N_RUNNING=$($DOCKER_CMD ps --filter "name=n8n" --format "{{.Names}}" 2>/dev/null)
if [ -n "$N8N_RUNNING" ]; then
    N8N_STATUS=$($DOCKER_CMD ps --filter "name=n8n" --format "{{.Status}}" 2>/dev/null)
    echo "‚úÖ Container N8N: $N8N_RUNNING - $N8N_STATUS"
else
    echo "‚ùå Container N8N: Kh√¥ng ch·∫°y ho·∫∑c l·ªói kh·ªüi ƒë·ªông"
    echo "üìã Ki·ªÉm tra logs N8N:"
    echo "   $DOCKER_COMPOSE_CMD logs n8n"
    echo ""
fi

# Ki·ªÉm tra container Caddy
CADDY_RUNNING=$($DOCKER_CMD ps --filter "name=caddy" --format "{{.Names}}" 2>/dev/null)
if [ -n "$CADDY_RUNNING" ]; then
    CADDY_STATUS=$($DOCKER_CMD ps --filter "name=caddy" --format "{{.Status}}" 2>/dev/null)
    echo "‚úÖ Container Caddy: $CADDY_RUNNING - $CADDY_STATUS"
else
    echo "‚ùå Container Caddy: Kh√¥ng ch·∫°y ho·∫∑c l·ªói kh·ªüi ƒë·ªông"
    echo "üìã Ki·ªÉm tra logs Caddy:"
    echo "   $DOCKER_COMPOSE_CMD logs caddy"
    echo ""
fi

# N·∫øu c√≥ container kh√¥ng ch·∫°y, hi·ªÉn th·ªã th√¥ng tin troubleshooting
if [ -z "$N8N_RUNNING" ] || [ -z "$CADDY_RUNNING" ]; then
    echo "‚ö†Ô∏è  M·ªôt ho·∫∑c nhi·ªÅu container kh√¥ng ch·∫°y. C√°c b∆∞·ªõc kh·∫Øc ph·ª•c:"
    echo "1. Ki·ªÉm tra logs: $DOCKER_COMPOSE_CMD logs"
    echo "2. Restart containers: $DOCKER_COMPOSE_CMD restart"
    echo "3. Rebuild t·ª´ ƒë·∫ßu: $DOCKER_COMPOSE_CMD down && $DOCKER_COMPOSE_CMD up -d --build"
    echo ""
fi

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c·ªïng ƒë∆∞·ª£c s·ª≠ d·ª•ng
CADDY_PORT=$(grep -o '"[0-9]\+:80"' $N8N_DIR/docker-compose.yml | cut -d':' -f1 | tr -d '"')
echo ""
echo "C·∫•u h√¨nh c·ªïng HTTP: $CADDY_PORT"
if [ "$CADDY_PORT" = "8080" ]; then
    echo "S·ª≠ d·ª•ng c·ªïng 8080 cho HTTP thay v√¨ c·ªïng 80 m·∫∑c ƒë·ªãnh (tr√°nh xung ƒë·ªôt)."
    echo "B·∫°n c√≥ th·ªÉ truy c·∫≠p b·∫±ng URL: http://${DOMAIN}:8080 ho·∫∑c https://${DOMAIN}"
else
    echo "S·ª≠ d·ª•ng c·ªïng 80 m·∫∑c ƒë·ªãnh cho HTTP."
    echo "B·∫°n c√≥ th·ªÉ truy c·∫≠p b·∫±ng URL: http://${DOMAIN} ho·∫∑c https://${DOMAIN}"
fi

# Ki·ªÉm tra FFmpeg, yt-dlp v√† Puppeteer trong container n8n
echo "Ki·ªÉm tra FFmpeg, yt-dlp v√† Puppeteer trong container n8n..."

# X√°c ƒë·ªãnh l·ªánh docker ph√π h·ª£p v·ªõi quy·ªÅn truy c·∫≠p
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
else
    DOCKER_CMD="docker"
fi

N8N_CONTAINER=$($DOCKER_CMD ps -q --filter "name=n8n" 2>/dev/null)
if [ -n "$N8N_CONTAINER" ]; then
    if $DOCKER_CMD exec $N8N_CONTAINER ffmpeg -version &> /dev/null; then
        echo "FFmpeg ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
        echo "Phi√™n b·∫£n FFmpeg:"
        $DOCKER_CMD exec $N8N_CONTAINER ffmpeg -version | head -n 1
    else
        echo "L∆∞u √Ω: FFmpeg c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch trong container."
    fi

    if $DOCKER_CMD exec $N8N_CONTAINER yt-dlp --version &> /dev/null; then
        echo "yt-dlp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
        echo "Phi√™n b·∫£n yt-dlp:"
        $DOCKER_CMD exec $N8N_CONTAINER yt-dlp --version
    else
        echo "L∆∞u √Ω: yt-dlp c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch trong container."
    fi
    
    # Ki·ªÉm tra tr·∫°ng th√°i Puppeteer t·ª´ file status
    PUPPETEER_STATUS=$($DOCKER_CMD exec $N8N_CONTAINER cat /files/puppeteer_status.txt 2>/dev/null || echo "Puppeteer: UNKNOWN")
    
    if [[ "$PUPPETEER_STATUS" == *"AVAILABLE"* ]]; then
        echo "‚úÖ Puppeteer/Chromium ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
        echo "Phi√™n b·∫£n Chromium:"
        $DOCKER_CMD exec $N8N_CONTAINER chromium-browser --version 2>/dev/null || echo "L·ªói l·∫•y th√¥ng tin phi√™n b·∫£n"
    else
        echo "‚ö†Ô∏è  L∆∞u √Ω: Puppeteer/Chromium c√†i ƒë·∫∑t kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng kh·∫£ d·ª•ng."
        echo "   C√°c t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
        echo "   H·ªá th·ªëng v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng v·ªõi c√°c t√≠nh nƒÉng kh√°c."
    fi
else
    echo "L∆∞u √Ω: Kh√¥ng th·ªÉ ki·ªÉm tra c√¥ng c·ª• ngay l√∫c n√†y. Container n8n ch∆∞a s·∫µn s√†ng."
fi

# T·∫°o script ki·ªÉm tra c·∫≠p nh·∫≠t t·ª± ƒë·ªông
echo "T·∫°o script c·∫≠p nh·∫≠t t·ª± ƒë·ªông..."
cat << EOF > $N8N_DIR/update-n8n.sh
#!/bin/bash

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c n8n
N8N_DIR="$N8N_DIR"

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" >> \$N8N_DIR/update.log
}

log "B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫≠p nh·∫≠t..."

# Ki·ªÉm tra Docker command
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    log "Kh√¥ng t√¨m th·∫•y l·ªánh docker-compose ho·∫∑c docker compose."
    exit 1
fi

# C·∫≠p nh·∫≠t yt-dlp tr√™n host
log "C·∫≠p nh·∫≠t yt-dlp tr√™n host system..."
if command -v pipx &> /dev/null; then
    pipx upgrade yt-dlp
elif [ -d "/opt/yt-dlp-venv" ]; then
    /opt/yt-dlp-venv/bin/pip install -U yt-dlp
else
    log "Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t yt-dlp ƒë√£ bi·∫øt"
fi

# L·∫•y phi√™n b·∫£n hi·ªán t·∫°i
CURRENT_IMAGE_ID=\$(docker images -q n8n-ffmpeg-latest)
if [ -z "\$CURRENT_IMAGE_ID" ]; then
    log "Kh√¥ng t√¨m th·∫•y image n8n-ffmpeg-latest"
    exit 1
fi

# Ki·ªÉm tra v√† x√≥a image g·ªëc n8nio/n8n c≈© n·∫øu c·∫ßn
OLD_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Pull image g·ªëc m·ªõi nh·∫•t
log "K√©o image n8nio/n8n m·ªõi nh·∫•t"
docker pull n8nio/n8n

# L·∫•y image ID m·ªõi
NEW_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Ki·ªÉm tra xem image g·ªëc ƒë√£ thay ƒë·ªïi ch∆∞a
if [ "\$NEW_BASE_IMAGE_ID" != "\$OLD_BASE_IMAGE_ID" ]; then
    log "Ph√°t hi·ªán image m·ªõi (\${NEW_BASE_IMAGE_ID}), ti·∫øn h√†nh c·∫≠p nh·∫≠t..."
    
    # Sao l∆∞u d·ªØ li·ªáu n8n
    BACKUP_DATE=\$(date '+%Y%m%d_%H%M%S')
    BACKUP_FILE="\$N8N_DIR/backup_\${BACKUP_DATE}.zip"
    log "T·∫°o b·∫£n sao l∆∞u t·∫°i \$BACKUP_FILE"
    zip -r \$BACKUP_FILE \$N8N_DIR -x \$N8N_DIR/update-n8n.sh -x \$N8N_DIR/backup_* -x \$N8N_DIR/files/temp/* -x \$N8N_DIR/Dockerfile -x \$N8N_DIR/docker-compose.yml
    
    # Build l·∫°i image n8n-ffmpeg
    cd \$N8N_DIR
    log "ƒêang build l·∫°i image n8n-ffmpeg-latest..."
    \$DOCKER_COMPOSE build
    
    # Kh·ªüi ƒë·ªông l·∫°i container
    log "Kh·ªüi ƒë·ªông l·∫°i container..."
    \$DOCKER_COMPOSE down
    \$DOCKER_COMPOSE up -d
    
    log "C·∫≠p nh·∫≠t ho√†n t·∫•t, phi√™n b·∫£n m·ªõi: \${NEW_BASE_IMAGE_ID}"
else
    log "Kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi cho n8n"
    
    # C·∫≠p nh·∫≠t yt-dlp trong container
    log "C·∫≠p nh·∫≠t yt-dlp trong container n8n..."
    N8N_CONTAINER=\$(docker ps -q --filter "name=n8n" 2>/dev/null)
    if [ -n "\$N8N_CONTAINER" ]; then
        docker exec -u root \$N8N_CONTAINER pip3 install --break-system-packages -U yt-dlp
        log "yt-dlp ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng trong container"
    else
        log "Kh√¥ng t√¨m th·∫•y container n8n ƒëang ch·∫°y"
    fi
fi
EOF

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho script c·∫≠p nh·∫≠t
chmod +x $N8N_DIR/update-n8n.sh

# T·∫°o script kh·∫Øc ph·ª•c s·ª± c·ªë
echo "T·∫°o script kh·∫Øc ph·ª•c s·ª± c·ªë..."
cat << 'EOF' > $N8N_DIR/troubleshoot.sh
#!/bin/bash

# Script kh·∫Øc ph·ª•c s·ª± c·ªë N8N
echo "üîß SCRIPT KH·∫ÆC PH·ª§C S·ª∞ C·ªê N8N"
echo "================================"

N8N_DIR="$(dirname "$0")"
cd "$N8N_DIR"

# X√°c ƒë·ªãnh docker command
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
    DOCKER_COMPOSE_CMD="sudo docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="sudo docker compose"
    fi
else
    DOCKER_CMD="docker"
    DOCKER_COMPOSE_CMD="docker-compose"
    if ! command -v docker-compose &> /dev/null; then
        DOCKER_COMPOSE_CMD="docker compose"
    fi
fi

echo "1. Ki·ªÉm tra tr·∫°ng th√°i containers..."
echo "=================================="
$DOCKER_CMD ps --filter "name=n8n" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
echo ""

echo "2. Ki·ªÉm tra logs containers..."
echo "============================="
echo ">> N8N Logs (10 d√≤ng cu·ªëi):"
$DOCKER_COMPOSE_CMD logs --tail=10 n8n 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y logs N8N"
echo ""
echo ">> Caddy Logs (10 d√≤ng cu·ªëi):"
$DOCKER_COMPOSE_CMD logs --tail=10 caddy 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y logs Caddy"
echo ""

echo "3. Ki·ªÉm tra network connectivity..."
echo "==================================="
echo ">> Ki·ªÉm tra c·ªïng 5678 (N8N internal):"
$DOCKER_CMD exec $(docker ps -q --filter "name=n8n" | head -1) netstat -tuln | grep :5678 2>/dev/null || echo "N8N port kh√¥ng listening"
echo ""

echo "4. Ki·ªÉm tra disk space..."
echo "========================"
df -h | head -1
df -h | grep -E '(/$|/var|/home)'
echo ""

echo "5. C√°c l·ªánh kh·∫Øc ph·ª•c th∆∞·ªùng d√πng:"
echo "================================="
echo "‚Ä¢ Restart containers:"
echo "  $DOCKER_COMPOSE_CMD restart"
echo ""
echo "‚Ä¢ Rebuild containers:"
echo "  $DOCKER_COMPOSE_CMD down && $DOCKER_COMPOSE_CMD up -d --build"
echo ""
echo "‚Ä¢ Xem logs realtime:"
echo "  $DOCKER_COMPOSE_CMD logs -f"
echo ""
echo "‚Ä¢ Ki·ªÉm tra resources:"
echo "  $DOCKER_CMD stats --no-stream"
echo ""

read -p "B·∫°n c√≥ mu·ªën restart containers ngay b√¢y gi·ªù? (y/n): " RESTART_CHOICE
if [ "$RESTART_CHOICE" = "y" ] || [ "$RESTART_CHOICE" = "Y" ]; then
    echo "üîÑ ƒêang restart containers..."
    $DOCKER_COMPOSE_CMD restart
    echo "‚úÖ Ho√†n t·∫•t restart. ƒê·ª£i 30 gi√¢y ƒë·ªÉ containers kh·ªüi ƒë·ªông..."
    sleep 30
    echo "Tr·∫°ng th√°i sau khi restart:"
    $DOCKER_CMD ps --filter "name=n8n"
fi
EOF

chmod +x $N8N_DIR/troubleshoot.sh

# T·∫°o cron job ƒë·ªÉ ch·∫°y m·ªói 12 gi·ªù
echo "Thi·∫øt l·∫≠p cron job c·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 12 gi·ªù v√† sao l∆∞u h√†ng ng√†y..."
UPDATE_CRON="0 */12 * * * $N8N_DIR/update-n8n.sh"
BACKUP_CRON="0 2 * * * $N8N_DIR/backup-workflows.sh"
(crontab -l 2>/dev/null | grep -v "update-n8n.sh\|backup-workflows.sh"; echo "$UPDATE_CRON"; echo "$BACKUP_CRON") | crontab -

# Danh s√°ch c√°c th√†nh ph·∫ßn th·∫•t b·∫°i
FAILED_COMPONENTS=()

# Ki·ªÉm tra tr·∫°ng th√°i News API
if [ "$SETUP_NEWS_API" = "y" ]; then
    if systemctl is-active --quiet news-api; then
        NEWS_API_STATUS="‚úÖ ƒêang ch·∫°y"
    else
        NEWS_API_STATUS="‚ùå L·ªói kh·ªüi ƒë·ªông"
        FAILED_COMPONENTS+=("News API")
    fi
fi

# Ki·ªÉm tra tr·∫°ng th√°i Puppeteer
PUPPETEER_INSTALL_STATUS="‚ùå L·ªói c√†i ƒë·∫∑t"
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
else
    DOCKER_CMD="docker"
fi

N8N_CONTAINER_CHECK=$($DOCKER_CMD ps -q --filter "name=n8n" 2>/dev/null)
if [ -n "$N8N_CONTAINER_CHECK" ]; then
    PUPPETEER_STATUS_CHECK=$($DOCKER_CMD exec $N8N_CONTAINER_CHECK cat /files/puppeteer_status.txt 2>/dev/null || echo "Puppeteer: UNKNOWN")
    if [[ "$PUPPETEER_STATUS_CHECK" == *"AVAILABLE"* ]]; then
        PUPPETEER_INSTALL_STATUS="‚úÖ Kh·∫£ d·ª•ng"
    else
        PUPPETEER_INSTALL_STATUS="‚ö†Ô∏è Kh√¥ng kh·∫£ d·ª•ng"
        FAILED_COMPONENTS+=("Puppeteer/Chromium")
    fi
fi

echo "======================================================================"
echo "üéâ N8N ƒê√É ƒê∆Ø·ª¢C C√ÄI ƒê·∫∂T V√Ä C·∫§U H√åNH TH√ÄNH C√îNG!"
echo "======================================================================"
echo ""
echo "üåê TRUY C·∫¨P N8N:"
echo "  - URL ch√≠nh: https://${DOMAIN}"
if [ "$CADDY_PORT" = "8080" ]; then
    echo "  - URL ph·ª•: http://${DOMAIN}:8080"
fi
echo ""

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ swap
if [ "$(swapon --show | wc -l)" -gt 0 ]; then
    SWAP_SIZE=$(free -h | grep Swap | awk '{print $2}')
    echo "üíæ TH√îNG TIN SWAP:"
    echo "  - K√≠ch th∆∞·ªõc: ${SWAP_SIZE}"
    echo "  - Swappiness: $(cat /proc/sys/vm/swappiness) (M·ª©c c√†ng th·∫•p c√†ng ∆∞u ti√™n d√πng RAM)"
    echo "  - Vfs_cache_pressure: $(cat /proc/sys/vm/vfs_cache_pressure) (M·ª©c c√†ng th·∫•p c√†ng gi·ªØ cache l√¢u h∆°n)"
    echo ""
fi

echo "üìÅ TH√îNG TIN H·ªÜ TH·ªêNG:"
echo "  - Th∆∞ m·ª•c c√†i ƒë·∫∑t: $N8N_DIR"
echo "  - Container runtime: Docker"
echo "  - Reverse proxy: Caddy (t·ª± ƒë·ªông SSL)"
if $IS_WSL; then
    echo "  - M√¥i tr∆∞·ªùng: WSL (Windows Subsystem for Linux)"
    echo "  - Docker daemon: Kh·ªüi ƒë·ªông th·ªß c√¥ng"
else
    echo "  - M√¥i tr∆∞·ªùng: VPS/Server Linux"
    echo "  - Docker service: Systemd qu·∫£n l√Ω"
fi
echo ""

echo "üîÑ T√çNH NƒÇNG T·ª∞ ƒê·ªòNG C·∫¨P NH·∫¨T:"
echo "  - Ki·ªÉm tra c·∫≠p nh·∫≠t: M·ªói 12 gi·ªù"
echo "  - Log c·∫≠p nh·∫≠t: $N8N_DIR/update.log"
echo "  - T·ª± ƒë·ªông sao l∆∞u tr∆∞·ªõc khi c·∫≠p nh·∫≠t"
echo "  - T·ª± ƒë·ªông c·∫≠p nh·∫≠t yt-dlp v√† c√°c c√¥ng c·ª•"
echo ""

echo "üíæ T√çNH NƒÇNG SAO L∆ØU T·ª∞ ƒê·ªòNG:"
echo "  - L·ªãch sao l∆∞u: H√†ng ng√†y l√∫c 2:00 AM"
echo "  - Th∆∞ m·ª•c backup: $N8N_DIR/files/backup_full/"
echo "  - Lo·∫°i d·ªØ li·ªáu: Workflows, Credentials, Database"
echo "  - Gi·ªØ l·∫°i: 30 b·∫£n sao l∆∞u g·∫ßn nh·∫•t"
echo "  - Log backup: $N8N_DIR/files/backup_full/backup.log"

if [ "$SETUP_TELEGRAM" = "y" ]; then
    echo "  - üì± Telegram: T·ª± ƒë·ªông g·ª≠i backup qua Telegram"
fi
echo ""

if [ "$SETUP_TELEGRAM" = "y" ]; then
    echo "üì± C·∫§U H√åNH TELEGRAM BACKUP:"
    echo "  - Tr·∫°ng th√°i: ‚úÖ ƒê√£ k√≠ch ho·∫°t"
    echo "  - File c·∫•u h√¨nh: $N8N_DIR/telegram_config.txt"
    echo "  - Ch·ª©c nƒÉng: T·ª± ƒë·ªông g·ª≠i file backup qua Telegram"
    echo ""
fi

if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "üì∞ NEWS CONTENT API (C·∫¢I TI·∫æN M·ªöI):"
    echo "  - URL API: https://api.${DOMAIN}"
    echo "  - Docs UI: https://api.${DOMAIN}/docs (v·ªõi Navigation Menu responsive)"
    echo "  - Bearer Token: $NEWS_API_TOKEN (ƒë∆∞·ª£c ·∫©n trong docs v√¨ b·∫£o m·∫≠t)"
    echo "  - Ch·ª©c nƒÉng: L·∫•y n·ªôi dung tin t·ª©c v·ªõi Newspaper4k"
    echo ""
    echo "  üìã C√ÅCH S·ª¨ D·ª§NG NEWS API TRONG N8N:"
    echo "  1. T·∫°o HTTP Request node trong workflow"
    echo "  2. Method: GET"
    echo "  3. URL: https://api.${DOMAIN}/article"
    echo "  4. Headers: Authorization: Bearer $NEWS_API_TOKEN"
    echo "  5. Query Parameters: url = {{$json.article_url}}"
    echo ""
    echo "  üîß ƒê·ªîI BEARER TOKEN (H∆Ø·ªöNG D·∫™N ƒê·∫¶Y ƒê·ª¶):"
    echo "  - Ch·∫°y l·ªánh: $N8N_DIR/change-api-token.sh"
    echo "  - Script t·ª± ƒë·ªông l·∫•y domain t·ª´ c·∫•u h√¨nh"
    echo "  - Hi·ªÉn th·ªã v√≠ d·ª• curl v·ªõi domain v√† token m·ªõi"
    echo ""
fi

echo "üì∫ TH√îNG TIN C√îNG C·ª§ T√çCH H·ª¢P:"
echo "  - FFmpeg: ‚úÖ X·ª≠ l√Ω video/audio"
echo "  - yt-dlp: ‚úÖ T·∫£i video YouTube"
echo "  - Puppeteer: $PUPPETEER_INSTALL_STATUS"
echo "  - Chromium: $PUPPETEER_INSTALL_STATUS"
echo "  - Th∆∞ m·ª•c video: $N8N_DIR/files/youtube_content_anylystic/"
echo ""

echo "üõ†Ô∏è L·ªÜNH QU·∫¢N L√ù H·ªÜ TH·ªêNG:"
echo "  - üîß Kh·∫Øc ph·ª•c s·ª± c·ªë: $N8N_DIR/troubleshoot.sh"
echo "  - üìã Xem logs N8N: cd $N8N_DIR && docker-compose logs -f n8n"
echo "  - üîÑ Restart N8N: cd $N8N_DIR && docker-compose restart"
echo "  - üíæ Backup th·ªß c√¥ng: $N8N_DIR/manual-backup.sh"
echo "  - üîÑ C·∫≠p nh·∫≠t th·ªß c√¥ng: $N8N_DIR/update-n8n.sh"
echo "  - üèóÔ∏è  Rebuild containers: cd $N8N_DIR && docker-compose down && docker-compose up -d --build"

if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - üîÑ Restart News API: cd $N8N_DIR && docker-compose restart fastapi"
    echo "  - üìã Xem logs News API: cd $N8N_DIR && docker-compose logs -f fastapi"
    echo "  - üîë ƒê·ªïi API Token: $N8N_DIR/change-api-token.sh"
fi
echo ""

# Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu c√≥ th√†nh ph·∫ßn th·∫•t b·∫°i
if [ ${#FAILED_COMPONENTS[@]} -gt 0 ]; then
    echo "‚ö†Ô∏è  C√ÅC TH√ÄNH PH·∫¶N C√ÄI ƒê·∫∂T KH√îNG TH√ÄNH C√îNG:"
    for component in "${FAILED_COMPONENTS[@]}"; do
        echo "  - ‚ùå $component"
    done
    echo ""
    echo "üìû B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script ho·∫∑c c√†i ƒë·∫∑t th·ªß c√¥ng c√°c th√†nh ph·∫ßn n√†y."
    echo ""
fi

echo "üìö T√ÄI LI·ªÜU THAM KH·∫¢O:"
echo "  - N8N Documentation: https://docs.n8n.io/"
echo "  - N8N Community: https://community.n8n.io/"
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - Newspaper4k: https://newspaper4k.readthedocs.io/"
fi
echo ""

echo "üîí L∆ØU √ù B·∫¢O M·∫¨T V√Ä H·ªÜ TH·ªêNG:"
echo "  - ƒê·ªïi m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p N8N sau khi truy c·∫≠p l·∫ßn ƒë·∫ßu"
echo "  - Backup ƒë·ªãnh k·ª≥ c√°c workflow quan tr·ªçng"
echo "  - Gi√°m s√°t logs h·ªá th·ªëng th∆∞·ªùng xuy√™n"
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - Gi·ªØ b√≠ m·∫≠t Bearer Token c·ªßa News API: $NEWS_API_TOKEN"
fi

# Th√¥ng b√°o ƒë·∫∑c bi·ªát v·ªÅ Puppeteer n·∫øu kh√¥ng kh·∫£ d·ª•ng
if [[ "$PUPPETEER_INSTALL_STATUS" == *"Kh√¥ng kh·∫£ d·ª•ng"* ]] || [[ "$PUPPETEER_INSTALL_STATUS" == *"L·ªói c√†i ƒë·∫∑t"* ]]; then
    echo ""
    echo "‚ö†Ô∏è  TH√îNG B√ÅO V·ªÄ PUPPETEER:"
    echo "  - Puppeteer/Chromium kh√¥ng c√†i ƒë·∫∑t th√†nh c√¥ng"
    echo "  - C√°c workflow s·ª≠ d·ª•ng t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát s·∫Ω kh√¥ng ho·∫°t ƒë·ªông"
    echo "  - T·∫•t c·∫£ t√≠nh nƒÉng kh√°c c·ªßa N8N v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
    echo "  - B·∫°n c√≥ th·ªÉ th·ª≠ c√†i ƒë·∫∑t l·∫°i b·∫±ng c√°ch ch·∫°y script m·ªôt l·∫ßn n·ªØa"
fi
echo ""

echo "‚è±Ô∏è  L∆ØU √ù KH·ªûI ƒê·ªòNG:"
echo "  - N8N c√≥ th·ªÉ c·∫ßn 2-3 ph√∫t ƒë·ªÉ kh·ªüi ƒë·ªông ho√†n to√†n"
echo "  - SSL certificate t·ª± ƒë·ªông c√≥ th·ªÉ m·∫•t 5-10 ph√∫t ƒë·ªÉ c·∫•u h√¨nh"
echo "  - N·∫øu kh√¥ng truy c·∫≠p ƒë∆∞·ª£c, h√£y ki·ªÉm tra logs v√† DNS"
echo ""

echo "üë®‚Äçüíª TH√îNG TIN T√ÅC GI·∫¢:"
echo "  - T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán"
echo "  - YouTube: Kalvin Thien Social"
echo "  - Facebook: Ban Thien Handsome"
echo "  - Zalo/Phone: 08.8888.4749"
echo "  - Phi√™n b·∫£n: v2.1 (27/06/2025)"
echo "  - T√≠nh nƒÉng m·ªõi: News API + Telegram Backup + Navigation UI"
echo ""
echo "======================================================================"
echo "üéØ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! CH√öC B·∫†N S·ª¨ D·ª§NG N8N HI·ªÜU QU·∫¢!"
echo "======================================================================"
