#!/bin/bash

# Script c√†i ƒë·∫∑t N8N t·ª± ƒë·ªông v·ªõi ZeroSSL
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán
# C·∫≠p nh·∫≠t: 30/06/2025

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# Bi·∫øn to√†n c·ª•c
SCRIPT_DIR="/home/n8n"
DOMAIN=""
API_DOMAIN=""
NEWS_TOKEN=""
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""
GOOGLE_DRIVE_ENABLED=false
GOOGLE_CREDENTIALS_FILE=""
GOOGLE_FOLDER_ID=""
AUTO_UPDATE=false
USE_DOMAIN=true
SSL_PROVIDER="letsencrypt"
ZEROSSL_EMAIL=""

# H√†m log v·ªõi timestamp
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

# H√†m hi·ªÉn th·ªã header
show_header() {
    clear
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ SCRIPT C√ÄI ƒê·∫∂T N8N T·ª∞ ƒê·ªòNG 2025 üöÄ                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚ú® N8N + FFmpeg + yt-dlp + Puppeteer + News API + Telegram Backup        ‚ïë
‚ïë üîí SSL Certificate t·ª± ƒë·ªông v·ªõi Caddy (Let's Encrypt + ZeroSSL)           ‚ïë
‚ïë üì∞ News Content API v·ªõi FastAPI + Newspaper4k                            ‚ïë
‚ïë üì± Telegram + Google Drive Backup t·ª± ƒë·ªông                                ‚ïë
‚ïë üîÑ Auto-Update v·ªõi t√πy ch·ªçn                                              ‚ïë
‚ïë üåê H·ªó tr·ª£ c√†i ƒë·∫∑t kh√¥ng c·∫ßn domain (localhost)                          ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üë®‚Äçüíª T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán                                           ‚ïë
‚ïë üì∫ YouTube: https://www.youtube.com/@kalvinthiensocial                  ‚ïë
‚ïë üì± Zalo: 08.8888.4749                                                   ‚ïë
‚ïë üé¨ ƒêƒÉng k√Ω k√™nh ƒë·ªÉ ·ªßng h·ªô m√¨nh nh√©! üîî                                  ‚ïë
‚ïë üìÖ C·∫≠p nh·∫≠t: 30/06/2025                                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# H√†m ki·ªÉm tra v√† c√†i ƒë·∫∑t Docker
install_docker() {
    if ! command -v docker &> /dev/null; then
        log "${YELLOW}üê≥ C√†i ƒë·∫∑t Docker..."
        curl -fsSL https://get.docker.com -o get-docker.sh
        sh get-docker.sh
        usermod -aG docker $USER
        systemctl enable docker
        systemctl start docker
        rm get-docker.sh
        log "${GREEN}[SUCCESS] Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        log "${GREEN}[INFO] Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    fi

    if ! command -v docker-compose &> /dev/null; then
        log "${YELLOW}üê≥ C√†i ƒë·∫∑t Docker Compose..."
        curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        chmod +x /usr/local/bin/docker-compose
        log "${GREEN}[SUCCESS] Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    else
        log "${GREEN}[INFO] S·ª≠ d·ª•ng docker-compose"
    fi
}

# H√†m thi·∫øt l·∫≠p swap
setup_swap() {
    log "${YELLOW}üîÑ Thi·∫øt l·∫≠p swap memory..."
    if [ ! -f /swapfile ]; then
        fallocate -l 2G /swapfile
        chmod 600 /swapfile
        mkswap /swapfile
        swapon /swapfile
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
        log "${GREEN}[SUCCESS] ƒê√£ t·∫°o swap 2GB"
    else
        log "${GREEN}[INFO] Swap file ƒë√£ t·ªìn t·∫°i"
    fi
}

# H√†m c·∫•u h√¨nh domain
configure_domain() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üåê C·∫§U H√åNH DOMAIN                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo -e "${YELLOW}üåê B·∫°n c√≥ mu·ªën s·ª≠ d·ª•ng domain t√πy ch·ªânh? (Y/n):${NC}"
    read -r use_domain_input
    if [[ $use_domain_input =~ ^[Nn]$ ]]; then
        USE_DOMAIN=false
        DOMAIN="localhost"
        API_DOMAIN="localhost"
        log "${GREEN}[INFO] S·ª≠ d·ª•ng localhost (kh√¥ng SSL)"
        return
    fi

    while true; do
        echo -e "${YELLOW}üåê Nh·∫≠p domain ch√≠nh cho N8N (v√≠ d·ª•: n8n.example.com):${NC}"
        read -r DOMAIN
        if [[ -n "$DOMAIN" && "$DOMAIN" != *" "* ]]; then
            break
        fi
        echo -e "${RED}[ERROR] Domain kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p l·∫°i.${NC}"
    done

    API_DOMAIN="api.$DOMAIN"
    log "${GREEN}[INFO] Domain N8N: $DOMAIN"
    log "${GREEN}[INFO] Domain API: $API_DOMAIN"
}

# H√†m ki·ªÉm tra DNS
check_dns() {
    if [ "$USE_DOMAIN" = false ]; then
        return 0
    fi

    log "${YELLOW}üîç Ki·ªÉm tra DNS cho domain $DOMAIN..."
    
    SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || curl -s icanhazip.com)
    log "${GREEN}[INFO] IP m√°y ch·ªß: $SERVER_IP"
    
    DOMAIN_IP=$(dig +short $DOMAIN | tail -n1)
    API_DOMAIN_IP=$(dig +short $API_DOMAIN | tail -n1)
    
    log "${GREEN}[INFO] IP c·ªßa $DOMAIN: $DOMAIN_IP"
    log "${GREEN}[INFO] IP c·ªßa $API_DOMAIN: $API_DOMAIN_IP"
    
    if [ "$DOMAIN_IP" != "$SERVER_IP" ] || [ "$API_DOMAIN_IP" != "$SERVER_IP" ]; then
        echo -e "${RED}"
        cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚ö†Ô∏è  DNS CH∆ØA ƒê∆Ø·ª¢C C·∫§U H√åNH                           ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
        echo -e "${NC}"
        echo -e "${YELLOW}Vui l√≤ng c·∫•u h√¨nh DNS records:${NC}"
        echo -e "  ‚Ä¢ $DOMAIN ‚Üí $SERVER_IP"
        echo -e "  ‚Ä¢ $API_DOMAIN ‚Üí $SERVER_IP"
        echo ""
        echo -e "${YELLOW}B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N):${NC}"
        read -r continue_dns
        if [[ ! $continue_dns =~ ^[Yy]$ ]]; then
            exit 1
        fi
    else
        log "${GREEN}[SUCCESS] DNS ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng"
    fi
}

# H√†m cleanup c√†i ƒë·∫∑t c≈©
cleanup_old_installation() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üóëÔ∏è  CLEANUP OPTION                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    if [ -d "$SCRIPT_DIR" ]; then
        echo -e "${YELLOW}[WARNING] Ph√°t hi·ªán c√†i ƒë·∫∑t N8N c≈© t·∫°i: $SCRIPT_DIR${NC}"
        echo -e "${YELLOW}üóëÔ∏è  B·∫°n c√≥ mu·ªën x√≥a c√†i ƒë·∫∑t c≈© v√† c√†i m·ªõi? (y/N):${NC}"
        read -r cleanup_choice
        if [[ $cleanup_choice =~ ^[Yy]$ ]]; then
            log "${YELLOW}üóëÔ∏è X√≥a c√†i ƒë·∫∑t c≈©..."
            cd /
            docker-compose -f $SCRIPT_DIR/docker-compose.yml down 2>/dev/null || true
            docker system prune -f 2>/dev/null || true
            rm -rf $SCRIPT_DIR
            log "${GREEN}[SUCCESS] ƒê√£ x√≥a c√†i ƒë·∫∑t c≈©"
        fi
    fi
}

# H√†m c·∫•u h√¨nh News API
configure_news_api() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üì∞ NEWS CONTENT API                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo "News Content API cho ph√©p:"
    echo -e "  üì∞ C√†o n·ªôi dung b√†i vi·∫øt t·ª´ b·∫•t k·ª≥ website n√†o"
    echo -e "  üì° Parse RSS feeds ƒë·ªÉ l·∫•y tin t·ª©c m·ªõi nh·∫•t"
    echo -e "  üîç T√¨m ki·∫øm v√† ph√¢n t√≠ch n·ªôi dung t·ª± ƒë·ªông"
    echo -e "  ü§ñ T√≠ch h·ª£p tr·ª±c ti·∫øp v√†o N8N workflows"
    echo ""
    echo -e "${YELLOW}üì∞ B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t News Content API? (Y/n):${NC}"
    read -r news_api_choice
    
    if [[ ! $news_api_choice =~ ^[Nn]$ ]]; then
        echo ""
        echo -e "${BLUE}üîê Thi·∫øt l·∫≠p Bearer Token cho News API:${NC}"
        echo -e "  ‚Ä¢ Token c√≥ th·ªÉ ch·ª©a ch·ªØ c√°i, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"
        echo -e "  ‚Ä¢ ƒê·ªô d√†i t√πy √Ω (khuy·∫øn ngh·ªã t·ª´ 32 k√Ω t·ª±)"
        echo -e "  ‚Ä¢ S·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c API calls"
        echo ""
        
        while true; do
            echo -e "${YELLOW}üîë Nh·∫≠p Bearer Token:${NC}"
            read -r NEWS_TOKEN
            if [[ -n "$NEWS_TOKEN" ]]; then
                break
            fi
            echo -e "${RED}[ERROR] Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng${NC}"
        done
        
        log "${GREEN}[SUCCESS] ƒê√£ thi·∫øt l·∫≠p Bearer Token cho News API"
    fi
}

# H√†m c·∫•u h√¨nh Telegram Backup
configure_telegram_backup() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üì± TELEGRAM BACKUP                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo "Telegram Backup cho ph√©p:"
    echo -e "  üîÑ T·ª± ƒë·ªông backup workflows & credentials m·ªói ng√†y"
    echo -e "  üì± G·ª≠i file backup qua Telegram Bot (n·∫øu <20MB)"
    echo -e "  üìä Th√¥ng b√°o realtime v·ªÅ tr·∫°ng th√°i backup"
    echo -e "  üóÇÔ∏è Gi·ªØ 30 b·∫£n backup g·∫ßn nh·∫•t t·ª± ƒë·ªông"
    echo ""
    echo -e "${YELLOW}üì± B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p Telegram Backup? (Y/n):${NC}"
    read -r telegram_choice
    
    if [[ ! $telegram_choice =~ ^[Nn]$ ]]; then
        echo ""
        echo -e "${BLUE}ü§ñ H∆∞·ªõng d·∫´n t·∫°o Telegram Bot:${NC}"
        echo -e "  1. M·ªü Telegram, t√¨m @BotFather"
        echo -e "  2. G·ª≠i /newbot v√† l√†m theo h∆∞·ªõng d·∫´n"
        echo -e "  3. L∆∞u Bot Token"
        echo -e "  4. T√¨m @userinfobot ƒë·ªÉ l·∫•y Chat ID"
        echo ""
        
        while true; do
            echo -e "${YELLOW}üîë Nh·∫≠p Telegram Bot Token:${NC}"
            read -r TELEGRAM_BOT_TOKEN
            if [[ -n "$TELEGRAM_BOT_TOKEN" ]]; then
                break
            fi
            echo -e "${RED}[ERROR] Bot Token kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng${NC}"
        done
        
        while true; do
            echo -e "${YELLOW}üÜî Nh·∫≠p Telegram Chat ID:${NC}"
            read -r TELEGRAM_CHAT_ID
            if [[ -n "$TELEGRAM_CHAT_ID" ]]; then
                break
            fi
            echo -e "${RED}[ERROR] Chat ID kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng${NC}"
        done
        
        log "${GREEN}[SUCCESS] ƒê√£ thi·∫øt l·∫≠p Telegram Backup"
    fi
}

# H√†m c·∫•u h√¨nh Google Drive Backup
configure_google_drive_backup() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚òÅÔ∏è  GOOGLE DRIVE BACKUP                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo "Google Drive Backup cho ph√©p:"
    echo -e "  ‚òÅÔ∏è  T·ª± ƒë·ªông backup workflows & credentials l√™n Google Drive"
    echo -e "  üìÅ T·∫°o th∆∞ m·ª•c ri√™ng cho t·ª´ng server"
    echo -e "  üîÑ Backup h√†ng ng√†y, gi·ªØ 30 b·∫£n g·∫ßn nh·∫•t"
    echo -e "  üìä Th√¥ng b√°o tr·∫°ng th√°i backup qua Telegram"
    echo ""
    echo -e "${YELLOW}‚òÅÔ∏è  B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p Google Drive Backup? (Y/n):${NC}"
    read -r gdrive_choice
    
    if [[ ! $gdrive_choice =~ ^[Nn]$ ]]; then
        GOOGLE_DRIVE_ENABLED=true
        echo ""
        echo -e "${BLUE}üîê H∆∞·ªõng d·∫´n thi·∫øt l·∫≠p Google Drive API:${NC}"
        echo -e "  1. Truy c·∫≠p: https://console.developers.google.com/"
        echo -e "  2. T·∫°o project m·ªõi ho·∫∑c ch·ªçn project c√≥ s·∫µn"
        echo -e "  3. Enable Google Drive API"
        echo -e "  4. T·∫°o Service Account:"
        echo -e "     ‚Ä¢ APIs & Services ‚Üí Credentials ‚Üí Create Credentials ‚Üí Service Account"
        echo -e "     ‚Ä¢ ƒê·∫∑t t√™n v√† m√¥ t·∫£ cho Service Account"
        echo -e "     ‚Ä¢ T·∫°o Key (JSON format) v√† download"
        echo -e "  5. Chia s·∫ª th∆∞ m·ª•c Google Drive v·ªõi email Service Account"
        echo ""
        
        echo -e "${YELLOW}üìÅ Nh·∫≠p Google Drive Folder ID (t·ª´ URL th∆∞ m·ª•c):${NC}"
        echo -e "${BLUE}   V√≠ d·ª•: https://drive.google.com/drive/folders/1ABC...XYZ${NC}"
        echo -e "${BLUE}   ‚Üí Folder ID l√†: 1ABC...XYZ${NC}"
        read -r GOOGLE_FOLDER_ID
        
        echo ""
        echo -e "${YELLOW}üìÑ D√°n n·ªôi dung file JSON credentials (Ctrl+D ƒë·ªÉ k·∫øt th√∫c):${NC}"
        GOOGLE_CREDENTIALS_CONTENT=$(cat)
        
        log "${GREEN}[SUCCESS] ƒê√£ thi·∫øt l·∫≠p Google Drive Backup"
    fi
}

# H√†m c·∫•u h√¨nh Auto-Update
configure_auto_update() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîÑ AUTO-UPDATE                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo "Auto-Update s·∫Ω:"
    echo -e "  üîÑ T·ª± ƒë·ªông c·∫≠p nh·∫≠t N8N m·ªói 12 gi·ªù"
    echo -e "  üì¶ C·∫≠p nh·∫≠t yt-dlp, FFmpeg v√† c√°c dependencies"
    echo -e "  üìã Ghi log chi ti·∫øt qu√° tr√¨nh update"
    echo -e "  üîí Backup tr∆∞·ªõc khi update"
    echo ""
    echo -e "${YELLOW}üîÑ B·∫°n c√≥ mu·ªën b·∫≠t Auto-Update? (Y/n):${NC}"
    read -r auto_update_choice
    if [[ ! $auto_update_choice =~ ^[Nn]$ ]]; then
        AUTO_UPDATE=true
        log "${GREEN}[SUCCESS] ƒê√£ b·∫≠t Auto-Update"
    fi
}

# H√†m c·∫•u h√¨nh SSL Provider
configure_ssl_provider() {
    if [ "$USE_DOMAIN" = false ]; then
        return 0
    fi

    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîí SSL CERTIFICATE PROVIDER                         ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"

    echo "Ch·ªçn nh√† cung c·∫•p SSL:"
    echo -e "  ${GREEN}1.${NC} Let's Encrypt (M·∫∑c ƒë·ªãnh - 90 ng√†y, 5 cert/tu·∫ßn/domain)"
    echo -e "  ${GREEN}2.${NC} ZeroSSL (90 ng√†y, kh√¥ng gi·ªõi h·∫°n domain)"
    echo -e "  ${GREEN}3.${NC} T·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi (Let's Encrypt ‚Üí ZeroSSL n·∫øu rate limit)"
    echo ""
    echo -e "${YELLOW}üîí Ch·ªçn SSL Provider (1/2/3) [3]:${NC}"
    read -r ssl_choice

    case $ssl_choice in
        1)
            SSL_PROVIDER="letsencrypt"
            log "${GREEN}[INFO] S·ª≠ d·ª•ng Let's Encrypt"
            ;;
        2)
            SSL_PROVIDER="zerossl"
            echo -e "${YELLOW}üìß Nh·∫≠p email cho ZeroSSL:${NC}"
            read -r ZEROSSL_EMAIL
            log "${GREEN}[INFO] S·ª≠ d·ª•ng ZeroSSL"
            ;;
        *)
            SSL_PROVIDER="auto"
            echo -e "${YELLOW}üìß Nh·∫≠p email cho SSL certificates:${NC}"
            read -r ZEROSSL_EMAIL
            log "${GREEN}[INFO] S·ª≠ d·ª•ng ch·∫ø ƒë·ªô t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi"
            ;;
    esac
}

# H√†m t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
create_directory_structure() {
    log "${YELLOW}üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c..."
    
    mkdir -p $SCRIPT_DIR/{data,logs,backups,scripts,news-api,google-credentials}
    mkdir -p $SCRIPT_DIR/data/{database,workflows,credentials}
    
    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c"
}

# H√†m t·∫°o Dockerfile cho N8N
create_n8n_dockerfile() {
    log "${YELLOW}üê≥ T·∫°o Dockerfile cho N8N..."
    
    cat > $SCRIPT_DIR/Dockerfile << 'EOF'
FROM n8nio/n8n:latest

USER root

# C√†i ƒë·∫∑t c√°c dependencies c·∫ßn thi·∫øt
RUN apk add --no-cache \
    ffmpeg \
    python3 \
    py3-pip \
    chromium \
    chromium-chromedriver \
    curl \
    wget \
    git \
    bash \
    && rm -rf /var/cache/apk/*

# C√†i ƒë·∫∑t yt-dlp
RUN pip3 install --no-cache-dir yt-dlp

# C√†i ƒë·∫∑t Puppeteer dependencies
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# T·∫°o script update yt-dlp
RUN echo '#!/bin/bash' > /usr/local/bin/update-ytdlp.sh && \
    echo 'pip3 install --upgrade yt-dlp' >> /usr/local/bin/update-ytdlp.sh && \
    chmod +x /usr/local/bin/update-ytdlp.sh

USER node

# C√†i ƒë·∫∑t c√°c node packages b·ªï sung
RUN cd /usr/local/lib/node_modules/n8n && \
    npm install puppeteer-core@latest

EXPOSE 5678

CMD ["n8n", "start"]
EOF

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o Dockerfile cho N8N"
}

# H√†m t·∫°o News Content API
create_news_api() {
    if [[ -z "$NEWS_TOKEN" ]]; then
        return 0
    fi

    log "${YELLOW}üì∞ T·∫°o News Content API..."
    
    # T·∫°o requirements.txt
    cat > $SCRIPT_DIR/news-api/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn==0.24.0
newspaper4k==0.9.2
feedparser==6.0.10
requests==2.31.0
beautifulsoup4==4.12.2
python-multipart==0.0.6
pydantic==2.5.0
lxml==4.9.3
Pillow==10.1.0
python-dateutil==2.8.2
EOF

    # T·∫°o main.py
    cat > $SCRIPT_DIR/news-api/main.py << EOF
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
import newspaper
import feedparser
import requests
from bs4 import BeautifulSoup
from pydantic import BaseModel
from typing import List, Optional
import logging
from datetime import datetime
import re

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="News Content API",
    description="API ƒë·ªÉ c√†o n·ªôi dung tin t·ª©c v√† parse RSS feeds",
    version="2.0.0"
)

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()
BEARER_TOKEN = "$NEWS_TOKEN"

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    if credentials.credentials != BEARER_TOKEN:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid authentication credentials",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return credentials.credentials

# Models
class ArticleResponse(BaseModel):
    title: str
    content: str
    summary: str
    authors: List[str]
    publish_date: Optional[str]
    top_image: Optional[str]
    url: str
    keywords: List[str]

class RSSResponse(BaseModel):
    title: str
    description: str
    link: str
    entries: List[dict]

class URLRequest(BaseModel):
    url: str
    language: str = "vi"

@app.get("/")
async def root():
    return {
        "message": "News Content API v2.0.0",
        "endpoints": {
            "article": "/article - C√†o n·ªôi dung b√†i vi·∫øt",
            "rss": "/rss - Parse RSS feed",
            "health": "/health - Ki·ªÉm tra tr·∫°ng th√°i"
        }
    }

@app.get("/health")
async def health_check():
    return {"status": "healthy", "timestamp": datetime.now().isoformat()}

@app.post("/article", response_model=ArticleResponse)
async def get_article(request: URLRequest, token: str = Depends(verify_token)):
    try:
        logger.info(f"Processing article: {request.url}")
        
        # T·∫°o Article object
        article = newspaper.Article(request.url, language=request.language)
        
        # Download v√† parse
        article.download()
        article.parse()
        article.nlp()
        
        # Format publish date
        publish_date = None
        if article.publish_date:
            publish_date = article.publish_date.isoformat()
        
        return ArticleResponse(
            title=article.title or "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
            content=article.text or "Kh√¥ng c√≥ n·ªôi dung",
            summary=article.summary or "Kh√¥ng c√≥ t√≥m t·∫Øt",
            authors=article.authors or [],
            publish_date=publish_date,
            top_image=article.top_image or None,
            url=request.url,
            keywords=article.keywords or []
        )
        
    except Exception as e:
        logger.error(f"Error processing article {request.url}: {str(e)}")
        raise HTTPException(status_code=400, detail=f"L·ªói x·ª≠ l√Ω b√†i vi·∫øt: {str(e)}")

@app.post("/rss", response_model=RSSResponse)
async def parse_rss(request: URLRequest, token: str = Depends(verify_token)):
    try:
        logger.info(f"Processing RSS: {request.url}")
        
        # Parse RSS feed
        feed = feedparser.parse(request.url)
        
        if feed.bozo:
            raise HTTPException(status_code=400, detail="RSS feed kh√¥ng h·ª£p l·ªá")
        
        # Format entries
        entries = []
        for entry in feed.entries[:20]:  # Gi·ªõi h·∫°n 20 entries
            entry_data = {
                "title": getattr(entry, 'title', ''),
                "link": getattr(entry, 'link', ''),
                "description": getattr(entry, 'description', ''),
                "published": getattr(entry, 'published', ''),
                "author": getattr(entry, 'author', ''),
                "tags": [tag.term for tag in getattr(entry, 'tags', [])]
            }
            entries.append(entry_data)
        
        return RSSResponse(
            title=feed.feed.get('title', 'Kh√¥ng c√≥ ti√™u ƒë·ªÅ'),
            description=feed.feed.get('description', 'Kh√¥ng c√≥ m√¥ t·∫£'),
            link=feed.feed.get('link', request.url),
            entries=entries
        )
        
    except Exception as e:
        logger.error(f"Error processing RSS {request.url}: {str(e)}")
        raise HTTPException(status_code=400, detail=f"L·ªói x·ª≠ l√Ω RSS: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)
EOF

    # T·∫°o Dockerfile cho News API
    cat > $SCRIPT_DIR/news-api/Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# C√†i ƒë·∫∑t system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libxml2-dev \
    libxslt-dev \
    libjpeg-dev \
    zlib1g-dev \
    libpng-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements v√† c√†i ƒë·∫∑t Python packages
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY main.py .

EXPOSE 8000

CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
EOF

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o News Content API"
}

# H√†m t·∫°o docker-compose.yml
create_docker_compose() {
    log "${YELLOW}üê≥ T·∫°o docker-compose.yml..."
    
    # T·∫°o ph·∫ßn services c∆° b·∫£n
    cat > $SCRIPT_DIR/docker-compose.yml << EOF
version: '3.8'

services:
  n8n:
    build: .
    container_name: n8n-container
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=\${N8N_PASSWORD:-admin123456}
      - N8N_HOST=\${N8N_HOST:-localhost}
      - N8N_PORT=5678
      - N8N_PROTOCOL=\${N8N_PROTOCOL:-http}
      - WEBHOOK_URL=\${WEBHOOK_URL:-http://localhost:5678}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - TZ=Asia/Ho_Chi_Minh
    volumes:
      - ./data:/home/node/.n8n
      - ./logs:/var/log/n8n
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:5678/healthz"]
      interval: 30s
      timeout: 10s
      retries: 3

EOF

    # Th√™m News API n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if [[ -n "$NEWS_TOKEN" ]]; then
        cat >> $SCRIPT_DIR/docker-compose.yml << EOF
  news-api:
    build: ./news-api
    container_name: news-api-container
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - n8n_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

EOF
    fi

    # Th√™m Caddy n·∫øu s·ª≠ d·ª•ng domain
    if [ "$USE_DOMAIN" = true ]; then
        cat >> $SCRIPT_DIR/docker-compose.yml << EOF
  caddy:
    image: caddy:2-alpine
    container_name: caddy-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - n8n_network
    depends_on:
      - n8n
EOF
        if [[ -n "$NEWS_TOKEN" ]]; then
            cat >> $SCRIPT_DIR/docker-compose.yml << EOF
      - news-api
EOF
        fi
        cat >> $SCRIPT_DIR/docker-compose.yml << EOF

volumes:
  caddy_data:
  caddy_config:

EOF
    fi

    # Th√™m networks
    cat >> $SCRIPT_DIR/docker-compose.yml << EOF
networks:
  n8n_network:
    driver: bridge
EOF

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o docker-compose.yml"
}

# H√†m t·∫°o Caddyfile
create_caddyfile() {
    if [ "$USE_DOMAIN" = false ]; then
        return 0
    fi

    log "${YELLOW}üåê T·∫°o Caddyfile..."
    
    # X√°c ƒë·ªãnh ACME CA d·ª±a tr√™n SSL provider
    local acme_ca=""
    case $SSL_PROVIDER in
        "letsencrypt")
            acme_ca="https://acme-v02.api.letsencrypt.org/directory"
            ;;
        "zerossl")
            acme_ca="https://acme.zerossl.com/v2/DV90"
            ;;
        "auto")
            acme_ca="https://acme-v02.api.letsencrypt.org/directory"
            ;;
    esac

    cat > $SCRIPT_DIR/Caddyfile << EOF
{
    email ${ZEROSSL_EMAIL:-admin@${DOMAIN}}
    acme_ca $acme_ca
}

$DOMAIN {
    reverse_proxy n8n:5678
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
    }
    
    # Logging
    log {
        output file /var/log/caddy/access.log
        format json
    }
}

EOF

    # Th√™m API domain n·∫øu c√≥ News API
    if [[ -n "$NEWS_TOKEN" ]]; then
        cat >> $SCRIPT_DIR/Caddyfile << EOF
$API_DOMAIN {
    reverse_proxy news-api:8000
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
    }
    
    # CORS headers
    header {
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }
    
    # Logging
    log {
        output file /var/log/caddy/api-access.log
        format json
    }
}
EOF
    fi

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o Caddyfile"
}

# H√†m t·∫°o backup system
create_backup_system() {
    log "${YELLOW}üíæ T·∫°o h·ªá th·ªëng backup..."
    
    # T·∫°o script backup ch√≠nh
    cat > $SCRIPT_DIR/scripts/backup.sh << 'EOF'
#!/bin/bash

# Script backup N8N
# T·ª± ƒë·ªông backup workflows, credentials v√† c·∫•u h√¨nh

SCRIPT_DIR="/home/n8n"
BACKUP_DIR="$SCRIPT_DIR/backups"
DATE=$(date +%Y%m%d_%H%M%S)
BACKUP_NAME="n8n_backup_$DATE"
BACKUP_FILE="$BACKUP_DIR/$BACKUP_NAME.zip"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $SCRIPT_DIR/logs/backup.log
}

# T·∫°o th∆∞ m·ª•c backup
mkdir -p $BACKUP_DIR

log "${YELLOW}üîÑ B·∫Øt ƒë·∫ßu backup N8N..."

# Backup d·ªØ li·ªáu N8N
cd $SCRIPT_DIR
zip -r $BACKUP_FILE \
    data/database/ \
    data/workflows/ \
    data/credentials/ \
    docker-compose.yml \
    Caddyfile \
    .env 2>/dev/null || true

if [ -f "$BACKUP_FILE" ]; then
    BACKUP_SIZE=$(du -h "$BACKUP_FILE" | cut -f1)
    log "${GREEN}[SUCCESS] ‚úÖ Backup th√†nh c√¥ng: $BACKUP_NAME.zip ($BACKUP_SIZE)"
    
    # X√≥a backup c≈© (gi·ªØ 30 b·∫£n g·∫ßn nh·∫•t)
    cd $BACKUP_DIR
    ls -t *.zip 2>/dev/null | tail -n +31 | xargs rm -f 2>/dev/null || true
    
    # G·ª≠i qua Telegram n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if [ -f "$SCRIPT_DIR/.env" ]; then
        source $SCRIPT_DIR/.env
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            BACKUP_SIZE_BYTES=$(stat -f%z "$BACKUP_FILE" 2>/dev/null || stat -c%s "$BACKUP_FILE" 2>/dev/null || echo "0")
            if [ "$BACKUP_SIZE_BYTES" -lt 20971520 ]; then  # < 20MB
                curl -s -X POST \
                    "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendDocument" \
                    -F chat_id="$TELEGRAM_CHAT_ID" \
                    -F document=@"$BACKUP_FILE" \
                    -F caption="üîÑ N8N Backup: $BACKUP_NAME ($BACKUP_SIZE)" >/dev/null
                log "${GREEN}[SUCCESS] üì± ƒê√£ g·ª≠i backup qua Telegram"
            else
                curl -s -X POST \
                    "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                    -d chat_id="$TELEGRAM_CHAT_ID" \
                    -d text="üîÑ N8N Backup: $BACKUP_NAME ($BACKUP_SIZE) - File qu√° l·ªõn ƒë·ªÉ g·ª≠i qua Telegram" >/dev/null
                log "${YELLOW}[WARNING] üì± File backup qu√° l·ªõn cho Telegram"
            fi
        fi
    fi
    
    # Upload l√™n Google Drive n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if [ -f "$SCRIPT_DIR/scripts/gdrive_upload.py" ]; then
        python3 $SCRIPT_DIR/scripts/gdrive_upload.py "$BACKUP_FILE" 2>/dev/null && \
        log "${GREEN}[SUCCESS] ‚òÅÔ∏è ƒê√£ upload backup l√™n Google Drive" || \
        log "${YELLOW}[WARNING] ‚òÅÔ∏è L·ªói upload Google Drive"
    fi
    
else
    log "${RED}[ERROR] ‚ùå Backup th·∫•t b·∫°i"
    exit 1
fi

log "${GREEN}üéâ Ho√†n th√†nh backup N8N"
EOF

    chmod +x $SCRIPT_DIR/scripts/backup.sh

    # T·∫°o script Google Drive upload n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh
    if [ "$GOOGLE_DRIVE_ENABLED" = true ]; then
        create_google_drive_scripts
    fi

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o h·ªá th·ªëng backup"
}

# H√†m t·∫°o Google Drive scripts
create_google_drive_scripts() {
    log "${YELLOW}‚òÅÔ∏è T·∫°o Google Drive integration..."
    
    # L∆∞u credentials
    echo "$GOOGLE_CREDENTIALS_CONTENT" > $SCRIPT_DIR/google-credentials/credentials.json
    
    # T·∫°o requirements cho Google Drive
    cat > $SCRIPT_DIR/google-credentials/requirements.txt << 'EOF'
google-api-python-client==2.108.0
google-auth==2.23.4
google-auth-oauthlib==1.1.0
google-auth-httplib2==0.1.1
EOF

    # C√†i ƒë·∫∑t dependencies
    pip3 install -r $SCRIPT_DIR/google-credentials/requirements.txt >/dev/null 2>&1 || true

    # T·∫°o script upload
    cat > $SCRIPT_DIR/scripts/gdrive_upload.py << EOF
#!/usr/bin/env python3

import os
import sys
from datetime import datetime
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload
from google.oauth2 import service_account

# C·∫•u h√¨nh
CREDENTIALS_FILE = '/home/n8n/google-credentials/credentials.json'
FOLDER_ID = '$GOOGLE_FOLDER_ID'
SCOPES = ['https://www.googleapis.com/auth/drive.file']

def upload_to_drive(file_path):
    try:
        # X√°c th·ª±c
        credentials = service_account.Credentials.from_service_account_file(
            CREDENTIALS_FILE, scopes=SCOPES)
        service = build('drive', 'v3', credentials=credentials)
        
        # T√™n file
        file_name = os.path.basename(file_path)
        
        # Metadata
        file_metadata = {
            'name': file_name,
            'parents': [FOLDER_ID] if FOLDER_ID else []
        }
        
        # Upload
        media = MediaFileUpload(file_path, resumable=True)
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        print(f"Upload th√†nh c√¥ng: {file_name} (ID: {file.get('id')})")
        
        # X√≥a file backup c≈© tr√™n Drive (gi·ªØ 30 b·∫£n)
        cleanup_old_backups(service)
        
        return True
        
    except Exception as e:
        print(f"L·ªói upload Google Drive: {str(e)}")
        return False

def cleanup_old_backups(service):
    try:
        # T√¨m t·∫•t c·∫£ file backup
        query = f"parents in '{FOLDER_ID}' and name contains 'n8n_backup_'"
        results = service.files().list(
            q=query,
            orderBy='createdTime desc',
            fields='files(id, name, createdTime)'
        ).execute()
        
        files = results.get('files', [])
        
        # X√≥a file c≈© (gi·ªØ 30 b·∫£n g·∫ßn nh·∫•t)
        if len(files) > 30:
            for file in files[30:]:
                service.files().delete(fileId=file['id']).execute()
                print(f"ƒê√£ x√≥a backup c≈©: {file['name']}")
                
    except Exception as e:
        print(f"L·ªói cleanup Google Drive: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 gdrive_upload.py <file_path>")
        sys.exit(1)
    
    file_path = sys.argv[1]
    if not os.path.exists(file_path):
        print(f"File kh√¥ng t·ªìn t·∫°i: {file_path}")
        sys.exit(1)
    
    success = upload_to_drive(file_path)
    sys.exit(0 if success else 1)
EOF

    chmod +x $SCRIPT_DIR/scripts/gdrive_upload.py
    
    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o Google Drive integration"
}

# H√†m t·∫°o restore system
create_restore_system() {
    log "${YELLOW}üîÑ T·∫°o h·ªá th·ªëng restore..."
    
    cat > $SCRIPT_DIR/scripts/restore.sh << 'EOF'
#!/bin/bash

# Script restore N8N t·ª´ backup

SCRIPT_DIR="/home/n8n"
BACKUP_DIR="$SCRIPT_DIR/backups"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

show_restore_menu() {
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîÑ N8N RESTORE SYSTEM                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "Ch·ªçn ngu·ªìn restore:"
    echo -e "  ${GREEN}1.${NC} Restore t·ª´ file backup local"
    echo -e "  ${GREEN}2.${NC} Restore t·ª´ Google Drive"
    echo -e "  ${GREEN}3.${NC} Li·ªát k√™ backup c√≥ s·∫µn"
    echo -e "  ${GREEN}4.${NC} Tho√°t"
    echo ""
}

list_local_backups() {
    echo -e "${YELLOW}üìã Danh s√°ch backup local:${NC}"
    if [ -d "$BACKUP_DIR" ] && [ "$(ls -A $BACKUP_DIR/*.zip 2>/dev/null)" ]; then
        ls -la $BACKUP_DIR/*.zip | awk '{print NR". "$9" ("$5" bytes) - "$6" "$7" "$8}'
    else
        echo "Kh√¥ng c√≥ backup n√†o"
    fi
    echo ""
}

restore_from_local() {
    list_local_backups
    echo -e "${YELLOW}Nh·∫≠p ƒë∆∞·ªùng d·∫´n file backup (ho·∫∑c s·ªë th·ª© t·ª±):${NC}"
    read -r backup_input
    
    # Ki·ªÉm tra n·∫øu l√† s·ªë th·ª© t·ª±
    if [[ "$backup_input" =~ ^[0-9]+$ ]]; then
        backup_file=$(ls $BACKUP_DIR/*.zip 2>/dev/null | sed -n "${backup_input}p")
    else
        backup_file="$backup_input"
    fi
    
    if [ ! -f "$backup_file" ]; then
        log "${RED}[ERROR] File backup kh√¥ng t·ªìn t·∫°i: $backup_file"
        return 1
    fi
    
    restore_backup "$backup_file"
}

restore_from_gdrive() {
    if [ ! -f "$SCRIPT_DIR/scripts/gdrive_download.py" ]; then
        log "${RED}[ERROR] Google Drive kh√¥ng ƒë∆∞·ª£c c·∫•u h√¨nh"
        return 1
    fi
    
    echo -e "${YELLOW}üìã Danh s√°ch backup tr√™n Google Drive:${NC}"
    python3 $SCRIPT_DIR/scripts/gdrive_download.py --list
    
    echo -e "${YELLOW}Nh·∫≠p t√™n file backup ƒë·ªÉ download:${NC}"
    read -r backup_name
    
    temp_file="/tmp/$backup_name"
    if python3 $SCRIPT_DIR/scripts/gdrive_download.py "$backup_name" "$temp_file"; then
        restore_backup "$temp_file"
        rm -f "$temp_file"
    else
        log "${RED}[ERROR] Kh√¥ng th·ªÉ download backup t·ª´ Google Drive"
        return 1
    fi
}

restore_backup() {
    local backup_file="$1"
    
    log "${YELLOW}üîÑ B·∫Øt ƒë·∫ßu restore t·ª´: $(basename $backup_file)"
    
    # X√°c nh·∫≠n
    echo -e "${RED}‚ö†Ô∏è  C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® t·∫•t c·∫£ d·ªØ li·ªáu hi·ªán t·∫°i!${NC}"
    echo -e "${YELLOW}B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (yes/no):${NC}"
    read -r confirm
    if [ "$confirm" != "yes" ]; then
        log "${YELLOW}[INFO] H·ªßy restore"
        return 0
    fi
    
    # D·ª´ng containers
    log "${YELLOW}üõë D·ª´ng N8N containers..."
    cd $SCRIPT_DIR
    docker-compose down
    
    # Backup d·ªØ li·ªáu hi·ªán t·∫°i
    log "${YELLOW}üíæ Backup d·ªØ li·ªáu hi·ªán t·∫°i..."
    backup_current_date=$(date +%Y%m%d_%H%M%S)
    mkdir -p $BACKUP_DIR/pre-restore
    zip -r "$BACKUP_DIR/pre-restore/pre_restore_$backup_current_date.zip" \
        data/ docker-compose.yml Caddyfile .env 2>/dev/null || true
    
    # Gi·∫£i n√©n backup
    log "${YELLOW}üì¶ Gi·∫£i n√©n backup..."
    temp_restore_dir="/tmp/n8n_restore_$$"
    mkdir -p $temp_restore_dir
    unzip -q "$backup_file" -d $temp_restore_dir
    
    # Restore d·ªØ li·ªáu
    log "${YELLOW}üîÑ Restore d·ªØ li·ªáu..."
    
    # Restore database v√† workflows
    if [ -d "$temp_restore_dir/data" ]; then
        rm -rf $SCRIPT_DIR/data/*
        cp -r $temp_restore_dir/data/* $SCRIPT_DIR/data/
    fi
    
    # Restore c·∫•u h√¨nh
    [ -f "$temp_restore_dir/docker-compose.yml" ] && cp "$temp_restore_dir/docker-compose.yml" $SCRIPT_DIR/
    [ -f "$temp_restore_dir/Caddyfile" ] && cp "$temp_restore_dir/Caddyfile" $SCRIPT_DIR/
    [ -f "$temp_restore_dir/.env" ] && cp "$temp_restore_dir/.env" $SCRIPT_DIR/
    
    # Cleanup
    rm -rf $temp_restore_dir
    
    # Kh·ªüi ƒë·ªông l·∫°i
    log "${YELLOW}üöÄ Kh·ªüi ƒë·ªông l·∫°i N8N..."
    docker-compose up -d
    
    # ƒê·ª£i kh·ªüi ƒë·ªông
    sleep 30
    
    # Ki·ªÉm tra tr·∫°ng th√°i
    if docker-compose ps | grep -q "Up"; then
        log "${GREEN}[SUCCESS] ‚úÖ Restore th√†nh c√¥ng!"
        log "${GREEN}[INFO] üåê N8N: http://localhost:5678"
        if [ "$USE_DOMAIN" = true ]; then
            log "${GREEN}[INFO] üåê Domain: https://$DOMAIN"
        fi
    else
        log "${RED}[ERROR] ‚ùå C√≥ l·ªói khi kh·ªüi ƒë·ªông sau restore"
        log "${YELLOW}[INFO] Restore l·∫°i t·ª´ backup pre-restore n·∫øu c·∫ßn"
    fi
}

# Main menu
while true; do
    show_restore_menu
    echo -e "${YELLOW}Ch·ªçn t√πy ch·ªçn (1-4):${NC}"
    read -r choice
    
    case $choice in
        1)
            restore_from_local
            ;;
        2)
            restore_from_gdrive
            ;;
        3)
            list_local_backups
            if [ -f "$SCRIPT_DIR/scripts/gdrive_download.py" ]; then
                echo -e "${YELLOW}üìã Backup tr√™n Google Drive:${NC}"
                python3 $SCRIPT_DIR/scripts/gdrive_download.py --list
            fi
            echo ""
            ;;
        4)
            log "${GREEN}üëã Tho√°t restore system"
            exit 0
            ;;
        *)
            echo -e "${RED}L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá${NC}"
            ;;
    esac
    
    echo -e "${YELLOW}Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...${NC}"
    read
done
EOF

    chmod +x $SCRIPT_DIR/scripts/restore.sh

    # T·∫°o Google Drive download script n·∫øu c·∫ßn
    if [ "$GOOGLE_DRIVE_ENABLED" = true ]; then
        cat > $SCRIPT_DIR/scripts/gdrive_download.py << EOF
#!/usr/bin/env python3

import os
import sys
from googleapiclient.discovery import build
from googleapiclient.http import MediaIoBaseDownload
from google.oauth2 import service_account
import io

# C·∫•u h√¨nh
CREDENTIALS_FILE = '/home/n8n/google-credentials/credentials.json'
FOLDER_ID = '$GOOGLE_FOLDER_ID'
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']

def list_backups():
    try:
        credentials = service_account.Credentials.from_service_account_file(
            CREDENTIALS_FILE, scopes=SCOPES)
        service = build('drive', 'v3', credentials=credentials)
        
        query = f"parents in '{FOLDER_ID}' and name contains 'n8n_backup_'"
        results = service.files().list(
            q=query,
            orderBy='createdTime desc',
            fields='files(id, name, size, createdTime)'
        ).execute()
        
        files = results.get('files', [])
        
        if not files:
            print("Kh√¥ng c√≥ backup n√†o tr√™n Google Drive")
            return
        
        print("Danh s√°ch backup tr√™n Google Drive:")
        for i, file in enumerate(files, 1):
            size_mb = int(file.get('size', 0)) / (1024*1024)
            print(f"{i}. {file['name']} ({size_mb:.1f}MB) - {file['createdTime']}")
            
    except Exception as e:
        print(f"L·ªói li·ªát k√™ backup: {str(e)}")

def download_backup(file_name, output_path):
    try:
        credentials = service_account.Credentials.from_service_account_file(
            CREDENTIALS_FILE, scopes=SCOPES)
        service = build('drive', 'v3', credentials=credentials)
        
        # T√¨m file
        query = f"parents in '{FOLDER_ID}' and name = '{file_name}'"
        results = service.files().list(q=query).execute()
        files = results.get('files', [])
        
        if not files:
            print(f"Kh√¥ng t√¨m th·∫•y file: {file_name}")
            return False
        
        file_id = files[0]['id']
        
        # Download
        request = service.files().get_media(fileId=file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, request)
        
        done = False
        while done is False:
            status, done = downloader.next_chunk()
            print(f"Download {int(status.progress() * 100)}%")
        
        # L∆∞u file
        with open(output_path, 'wb') as f:
            f.write(fh.getvalue())
        
        print(f"Download th√†nh c√¥ng: {output_path}")
        return True
        
    except Exception as e:
        print(f"L·ªói download: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) == 2 and sys.argv[1] == "--list":
        list_backups()
    elif len(sys.argv) == 3:
        file_name = sys.argv[1]
        output_path = sys.argv[2]
        success = download_backup(file_name, output_path)
        sys.exit(0 if success else 1)
    else:
        print("Usage:")
        print("  python3 gdrive_download.py --list")
        print("  python3 gdrive_download.py <file_name> <output_path>")
        sys.exit(1)
EOF

        chmod +x $SCRIPT_DIR/scripts/gdrive_download.py
    fi

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o h·ªá th·ªëng restore"
}

# H√†m t·∫°o auto-update script
create_auto_update_script() {
    if [ "$AUTO_UPDATE" = false ]; then
        return 0
    fi

    log "${YELLOW}üîÑ T·∫°o script auto-update..."
    
    cat > $SCRIPT_DIR/scripts/auto_update.sh << 'EOF'
#!/bin/bash

# Script auto-update N8N v√† dependencies

SCRIPT_DIR="/home/n8n"
LOG_FILE="$SCRIPT_DIR/logs/auto_update.log"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a $LOG_FILE
}

# T·∫°o th∆∞ m·ª•c logs
mkdir -p $SCRIPT_DIR/logs

log "${YELLOW}üîÑ B·∫Øt ƒë·∫ßu auto-update N8N..."

cd $SCRIPT_DIR

# Backup tr∆∞·ªõc khi update
log "${YELLOW}üíæ T·∫°o backup tr∆∞·ªõc update..."
$SCRIPT_DIR/scripts/backup.sh

# Pull latest images
log "${YELLOW}üì¶ Pull latest Docker images..."
docker-compose pull

# Rebuild v√† restart
log "${YELLOW}üîÑ Rebuild v√† restart containers..."
docker-compose up -d --build

# Update yt-dlp trong container
log "${YELLOW}üì∫ Update yt-dlp..."
docker-compose exec -T n8n /usr/local/bin/update-ytdlp.sh || true

# Ki·ªÉm tra tr·∫°ng th√°i
sleep 30
if docker-compose ps | grep -q "Up"; then
    log "${GREEN}[SUCCESS] ‚úÖ Auto-update th√†nh c√¥ng"
    
    # G·ª≠i th√¥ng b√°o qua Telegram
    if [ -f "$SCRIPT_DIR/.env" ]; then
        source $SCRIPT_DIR/.env
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST \
                "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="‚úÖ N8N Auto-Update th√†nh c√¥ng - $(date '+%Y-%m-%d %H:%M:%S')" >/dev/null
        fi
    fi
else
    log "${RED}[ERROR] ‚ùå Auto-update th·∫•t b·∫°i"
    
    # G·ª≠i c·∫£nh b√°o qua Telegram
    if [ -f "$SCRIPT_DIR/.env" ]; then
        source $SCRIPT_DIR/.env
        if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST \
                "https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/sendMessage" \
                -d chat_id="$TELEGRAM_CHAT_ID" \
                -d text="‚ùå N8N Auto-Update th·∫•t b·∫°i - $(date '+%Y-%m-%d %H:%M:%S')" >/dev/null
        fi
    fi
fi

log "${GREEN}üéâ Ho√†n th√†nh auto-update"
EOF

    chmod +x $SCRIPT_DIR/scripts/auto_update.sh
    
    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o script auto-update"
}

# H√†m t·∫°o SSL renewal script v·ªõi ZeroSSL fallback
create_ssl_renewal_script() {
    if [ "$USE_DOMAIN" = false ]; then
        return 0
    fi

    log "${YELLOW}üîí T·∫°o script SSL renewal..."
    
    cat > $SCRIPT_DIR/scripts/ssl_renewal.sh << EOF
#!/bin/bash

# Script t·ª± ƒë·ªông gia h·∫°n SSL v·ªõi ZeroSSL fallback

SCRIPT_DIR="/home/n8n"
LOG_FILE="\$SCRIPT_DIR/logs/ssl_renewal.log"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

log() {
    echo -e "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" | tee -a \$LOG_FILE
}

# T·∫°o th∆∞ m·ª•c logs
mkdir -p \$SCRIPT_DIR/logs

log "\${YELLOW}üîí Ki·ªÉm tra SSL certificate..."

cd \$SCRIPT_DIR

# Ki·ªÉm tra SSL certificate hi·ªán t·∫°i
check_ssl_expiry() {
    local domain="\$1"
    local expiry_date=\$(echo | openssl s_client -servername \$domain -connect \$domain:443 2>/dev/null | openssl x509 -noout -dates | grep notAfter | cut -d= -f2)
    
    if [ -n "\$expiry_date" ]; then
        local expiry_timestamp=\$(date -d "\$expiry_date" +%s)
        local current_timestamp=\$(date +%s)
        local days_until_expiry=\$(( (expiry_timestamp - current_timestamp) / 86400 ))
        
        echo \$days_until_expiry
    else
        echo "0"
    fi
}

# Ki·ªÉm tra rate limit t·ª´ logs
check_rate_limit() {
    local recent_logs=\$(docker-compose logs caddy --tail=50 2>/dev/null | grep -i "rate.*limit\\|too many certificates" | tail -1)
    
    if [ -n "\$recent_logs" ]; then
        # Tr√≠ch xu·∫•t th·ªùi gian retry t·ª´ log
        local retry_time=\$(echo "\$recent_logs" | grep -oP 'retry after \K[0-9-]+ [0-9:]+' | head -1)
        if [ -n "\$retry_time" ]; then
            local retry_timestamp=\$(date -d "\$retry_time UTC" +%s 2>/dev/null || echo "0")
            local current_timestamp=\$(date +%s)
            
            if [ \$retry_timestamp -gt \$current_timestamp ]; then
                local hours_until_retry=\$(( (retry_timestamp - current_timestamp) / 3600 ))
                echo "rate_limit:\$hours_until_retry"
                return 0
            fi
        fi
    fi
    
    echo "ok"
}

# Chuy·ªÉn sang ZeroSSL
switch_to_zerossl() {
    log "\${YELLOW}üîÑ Chuy·ªÉn sang ZeroSSL..."
    
    # Backup Caddyfile hi·ªán t·∫°i
    cp Caddyfile Caddyfile.backup.\$(date +%Y%m%d_%H%M%S)
    
    # C·∫≠p nh·∫≠t Caddyfile v·ªõi ZeroSSL
    sed -i 's|acme_ca.*|acme_ca https://acme.zerossl.com/v2/DV90|' Caddyfile
    
    # X√≥a SSL data c≈©
    docker-compose down
    docker volume rm n8n_caddy_data n8n_caddy_config 2>/dev/null || true
    
    # Kh·ªüi ƒë·ªông l·∫°i v·ªõi ZeroSSL
    docker-compose up -d
    
    log "\${GREEN}[SUCCESS] ƒê√£ chuy·ªÉn sang ZeroSSL"
}

# Chuy·ªÉn v·ªÅ Let's Encrypt
switch_to_letsencrypt() {
    log "\${YELLOW}üîÑ Chuy·ªÉn v·ªÅ Let's Encrypt..."
    
    # Backup Caddyfile hi·ªán t·∫°i
    cp Caddyfile Caddyfile.backup.\$(date +%Y%m%d_%H%M%S)
    
    # C·∫≠p nh·∫≠t Caddyfile v·ªõi Let's Encrypt
    sed -i 's|acme_ca.*|acme_ca https://acme-v02.api.letsencrypt.org/directory|' Caddyfile
    
    # X√≥a SSL data c≈©
    docker-compose down
    docker volume rm n8n_caddy_data n8n_caddy_config 2>/dev/null || true
    
    # Kh·ªüi ƒë·ªông l·∫°i v·ªõi Let's Encrypt
    docker-compose up -d
    
    log "\${GREEN}[SUCCESS] ƒê√£ chuy·ªÉn v·ªÅ Let's Encrypt"
}

# Main logic
main() {
    local domain="$DOMAIN"
    local days_until_expiry=\$(check_ssl_expiry \$domain)
    local rate_limit_status=\$(check_rate_limit)
    
    log "\${GREEN}[INFO] Domain: \$domain"
    log "\${GREEN}[INFO] SSL expires in: \$days_until_expiry days"
    log "\${GREEN}[INFO] Rate limit status: \$rate_limit_status"
    
    # N·∫øu SSL s·∫Øp h·∫øt h·∫°n (< 30 ng√†y)
    if [ \$days_until_expiry -lt 30 ]; then
        log "\${YELLOW}‚ö†Ô∏è  SSL certificate s·∫Øp h·∫øt h·∫°n (\$days_until_expiry ng√†y)"
        
        # Ki·ªÉm tra rate limit
        if [[ \$rate_limit_status == rate_limit:* ]]; then
            local hours_until_retry=\${rate_limit_status#rate_limit:}
            log "\${YELLOW}‚ö†Ô∏è  Let's Encrypt rate limit - c√≤n \$hours_until_retry gi·ªù"
            
            # Chuy·ªÉn sang ZeroSSL n·∫øu c√≤n rate limit
            if [ \$hours_until_retry -gt 0 ]; then
                switch_to_zerossl
            else
                log "\${GREEN}[INFO] Rate limit ƒë√£ h·∫øt, th·ª≠ l·∫°i Let's Encrypt"
                switch_to_letsencrypt
            fi
        else
            log "\${GREEN}[INFO] Kh√¥ng c√≥ rate limit, gia h·∫°n SSL"
            # Force renewal
            docker-compose restart caddy
        fi
    else
        log "\${GREEN}[INFO] SSL certificate c√≤n h·∫°n (\$days_until_expiry ng√†y)"
    fi
    
    # G·ª≠i th√¥ng b√°o qua Telegram
    if [ -f "\$SCRIPT_DIR/.env" ]; then
        source \$SCRIPT_DIR/.env
        if [ -n "\$TELEGRAM_BOT_TOKEN" ] && [ -n "\$TELEGRAM_CHAT_ID" ]; then
            curl -s -X POST \\
                "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \\
                -d chat_id="\$TELEGRAM_CHAT_ID" \\
                -d text="üîí SSL Check: \$domain - C√≤n \$days_until_expiry ng√†y - \$(date '+%Y-%m-%d %H:%M:%S')" >/dev/null
        fi
    fi
}

main
log "\${GREEN}üéâ Ho√†n th√†nh ki·ªÉm tra SSL"
EOF

    chmod +x $SCRIPT_DIR/scripts/ssl_renewal.sh
    
    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o script SSL renewal"
}

# H√†m t·∫°o diagnostic script
create_diagnostic_script() {
    log "${YELLOW}üîß T·∫°o script ch·∫©n ƒëo√°n..."
    
    cat > $SCRIPT_DIR/scripts/diagnose.sh << 'EOF'
#!/bin/bash

# Script ch·∫©n ƒëo√°n N8N

SCRIPT_DIR="/home/n8n"

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

echo -e "${CYAN}"
cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîß N8N DIAGNOSTIC TOOL                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

echo -e "${YELLOW}üîç Ki·ªÉm tra tr·∫°ng th√°i h·ªá th·ªëng...${NC}"
echo ""

# Ki·ªÉm tra Docker
echo -e "${BLUE}üê≥ Docker Status:${NC}"
if command -v docker &> /dev/null; then
    echo -e "  ‚úÖ Docker: $(docker --version)"
    echo -e "  ‚úÖ Docker Compose: $(docker-compose --version)"
else
    echo -e "  ‚ùå Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
fi
echo ""

# Ki·ªÉm tra containers
echo -e "${BLUE}üì¶ Container Status:${NC}"
cd $SCRIPT_DIR 2>/dev/null || { echo "‚ùå Th∆∞ m·ª•c N8N kh√¥ng t·ªìn t·∫°i"; exit 1; }

if [ -f "docker-compose.yml" ]; then
    docker-compose ps
else
    echo "‚ùå docker-compose.yml kh√¥ng t·ªìn t·∫°i"
fi
echo ""

# Ki·ªÉm tra ports
echo -e "${BLUE}üåê Port Status:${NC}"
netstat -tlnp | grep -E ':5678|:8000|:80|:443' || echo "Kh√¥ng c√≥ port n√†o ƒëang l·∫Øng nghe"
echo ""

# Ki·ªÉm tra SSL
echo -e "${BLUE}üîí SSL Status:${NC}"
if [ -f ".env" ]; then
    source .env
    if [ -n "$DOMAIN" ] && [ "$DOMAIN" != "localhost" ]; then
        echo "Ki·ªÉm tra SSL cho domain: $DOMAIN"
        echo | openssl s_client -servername $DOMAIN -connect $DOMAIN:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "‚ùå Kh√¥ng th·ªÉ ki·ªÉm tra SSL"
    else
        echo "‚ÑπÔ∏è  S·ª≠ d·ª•ng localhost (kh√¥ng SSL)"
    fi
else
    echo "‚ùå File .env kh√¥ng t·ªìn t·∫°i"
fi
echo ""

# Ki·ªÉm tra logs
echo -e "${BLUE}üìã Recent Logs:${NC}"
echo -e "${YELLOW}N8N Logs (10 d√≤ng cu·ªëi):${NC}"
docker-compose logs n8n --tail=10 2>/dev/null || echo "‚ùå Kh√¥ng th·ªÉ l·∫•y logs N8N"
echo ""

if docker-compose ps | grep -q "caddy"; then
    echo -e "${YELLOW}Caddy Logs (10 d√≤ng cu·ªëi):${NC}"
    docker-compose logs caddy --tail=10 2>/dev/null || echo "‚ùå Kh√¥ng th·ªÉ l·∫•y logs Caddy"
    echo ""
fi

# Ki·ªÉm tra disk space
echo -e "${BLUE}üíæ Disk Usage:${NC}"
df -h | grep -E "/$|/home"
echo ""

# Ki·ªÉm tra memory
echo -e "${BLUE}üß† Memory Usage:${NC}"
free -h
echo ""

# Ki·ªÉm tra backup
echo -e "${BLUE}üíæ Backup Status:${NC}"
if [ -d "backups" ]; then
    backup_count=$(ls backups/*.zip 2>/dev/null | wc -l)
    echo "üìÅ S·ªë l∆∞·ª£ng backup: $backup_count"
    if [ $backup_count -gt 0 ]; then
        echo "üìÖ Backup m·ªõi nh·∫•t:"
        ls -la backups/*.zip | tail -1
    fi
else
    echo "‚ùå Th∆∞ m·ª•c backup kh√¥ng t·ªìn t·∫°i"
fi
echo ""

# Ki·ªÉm tra cron jobs
echo -e "${BLUE}‚è∞ Cron Jobs:${NC}"
crontab -l 2>/dev/null | grep -E "backup|update|ssl" || echo "Kh√¥ng c√≥ cron job n√†o"
echo ""

echo -e "${GREEN}üéâ Ho√†n th√†nh ch·∫©n ƒëo√°n h·ªá th·ªëng${NC}"
echo ""
echo -e "${YELLOW}üìã C√°c l·ªánh h·ªØu √≠ch:${NC}"
echo -e "  ‚Ä¢ Xem logs: ${CYAN}docker-compose logs -f${NC}"
echo -e "  ‚Ä¢ Restart: ${CYAN}docker-compose restart${NC}"
echo -e "  ‚Ä¢ Backup: ${CYAN}$SCRIPT_DIR/scripts/backup.sh${NC}"
echo -e "  ‚Ä¢ Restore: ${CYAN}$SCRIPT_DIR/scripts/restore.sh${NC}"
echo -e "  ‚Ä¢ Update: ${CYAN}$SCRIPT_DIR/scripts/auto_update.sh${NC}"
EOF

    chmod +x $SCRIPT_DIR/scripts/diagnose.sh
    
    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o script ch·∫©n ƒëo√°n"
}

# H√†m thi·∫øt l·∫≠p cron jobs
setup_cron_jobs() {
    log "${YELLOW}‚è∞ Thi·∫øt l·∫≠p cron jobs..."
    
    # T·∫°o cron jobs
    cron_jobs=""
    
    # Backup h√†ng ng√†y l√∫c 2:00 AM
    cron_jobs+="0 2 * * * $SCRIPT_DIR/scripts/backup.sh\n"
    
    # Auto-update n·∫øu ƒë∆∞·ª£c b·∫≠t
    if [ "$AUTO_UPDATE" = true ]; then
        cron_jobs+="0 */12 * * * $SCRIPT_DIR/scripts/auto_update.sh\n"
    fi
    
    # SSL renewal check h√†ng ng√†y
    if [ "$USE_DOMAIN" = true ]; then
        cron_jobs+="0 3 * * * $SCRIPT_DIR/scripts/ssl_renewal.sh\n"
    fi
    
    # C√†i ƒë·∫∑t cron jobs
    echo -e "$cron_jobs" | crontab -
    
    log "${GREEN}[SUCCESS] ƒê√£ thi·∫øt l·∫≠p cron jobs"
}

# H√†m t·∫°o file .env
create_env_file() {
    log "${YELLOW}üîß T·∫°o file .env..."
    
    cat > $SCRIPT_DIR/.env << EOF
# N8N Configuration
N8N_PASSWORD=admin123456
N8N_HOST=${DOMAIN}
N8N_PROTOCOL=${USE_DOMAIN:+https}${USE_DOMAIN:-http}
WEBHOOK_URL=${USE_DOMAIN:+https://$DOMAIN}${USE_DOMAIN:-http://localhost:5678}

# Domain Configuration
DOMAIN=${DOMAIN}
API_DOMAIN=${API_DOMAIN}
USE_DOMAIN=${USE_DOMAIN}

# SSL Configuration
SSL_PROVIDER=${SSL_PROVIDER}
ZEROSSL_EMAIL=${ZEROSSL_EMAIL}

# News API Configuration
NEWS_TOKEN=${NEWS_TOKEN}

# Telegram Configuration
TELEGRAM_BOT_TOKEN=${TELEGRAM_BOT_TOKEN}
TELEGRAM_CHAT_ID=${TELEGRAM_CHAT_ID}

# Google Drive Configuration
GOOGLE_DRIVE_ENABLED=${GOOGLE_DRIVE_ENABLED}
GOOGLE_FOLDER_ID=${GOOGLE_FOLDER_ID}

# System Configuration
AUTO_UPDATE=${AUTO_UPDATE}
SCRIPT_VERSION=2.0.0
INSTALL_DATE=$(date '+%Y-%m-%d %H:%M:%S')
EOF

    log "${GREEN}[SUCCESS] ƒê√£ t·∫°o file .env"
}

# H√†m build v√† deploy containers
build_and_deploy() {
    log "${YELLOW}üèóÔ∏è Build v√† deploy containers..."
    
    cd $SCRIPT_DIR
    
    # D·ª´ng containers c≈©
    log "${YELLOW}üõë D·ª´ng containers c≈©..."
    docker-compose down 2>/dev/null || true
    
    # Build Docker images
    log "${YELLOW}üì¶ Build Docker images..."
    docker-compose build --no-cache
    
    # Kh·ªüi ƒë·ªông services
    log "${YELLOW}üöÄ Kh·ªüi ƒë·ªông services..."
    docker-compose up -d
    
    # ƒê·ª£i services kh·ªüi ƒë·ªông
    log "${YELLOW}‚è≥ ƒê·ª£i services kh·ªüi ƒë·ªông..."
    sleep 30
    
    # Ki·ªÉm tra tr·∫°ng th√°i containers
    log "${YELLOW}üîç Ki·ªÉm tra tr·∫°ng th√°i containers..."
    if docker-compose ps | grep -q "Up"; then
        log "${GREEN}[SUCCESS] ‚úÖ Containers ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng"
    else
        log "${RED}[ERROR] ‚ùå C√≥ l·ªói khi kh·ªüi ƒë·ªông containers"
        docker-compose logs
        exit 1
    fi
}

# H√†m ki·ªÉm tra SSL v·ªõi ph√¢n t√≠ch th√¥ng minh
check_ssl_status() {
    if [ "$USE_DOMAIN" = false ]; then
        return 0
    fi

    log "${YELLOW}üîí Ki·ªÉm tra SSL certificate..."
    
    # ƒê·ª£i Caddy kh·ªüi ƒë·ªông v√† th·ª≠ c·∫•p SSL
    sleep 60
    
    # L·∫•y logs Caddy g·∫ßn ƒë√¢y
    local caddy_logs=$(docker-compose logs caddy --tail=100 2>/dev/null)
    
    # Ki·ªÉm tra xem c√≥ SSL th√†nh c√¥ng kh√¥ng
    if echo "$caddy_logs" | grep -q "certificate obtained successfully"; then
        log "${GREEN}[SUCCESS] ‚úÖ SSL certificate ƒë√£ ƒë∆∞·ª£c c·∫•p th√†nh c√¥ng"
        return 0
    fi
    
    # Ki·ªÉm tra rate limit
    local rate_limit_info=$(echo "$caddy_logs" | grep -i "rate.*limit\|too many certificates" | tail -1)
    
    if [ -n "$rate_limit_info" ]; then
        # Tr√≠ch xu·∫•t th·ªùi gian retry
        local retry_time=$(echo "$rate_limit_info" | grep -oP 'retry after \K[0-9-]+ [0-9:]+' | head -1)
        
        if [ -n "$retry_time" ]; then
            # Chuy·ªÉn ƒë·ªïi sang gi·ªù VN
            local retry_timestamp=$(date -d "$retry_time UTC" +%s 2>/dev/null || echo "0")
            local current_timestamp=$(date +%s)
            local vn_retry_time=$(date -d "@$retry_timestamp" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Kh√¥ng x√°c ƒë·ªãnh")
            
            show_ssl_rate_limit_error "$vn_retry_time" "$caddy_logs"
        else
            show_ssl_rate_limit_error "Kh√¥ng x√°c ƒë·ªãnh" "$caddy_logs"
        fi
    else
        # Ki·ªÉm tra c√°c l·ªói SSL kh√°c
        if echo "$caddy_logs" | grep -q -i "error\|failed"; then
            log "${RED}[ERROR] üö® C√≥ l·ªói khi c·∫•p SSL certificate"
            echo "$caddy_logs" | grep -i "error\|failed" | tail -5
        else
            log "${YELLOW}[WARNING] ‚ö†Ô∏è SSL certificate ch∆∞a ƒë∆∞·ª£c c·∫•p, c√≥ th·ªÉ ƒëang trong qu√° tr√¨nh x·ª≠ l√Ω"
        fi
    fi
}

# H√†m hi·ªÉn th·ªã l·ªói SSL rate limit
show_ssl_rate_limit_error() {
    local retry_time="$1"
    local logs="$2"
    
    echo -e "${RED}[ERROR] üö® PH√ÅT HI·ªÜN SSL RATE LIMIT!${NC}"
    echo ""
    echo -e "${CYAN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚ö†Ô∏è  SSL RATE LIMIT DETECTED                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${YELLOW}üîç NGUY√äN NH√ÇN:${NC}"
    echo -e "  ‚Ä¢ Let's Encrypt gi·ªõi h·∫°n 5 certificates/domain/tu·∫ßn"
    echo -e "  ‚Ä¢ Domain n√†y ƒë√£ ƒë·∫°t gi·ªõi h·∫°n mi·ªÖn ph√≠"
    echo -e "  ‚Ä¢ C·∫ßn ƒë·ª£i ƒë·∫øn tu·∫ßn sau ƒë·ªÉ c·∫•p SSL m·ªõi"
    echo ""
    
    echo -e "${BLUE}üí° GI·∫¢I PH√ÅP:${NC}"
    echo -e "  ${GREEN}1. C√ÄI L·∫†I UBUNTU (KHUY·∫æN NGH·ªä):${NC}"
    echo -e "     ‚Ä¢ C√†i l·∫°i Ubuntu Server ho√†n to√†n"
    echo -e "     ‚Ä¢ S·ª≠ d·ª•ng subdomain kh√°c (vd: n8n2.domain.com)"
    echo -e "     ‚Ä¢ Ch·∫°y l·∫°i script n√†y"
    echo ""
    echo -e "  ${GREEN}2. S·ª¨ D·ª§NG ZEROSSL (T·ª∞ ƒê·ªòNG):${NC}"
    echo -e "     ‚Ä¢ Script s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang ZeroSSL"
    echo -e "     ‚Ä¢ SSL certificate v·∫´n h·ª£p l·ªá v√† b·∫£o m·∫≠t"
    echo -e "     ‚Ä¢ T·ª± ƒë·ªông gia h·∫°n sau 90 ng√†y"
    echo ""
    echo -e "  ${GREEN}3. ƒê·ª¢I ƒê·∫æN KHI RATE LIMIT RESET:${NC}"
    echo -e "     ‚Ä¢ ƒê·ª£i ƒë·∫øn sau $retry_time (Gi·ªù VN)"
    echo -e "     ‚Ä¢ Ch·∫°y l·∫°i script ƒë·ªÉ c·∫•p SSL m·ªõi"
    echo ""
    
    echo -e "${YELLOW}üìã L·ªäCH S·ª¨ SSL ATTEMPTS G·∫¶N ƒê√ÇY:${NC}"
    echo "$logs" | grep -E "certificate obtained|rate.*limit|too many certificates|error" | tail -5 | sed 's/^/‚Ä¢ /'
    echo ""
    
    echo -e "${YELLOW}ü§î B·∫°n mu·ªën ti·∫øp t·ª•c v·ªõi ZeroSSL? (Y/n):${NC}"
    read -r ssl_choice
    
    if [[ ! $ssl_choice =~ ^[Nn]$ ]]; then
        log "${YELLOW}üîÑ Chuy·ªÉn sang ZeroSSL..."
        switch_to_zerossl_now
    else
        echo ""
        echo -e "${BLUE}üìã H∆Ø·ªöNG D·∫™N C√ÄI L·∫†I UBUNTU:${NC}"
        echo -e "  1. Backup d·ªØ li·ªáu quan tr·ªçng"
        echo -e "  2. C√†i l·∫°i Ubuntu Server t·ª´ ƒë·∫ßu"
        echo -e "  3. S·ª≠ d·ª•ng subdomain kh√°c ho·∫∑c domain kh√°c"
        echo -e "  4. Ch·∫°y l·∫°i script: ${CYAN}curl -sSL https://raw.githubusercontent.com/KalvinThien/install-n8n-ffmpeg/main/auto_cai_dat_n8n.sh | bash${NC}"
        echo ""
        exit 1
    fi
}

# H√†m chuy·ªÉn sang ZeroSSL ngay l·∫≠p t·ª©c
switch_to_zerossl_now() {
    log "${YELLOW}üîÑ ƒêang chuy·ªÉn sang ZeroSSL..."
    
    cd $SCRIPT_DIR
    
    # Backup Caddyfile
    cp Caddyfile Caddyfile.backup.$(date +%Y%m%d_%H%M%S)
    
    # C·∫≠p nh·∫≠t Caddyfile v·ªõi ZeroSSL
    sed -i 's|acme_ca.*|acme_ca https://acme.zerossl.com/v2/DV90|' Caddyfile
    
    # C·∫≠p nh·∫≠t .env
    sed -i 's|SSL_PROVIDER=.*|SSL_PROVIDER=zerossl|' .env
    
    # X√≥a SSL data c≈© v√† restart
    docker-compose down
    docker volume rm n8n_caddy_data n8n_caddy_config 2>/dev/null || true
    docker-compose up -d
    
    log "${GREEN}[SUCCESS] ‚úÖ ƒê√£ chuy·ªÉn sang ZeroSSL"
    
    # ƒê·ª£i v√† ki·ªÉm tra SSL m·ªõi
    log "${YELLOW}‚è≥ ƒê·ª£i ZeroSSL c·∫•p certificate..."
    sleep 90
    
    local zerossl_logs=$(docker-compose logs caddy --tail=50 2>/dev/null)
    if echo "$zerossl_logs" | grep -q "certificate obtained successfully"; then
        log "${GREEN}[SUCCESS] üéâ ZeroSSL certificate ƒë√£ ƒë∆∞·ª£c c·∫•p th√†nh c√¥ng!"
    else
        log "${YELLOW}[WARNING] ‚ö†Ô∏è ZeroSSL ƒëang trong qu√° tr√¨nh c·∫•p certificate"
        log "${YELLOW}[INFO] Vui l√≤ng ƒë·ª£i th√™m v√†i ph√∫t v√† ki·ªÉm tra l·∫°i"
    fi
}

# H√†m hi·ªÉn th·ªã th√¥ng tin ho√†n th√†nh
show_completion_info() {
    echo ""
    echo -e "${GREEN}"
    cat << "EOF"
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üéâ C√ÄI ƒê·∫∂T N8N HO√ÄN T·∫§T TH√ÄNH C√îNG! üéâ                   ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${CYAN}üìã TH√îNG TIN TRUY C·∫¨P:${NC}"
    if [ "$USE_DOMAIN" = true ]; then
        echo -e "  üåê N8N Interface: ${GREEN}https://$DOMAIN${NC}"
        if [[ -n "$NEWS_TOKEN" ]]; then
            echo -e "  üì∞ News API: ${GREEN}https://$API_DOMAIN${NC}"
        fi
    else
        echo -e "  üåê N8N Interface: ${GREEN}http://localhost:5678${NC}"
        if [[ -n "$NEWS_TOKEN" ]]; then
            echo -e "  üì∞ News API: ${GREEN}http://localhost:8000${NC}"
        fi
    fi
    echo -e "  üë§ Username: ${YELLOW}admin${NC}"
    echo -e "  üîë Password: ${YELLOW}admin123456${NC}"
    echo ""
    
    if [[ -n "$NEWS_TOKEN" ]]; then
        echo -e "${CYAN}üîê NEWS API AUTHENTICATION:${NC}"
        echo -e "  üîë Bearer Token: ${YELLOW}$NEWS_TOKEN${NC}"
        echo -e "  üìñ API Docs: ${GREEN}https://$API_DOMAIN/docs${NC} (n·∫øu d√πng domain)"
        echo ""
    fi
    
    echo -e "${CYAN}üõ†Ô∏è QU·∫¢N L√ù H·ªÜ TH·ªêNG:${NC}"
    echo -e "  üìÅ Th∆∞ m·ª•c c√†i ƒë·∫∑t: ${YELLOW}$SCRIPT_DIR${NC}"
    echo -e "  üîß Ch·∫©n ƒëo√°n: ${YELLOW}$SCRIPT_DIR/scripts/diagnose.sh${NC}"
    echo -e "  üíæ Backup: ${YELLOW}$SCRIPT_DIR/scripts/backup.sh${NC}"
    echo -e "  üîÑ Restore: ${YELLOW}$SCRIPT_DIR/scripts/restore.sh${NC}"
    if [ "$AUTO_UPDATE" = true ]; then
        echo -e "  üîÑ Auto-Update: ${GREEN}ƒê√£ b·∫≠t${NC} (m·ªói 12 gi·ªù)"
    fi
    echo ""
    
    echo -e "${CYAN}üì± BACKUP CONFIGURATION:${NC}"
    echo -e "  üíæ Backup t·ª± ƒë·ªông: ${GREEN}H√†ng ng√†y l√∫c 2:00 AM${NC}"
    if [[ -n "$TELEGRAM_BOT_TOKEN" ]]; then
        echo -e "  üì± Telegram Backup: ${GREEN}ƒê√£ c·∫•u h√¨nh${NC}"
    fi
    if [ "$GOOGLE_DRIVE_ENABLED" = true ]; then
        echo -e "  ‚òÅÔ∏è  Google Drive Backup: ${GREEN}ƒê√£ c·∫•u h√¨nh${NC}"
    fi
    echo ""
    
    if [ "$USE_DOMAIN" = true ]; then
        echo -e "${CYAN}üîí SSL CERTIFICATE:${NC}"
        case $SSL_PROVIDER in
            "letsencrypt")
                echo -e "  üîê Provider: ${GREEN}Let's Encrypt${NC}"
                ;;
            "zerossl")
                echo -e "  üîê Provider: ${GREEN}ZeroSSL${NC}"
                ;;
            "auto")
                echo -e "  üîê Provider: ${GREEN}Auto (Let's Encrypt ‚Üí ZeroSSL)${NC}"
                ;;
        esac
        echo -e "  üîÑ Auto-renewal: ${GREEN}ƒê√£ c·∫•u h√¨nh${NC}"
        echo ""
    fi
    
    echo -e "${YELLOW}‚ö†Ô∏è  L∆ØU √ù QUAN TR·ªåNG:${NC}"
    echo -e "  ‚Ä¢ ƒê·ªïi m·∫≠t kh·∫©u m·∫∑c ƒë·ªãnh sau khi ƒëƒÉng nh·∫≠p"
    echo -e "  ‚Ä¢ Backup ƒë·ªãnh k·ª≥ ƒë∆∞·ª£c l∆∞u t·∫°i: $SCRIPT_DIR/backups"
    echo -e "  ‚Ä¢ Logs h·ªá th·ªëng t·∫°i: $SCRIPT_DIR/logs"
    echo -e "  ‚Ä¢ S·ª≠ d·ª•ng script ch·∫©n ƒëo√°n ƒë·ªÉ ki·ªÉm tra tr·∫°ng th√°i"
    echo ""
    
    echo -e "${GREEN}üé¨ ƒêƒÇNG K√ù K√äNH YOUTUBE ƒê·ªÇ ·ª¶NG H·ªò:${NC}"
    echo -e "  üì∫ ${CYAN}https://www.youtube.com/@kalvinthiensocial${NC}"
    echo -e "  üì± Zalo: ${CYAN}08.8888.4749${NC}"
    echo ""
    
    echo -e "${GREEN}üöÄ Ch√∫c b·∫°n s·ª≠ d·ª•ng N8N hi·ªáu qu·∫£! üöÄ${NC}"
}

# Main function
main() {
    show_header
    
    # Ki·ªÉm tra quy·ªÅn root
    if [ "$EUID" -ne 0 ]; then
        echo -e "${RED}[ERROR] Script c·∫ßn ch·∫°y v·ªõi quy·ªÅn root${NC}"
        echo "S·ª≠ d·ª•ng: sudo bash $0"
        exit 1
    fi
    
    # Thi·∫øt l·∫≠p swap
    setup_swap
    
    # C·∫•u h√¨nh domain
    configure_domain
    
    # Ki·ªÉm tra DNS
    check_dns
    
    # Cleanup c√†i ƒë·∫∑t c≈©
    cleanup_old_installation
    
    # C√†i ƒë·∫∑t Docker
    install_docker
    
    # C·∫•u h√¨nh c√°c services
    configure_news_api
    configure_telegram_backup
    configure_google_drive_backup
    configure_auto_update
    configure_ssl_provider
    
    # T·∫°o c·∫•u tr√∫c
    create_directory_structure
    create_n8n_dockerfile
    create_news_api
    create_docker_compose
    create_caddyfile
    create_env_file
    
    # T·∫°o c√°c scripts
    create_backup_system
    create_restore_system
    create_auto_update_script
    create_ssl_renewal_script
    create_diagnostic_script
    
    # Thi·∫øt l·∫≠p cron jobs
    setup_cron_jobs
    
    # Build v√† deploy
    build_and_deploy
    
    # Ki·ªÉm tra SSL
    check_ssl_status
    
    # Hi·ªÉn th·ªã th√¥ng tin ho√†n th√†nh
    show_completion_info
}

# Ch·∫°y script
main "$@"
