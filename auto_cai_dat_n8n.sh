# H√†m c√†i ƒë·∫∑t Docker
install_docker() {
    if $SKIP_DOCKER; then
        echo "B·ªè qua c√†i ƒë·∫∑t Docker theo y√™u c·∫ßu..."
        return
    fi
    
    echo "C√†i ƒë·∫∑t Docker v√† Docker Compose..."
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    
    # Th√™m kh√≥a Docker GPG theo c√°ch m·ªõi
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # Th√™m repository Docker
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # C√†i ƒë·∫∑t Docker
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # Ki·ªÉm tra Docker ƒë√£ c√†i ƒë·∫∑t th√†nh c√¥ng ch∆∞a
    if ! command -v docker &> /dev/null; then
        echo "L·ªói: Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        exit 1
    fi

    if ! docker compose version &> /dev/null; then
        echo "L·ªói: Docker Compose plugin ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        exit 1
    fi

    # Th√™m user hi·ªán t·∫°i v√†o nh√≥m docker n·∫øu kh√¥ng ph·∫£i root
    if [ "$SUDO_USER" != "" ]; then
        echo "Th√™m user $SUDO_USER v√†o nh√≥m docker ƒë·ªÉ c√≥ th·ªÉ ch·∫°y docker m√† kh√¥ng c·∫ßn sudo..."
        usermod -aG docker $SUDO_USER
        echo "ƒê√£ th√™m user $SUDO_USER v√†o nh√≥m docker. C√°c thay ƒë·ªïi s·∫Ω c√≥ hi·ªáu l·ª±c sau khi ƒëƒÉng nh·∫≠p l·∫°i."
    fi

    # Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• Docker
    systemctl restart docker

    echo "Docker v√† Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
}

# C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
echo "ƒêang c√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt..."
apt-get update
apt-get install -y dnsutils curl cron jq tar gzip python3-full python3-venv pipx net-tools

# C√†i ƒë·∫∑t yt-dlp th√¥ng qua pipx ho·∫∑c virtual environment
echo "C√†i ƒë·∫∑t yt-dlp..."
if command -v pipx &> /dev/null; then
    pipx install yt-dlp
else
    # T·∫°o virtual environment v√† c√†i ƒë·∫∑t yt-dlp v√†o ƒë√≥
    python3 -m venv /opt/yt-dlp-venv
    /opt/yt-dlp-venv/bin/pip install yt-dlp
    ln -sf /opt/yt-dlp-venv/bin/yt-dlp /usr/local/bin/yt-dlp
    chmod +x /usr/local/bin/yt-dlp
fi

# ƒê·∫£m b·∫£o cron service ƒëang ch·∫°y
systemctl enable cron
systemctl start cron

# Ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
check_commands

# Nh·∫≠n input domain t·ª´ ng∆∞·ªùi d√πng
if $LOCALHOST_MODE; then
    DOMAIN="localhost"
    DOMAIN_MODE="localhost"
    echo "üè† ƒê√£ ch·ªçn ch·∫ø ƒë·ªô localhost: kh√¥ng c·∫ßn domain v√† SSL"
else
    read -p "Nh·∫≠p t√™n mi·ªÅn ho·∫∑c t√™n mi·ªÅn ph·ª• c·ªßa b·∫°n (ho·∫∑c 'localhost' cho ch·∫ø ƒë·ªô local): " DOMAIN
    if [ "$DOMAIN" = "localhost" ]; then
        LOCALHOST_MODE=true
        DOMAIN_MODE="localhost"
        echo "üè† ƒê√£ ch·ªçn ch·∫ø ƒë·ªô localhost: $DOMAIN"
    else
        DOMAIN_MODE="domain"
        echo "üåê ƒê√£ ch·ªçn ch·∫ø ƒë·ªô domain: $DOMAIN"
    fi
fi

# C·∫•u h√¨nh Telegram backup (t√πy ch·ªçn)
echo ""
echo "üîî C·∫•u h√¨nh g·ª≠i backup qua Telegram (t√πy ch·ªçn)"
read -p "B·∫°n c√≥ mu·ªën c·∫•u h√¨nh g·ª≠i backup t·ª± ƒë·ªông qua Telegram kh√¥ng? (y/n): " SETUP_TELEGRAM
if [ "$SETUP_TELEGRAM" = "y" ] || [ "$SETUP_TELEGRAM" = "Y" ]; then
    echo "ƒê·ªÉ c·∫•u h√¨nh Telegram, b·∫°n c·∫ßn:"
    echo "1. T·∫°o bot Telegram b·∫±ng c√°ch nh·∫Øn tin cho @BotFather"
    echo "2. L·∫•y Bot Token t·ª´ BotFather"
    echo "3. L·∫•y Chat ID b·∫±ng c√°ch nh·∫Øn tin cho bot v√† truy c·∫≠p: https://api.telegram.org/bot<TOKEN>/getUpdates"
    echo ""
    read -p "Nh·∫≠p Bot Token: " TELEGRAM_BOT_TOKEN
    read -p "Nh·∫≠p Chat ID: " TELEGRAM_CHAT_ID
    
    if [ -n "$TELEGRAM_BOT_TOKEN" ] && [ -n "$TELEGRAM_CHAT_ID" ]; then
        echo "TELEGRAM_BOT_TOKEN=\"$TELEGRAM_BOT_TOKEN\"" > /tmp/telegram_config.txt
        echo "TELEGRAM_CHAT_ID=\"$TELEGRAM_CHAT_ID\"" >> /tmp/telegram_config.txt
        echo "‚úÖ C·∫•u h√¨nh Telegram ƒë√£ ƒë∆∞·ª£c l∆∞u t·∫°m th·ªùi"
    else
        echo "‚ö†Ô∏è Th√¥ng tin Telegram kh√¥ng ƒë·∫ßy ƒë·ªß, b·ªè qua c·∫•u h√¨nh n√†y"
        SETUP_TELEGRAM="n"
    fi
else
    SETUP_TELEGRAM="n"
fi

# C·∫•u h√¨nh FastAPI News Content API (t√πy ch·ªçn)
echo ""
echo "üì∞ C·∫•u h√¨nh API l·∫•y n·ªôi dung tin t·ª©c (FastAPI + Newspaper4k)"
read -p "B·∫°n c√≥ mu·ªën t·∫°o API ri√™ng ƒë·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt kh√¥ng? (y/n): " SETUP_NEWS_API
if [ "$SETUP_NEWS_API" = "y" ] || [ "$SETUP_NEWS_API" = "Y" ]; then
    read -p "Nh·∫≠p m·∫≠t kh·∫©u Bearer Token cho API (ƒë·ªÉ b·∫£o m·∫≠t): " NEWS_API_TOKEN
    if [ -z "$NEWS_API_TOKEN" ]; then
        NEWS_API_TOKEN=$(openssl rand -hex 16)
        echo "‚ö†Ô∏è B·∫°n ch∆∞a nh·∫≠p token, s·ª≠ d·ª•ng token t·ª± ƒë·ªông: $NEWS_API_TOKEN"
    fi
    echo "‚úÖ S·∫Ω t·∫°o News API v·ªõi Bearer Token ƒë√£ c·∫•u h√¨nh"
else
    SETUP_NEWS_API="n"
fi

# Ki·ªÉm tra domain (ch·ªâ khi kh√¥ng ph·∫£i localhost mode)
if [ "$DOMAIN_MODE" = "domain" ]; then
    echo "Ki·ªÉm tra domain $DOMAIN..."
    if check_domain $DOMAIN; then
        echo "‚úÖ Domain $DOMAIN ƒë√£ ƒë∆∞·ª£c tr·ªè ƒë√∫ng ƒë·∫øn server n√†y. Ti·∫øp t·ª•c c√†i ƒë·∫∑t"
    else
        echo "Domain $DOMAIN ch∆∞a ƒë∆∞·ª£c tr·ªè ƒë·∫øn server n√†y."
        echo "Vui l√≤ng c·∫≠p nh·∫≠t b·∫£n ghi DNS ƒë·ªÉ tr·ªè $DOMAIN ƒë·∫øn IP $(curl -s https://api.ipify.org)"
        echo "Sau khi c·∫≠p nh·∫≠t DNS, h√£y ch·∫°y l·∫°i script n√†y"
        exit 1
    fi
fi

# C√†i ƒë·∫∑t Docker v√† Docker Compose
install_docker 

# Function cleanup containers v√† images c≈©
cleanup_old_installation() {
    echo "üßπ D·ªçn d·∫πp c√°c container v√† image c≈©..."
    
    # Chuy·ªÉn ƒë·∫øn th∆∞ m·ª•c N8N n·∫øu c√≥
    if [ -d "$N8N_DIR" ]; then
        cd "$N8N_DIR"
        
        # D·ª´ng v√† x√≥a containers b·∫±ng docker compose n·∫øu c√≥
        if [ -f "docker-compose.yml" ] || [ -f "compose.yml" ]; then
            echo "D·ª´ng containers v·ªõi docker compose..."
            docker compose down --remove-orphans --volumes 2>/dev/null || true
        fi
    fi
    
    # D·ª´ng t·∫•t c·∫£ containers li√™n quan
    echo "D·ª´ng c√°c container c≈©..."
    docker stop $(docker ps -a -q --filter "name=n8n") 2>/dev/null || true
    docker stop $(docker ps -a -q --filter "name=caddy") 2>/dev/null || true
    docker stop $(docker ps -a -q --filter "name=fastapi") 2>/dev/null || true
    
    # X√≥a containers c≈©
    echo "X√≥a c√°c container c≈©..."
    docker rm $(docker ps -a -q --filter "name=n8n") 2>/dev/null || true
    docker rm $(docker ps -a -q --filter "name=caddy") 2>/dev/null || true
    docker rm $(docker ps -a -q --filter "name=fastapi") 2>/dev/null || true
    
    # X√≥a images c≈© n·∫øu c√≥
    echo "X√≥a c√°c image c≈©..."
    docker rmi n8n-ffmpeg-latest 2>/dev/null || true
    docker rmi $(docker images -q --filter "dangling=true") 2>/dev/null || true
    
    # X√≥a networks orphan
    echo "D·ªçn d·∫πp networks..."
    docker network prune -f 2>/dev/null || true
    
    # D·ªçn d·∫πp volumes kh√¥ng s·ª≠ d·ª•ng (c·∫©n th·∫≠n v·ªõi volumes)
    echo "D·ªçn d·∫πp volumes kh√¥ng s·ª≠ d·ª•ng..."
    docker volume ls -q --filter "dangling=true" | xargs -r docker volume rm 2>/dev/null || true
    
    echo "‚úÖ Ho√†n t·∫•t d·ªçn d·∫πp!"
}

# Ki·ªÉm tra xem c√≥ c·∫ßn d·ªçn d·∫πp kh√¥ng
echo "üîç Ki·ªÉm tra c√°c container N8N hi·ªán c√≥..."
EXISTING_CONTAINERS=$(docker ps -a --filter "name=n8n" --format "{{.Names}}" 2>/dev/null || true)
if [ -n "$EXISTING_CONTAINERS" ]; then
    echo "‚ö†Ô∏è  Ph√°t hi·ªán container N8N c≈©: $EXISTING_CONTAINERS"
    read -p "B·∫°n c√≥ mu·ªën d·ªçn d·∫πp v√† c√†i ƒë·∫∑t l·∫°i t·ª´ ƒë·∫ßu? (y/n): " CLEANUP_CHOICE
    if [ "$CLEANUP_CHOICE" = "y" ] || [ "$CLEANUP_CHOICE" = "Y" ]; then
        cleanup_old_installation
    fi
fi

# T·∫°o th∆∞ m·ª•c cho n8n
echo "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c cho n8n t·∫°i $N8N_DIR..."
mkdir -p $N8N_DIR
mkdir -p $N8N_DIR/files
mkdir -p $N8N_DIR/files/temp
mkdir -p $N8N_DIR/files/youtube_content_anylystic
mkdir -p $N8N_DIR/files/backup_full

# T·∫°o Dockerfile - C·∫¨P NH·∫¨T V·ªöI PUPPETEER c·∫£i ti·∫øn
echo "T·∫°o Dockerfile ƒë·ªÉ c√†i ƒë·∫∑t n8n v·ªõi FFmpeg, yt-dlp v√† Puppeteer..."
cat << 'EOF' > $N8N_DIR/Dockerfile
FROM n8nio/n8n:latest

USER root

# C√†i ƒë·∫∑t FFmpeg, wget, zip v√† c√°c g√≥i ph·ª• thu·ªôc c∆° b·∫£n
RUN apk update && \
    apk add --no-cache ffmpeg wget zip unzip python3 py3-pip jq tar

# C√†i ƒë·∫∑t yt-dlp tr·ª±c ti·∫øp s·ª≠ d·ª•ng pip trong container
RUN pip3 install --break-system-packages -U yt-dlp && \
    chmod +x /usr/bin/yt-dlp

# C√†i ƒë·∫∑t Puppeteer dependencies (c·∫£i ti·∫øn)
RUN apk add --no-cache \
    chromium \
    nss \
    freetype \
    freetype-dev \
    harfbuzz \
    ca-certificates \
    ttf-freefont \
    ttf-liberation \
    font-noto \
    font-noto-cjk \
    font-noto-emoji \
    font-noto-symbols \
    font-noto-symbols2 \
    dbus \
    dbus-x11 \
    udev \
    xvfb \
    && fc-cache -f

# Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho Puppeteer
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true \
    PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser \
    CHROME_BIN=/usr/bin/chromium-browser \
    CHROME_PATH=/usr/bin/chromium-browser \
    DISPLAY=:99

# C√†i ƒë·∫∑t n8n-nodes-puppeteer v·ªõi c·∫£i ti·∫øn
WORKDIR /usr/local/lib/node_modules/n8n
RUN npm install n8n-nodes-puppeteer@latest || echo "Warning: n8n-nodes-puppeteer installation failed"

# C√†i ƒë·∫∑t puppeteer-core ƒë·ªÉ ƒë·∫£m b·∫£o compatibility
RUN npm install puppeteer-core@latest || echo "Warning: puppeteer-core installation failed"

# Ki·ªÉm tra c√†i ƒë·∫∑t c√°c c√¥ng c·ª•
RUN ffmpeg -version && \
    wget --version | head -n 1 && \
    zip --version | head -n 2 && \
    yt-dlp --version

# Ki·ªÉm tra Chromium v√† t·∫°o script test
RUN echo '#!/bin/sh' > /usr/local/bin/test-chromium && \
    echo 'xvfb-run -a chromium-browser --headless --disable-gpu --no-sandbox --disable-setuid-sandbox --dump-dom https://www.google.com > /dev/null 2>&1' >> /usr/local/bin/test-chromium && \
    chmod +x /usr/local/bin/test-chromium

# T·∫°o th∆∞ m·ª•c v√† set quy·ªÅn
RUN mkdir -p /files/youtube_content_anylystic && \
    mkdir -p /files/backup_full && \
    chown -R node:node /files

# Test Puppeteer v√† t·∫°o status file
RUN if test-chromium; then \
        echo "Puppeteer: AVAILABLE" > /files/puppeteer_status.txt; \
    else \
        echo "Puppeteer: NOT_AVAILABLE" > /files/puppeteer_status.txt; \
    fi

# T·∫°o user directory v·ªõi quy·ªÅn ph√π h·ª£p
RUN mkdir -p /home/node/.cache /home/node/.npm && \
    chown -R node:node /home/node

# Tr·ªü l·∫°i user node
USER node
WORKDIR /home/node
EOF 

# T·∫°o file docker-compose.yml
echo "T·∫°o file docker-compose.yml..."
if [ "$DOMAIN_MODE" = "localhost" ]; then
    # Localhost mode: Kh√¥ng c·∫ßn Caddy, ch·∫°y tr·ª±c ti·∫øp tr√™n port 5678
    cat << EOF > $N8N_DIR/docker-compose.yml
# C·∫•u h√¨nh Docker Compose cho N8N (LOCALHOST MODE)
services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    image: n8n-ffmpeg-latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - NODE_ENV=production
      - WEBHOOK_URL=http://localhost:5678
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      # C·∫•u h√¨nh binary data mode
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_STORAGE=/files
      - N8N_DEFAULT_BINARY_DATA_FILESYSTEM_DIRECTORY=/files
      - N8N_DEFAULT_BINARY_DATA_TEMP_DIRECTORY=/files/temp
      - NODE_FUNCTION_ALLOW_BUILTIN=child_process,path,fs,util,os
      - N8N_EXECUTIONS_DATA_MAX_SIZE=304857600
      # C·∫•u h√¨nh Puppeteer
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
      - CHROME_BIN=/usr/bin/chromium-browser
      - DISPLAY=:99
    volumes:
      - ${N8N_DIR}:/home/node/.n8n
      - ${N8N_DIR}/files:/files
    user: "1000:1000"
    cap_add:
      - SYS_ADMIN  # Th√™m quy·ªÅn cho Puppeteer
EOF
else
    # Domain mode: S·ª≠ d·ª•ng Caddy l√†m reverse proxy v·ªõi SSL
    cat << EOF > $N8N_DIR/docker-compose.yml
# C·∫•u h√¨nh Docker Compose cho N8N (DOMAIN MODE)
services:
  n8n:
    build:
      context: .
      dockerfile: Dockerfile
    image: n8n-ffmpeg-latest
    restart: always
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${DOMAIN}
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      # C·∫•u h√¨nh binary data mode
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_STORAGE=/files
      - N8N_DEFAULT_BINARY_DATA_FILESYSTEM_DIRECTORY=/files
      - N8N_DEFAULT_BINARY_DATA_TEMP_DIRECTORY=/files/temp
      - NODE_FUNCTION_ALLOW_BUILTIN=child_process,path,fs,util,os
      - N8N_EXECUTIONS_DATA_MAX_SIZE=304857600
      # C·∫•u h√¨nh Puppeteer
      - PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
      - PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
      - CHROME_BIN=/usr/bin/chromium-browser
      - DISPLAY=:99
    volumes:
      - ${N8N_DIR}:/home/node/.n8n
      - ${N8N_DIR}/files:/files
    user: "1000:1000"
    cap_add:
      - SYS_ADMIN  # Th√™m quy·ªÅn cho Puppeteer

  caddy:
    image: caddy:2
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ${N8N_DIR}/Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    depends_on:
      - n8n

volumes:
  caddy_data:
  caddy_config:
EOF
fi

# T·∫°o file Caddyfile (ch·ªâ c·∫ßn trong domain mode)
if [ "$DOMAIN_MODE" = "domain" ]; then
    echo "T·∫°o file Caddyfile..."
    if [ "$SETUP_NEWS_API" = "y" ]; then
        # Caddyfile v·ªõi h·ªó tr·ª£ c·∫£ domain ch√≠nh v√† subdomain API
        cat << EOF > $N8N_DIR/Caddyfile
# C·∫•u h√¨nh Caddy cho N8N v·ªõi SSL t·ª± ƒë·ªông
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán - YouTube: @kalvinthiensocial

${DOMAIN} {
    # N8N Main Domain
    reverse_proxy n8n:5678
    
    # Th√™m headers b·∫£o m·∫≠t
    header {
        # B·∫£o m·∫≠t header
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        
        # Th√¥ng tin t√°c gi·∫£
        X-Powered-By "N8N + Caddy by Nguy·ªÖn Ng·ªçc Thi·ªán"
        X-Author "YouTube: @kalvinthiensocial"
        X-Contact "Facebook: Ban.Thien.Handsome | Zalo: 08.8888.4749"
    }
    
    # Logging
    log {
        output file /var/log/caddy/n8n-access.log
        format json
    }
}

api.${DOMAIN} {
    # News API Subdomain
    reverse_proxy host.docker.internal:8001
    
    # Th√™m headers b·∫£o m·∫≠t cho API
    header {
        # B·∫£o m·∫≠t header
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        
        # CORS cho API
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Authorization, Content-Type"
        
        # Th√¥ng tin t√°c gi·∫£
        X-API-Author "Nguy·ªÖn Ng·ªçc Thi·ªán"
        X-API-Version "News Content API v1.0"
        X-Support "YouTube: @kalvinthiensocial"
    }
    
    # Logging
    log {
        output file /var/log/caddy/api-access.log
        format json
    }
}
EOF
    else
        # Caddyfile ch·ªâ cho N8N
        cat << EOF > $N8N_DIR/Caddyfile
# C·∫•u h√¨nh Caddy cho N8N v·ªõi SSL t·ª± ƒë·ªông
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán - YouTube: @kalvinthiensocial

${DOMAIN} {
    reverse_proxy n8n:5678
    
    # Th√™m headers b·∫£o m·∫≠t
    header {
        # B·∫£o m·∫≠t header
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        
        # Th√¥ng tin t√°c gi·∫£
        X-Powered-By "N8N + Caddy by Nguy·ªÖn Ng·ªçc Thi·ªán"
        X-Author "YouTube: @kalvinthiensocial"
        X-Contact "Facebook: Ban.Thien.Handsome | Zalo: 08.8888.4749"
    }
    
    # Logging
    log {
        output file /var/log/caddy/n8n-access.log
        format json
    }
}
EOF
    fi
fi

# T·∫°o script sao l∆∞u workflow v√† credentials
echo "T·∫°o script sao l∆∞u workflow v√† credentials..."
cat << EOF > $N8N_DIR/backup-workflows.sh
#!/bin/bash

# Thi·∫øt l·∫≠p bi·∫øn
N8N_DIR="$N8N_DIR"
BACKUP_DIR="\$N8N_DIR/files/backup_full"
DATE=\$(date +"%Y%m%d_%H%M%S")
BACKUP_FILE="\$BACKUP_DIR/n8n_backup_\$DATE.tar"
TEMP_DIR="/tmp/n8n_backup_\$DATE"

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" | tee -a \$BACKUP_DIR/backup.log
}

# T·∫°o th∆∞ m·ª•c backup n·∫øu ch∆∞a c√≥
mkdir -p \$BACKUP_DIR

log "B·∫Øt ƒë·∫ßu sao l∆∞u workflows v√† credentials..."

# Ki·ªÉm tra l·ªánh docker v√† quy·ªÅn truy c·∫≠p
if ! command -v docker &> /dev/null; then
    log "L·ªói: Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t"
    exit 1
fi

# X√°c ƒë·ªãnh l·ªánh docker ph√π h·ª£p
if ! docker ps &>/dev/null; then
    DOCKER_CMD="sudo docker"
else
    DOCKER_CMD="docker"
fi

# T√¨m container n8n
N8N_CONTAINER=\$(\$DOCKER_CMD ps -q --filter "name=n8n" 2>/dev/null)
if [ -z "\$N8N_CONTAINER" ]; then
    log "L·ªói: Kh√¥ng t√¨m th·∫•y container n8n ƒëang ch·∫°y"
    exit 1
fi

# T·∫°o th∆∞ m·ª•c t·∫°m th·ªùi
mkdir -p \$TEMP_DIR
mkdir -p \$TEMP_DIR/workflows
mkdir -p \$TEMP_DIR/credentials
mkdir -p \$TEMP_DIR/database

# Xu·∫•t workflows (v·ªõi error handling)
log "ƒêang xu·∫•t workflows..."
WORKFLOWS=\$(\$DOCKER_CMD exec \$N8N_CONTAINER n8n list:workflows --json 2>/dev/null || echo "[]")
if [ "\$WORKFLOWS" = "[]" ] || [ -z "\$WORKFLOWS" ]; then
    log "C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y workflow n√†o ƒë·ªÉ sao l∆∞u"
    echo "[]" > \$TEMP_DIR/workflows/empty_workflows.json
else
    # Xu·∫•t t·∫•t c·∫£ workflows th√†nh 1 file
    echo "\$WORKFLOWS" > \$TEMP_DIR/workflows/all_workflows.json
    log "ƒê√£ xu·∫•t \$(echo "\$WORKFLOWS" | jq length) workflows"
    
    # Xu·∫•t t·ª´ng workflow ri√™ng l·∫ª (n·∫øu c√≥ th·ªÉ)
    echo "\$WORKFLOWS" | jq -c '.[]' 2>/dev/null | while read -r workflow; do
        id=\$(echo "\$workflow" | jq -r '.id' 2>/dev/null)
        name=\$(echo "\$workflow" | jq -r '.name' 2>/dev/null | tr -dc '[:alnum:][:space:]' | tr '[:space:]' '_')
        if [ -n "\$id" ] && [ "\$id" != "null" ]; then
            \$DOCKER_CMD exec \$N8N_CONTAINER n8n export:workflow --id="\$id" --output="/tmp/workflow_\$id.json" 2>/dev/null || true
            \$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/workflow_\$id.json \$TEMP_DIR/workflows/\$id-\$name.json 2>/dev/null || true
        fi
    done
fi

# Sao l∆∞u database v√† credentials t·ª´ container
log "ƒêang sao l∆∞u database v√† credentials..."
\$DOCKER_CMD exec \$N8N_CONTAINER cp /home/node/.n8n/database.sqlite /tmp/database_backup.sqlite 2>/dev/null || true
\$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/database_backup.sqlite \$TEMP_DIR/database/ 2>/dev/null || true

\$DOCKER_CMD exec \$N8N_CONTAINER cp /home/node/.n8n/config /tmp/config_backup -r 2>/dev/null || true
\$DOCKER_CMD cp \$N8N_CONTAINER:/tmp/config_backup \$TEMP_DIR/credentials/ 2>/dev/null || true

# Sao l∆∞u to√†n b·ªô th∆∞ m·ª•c .n8n t·ª´ host (volume mount)
if [ -d "\$N8N_DIR" ]; then
    log "ƒêang sao l∆∞u th∆∞ m·ª•c c·∫•u h√¨nh n8n t·ª´ host..."
    cp -r "\$N8N_DIR"/*.sqlite \$TEMP_DIR/database/ 2>/dev/null || true
    cp -r "\$N8N_DIR"/config \$TEMP_DIR/credentials/ 2>/dev/null || true
    cp -r "\$N8N_DIR"/nodes \$TEMP_DIR/credentials/ 2>/dev/null || true
fi

# T·∫°o file th√¥ng tin backup
cat > \$TEMP_DIR/backup_info.txt << BACKUP_INFO
Backup Date: \$(date)
N8N Directory: \$N8N_DIR
Container ID: \$N8N_CONTAINER
Workflows Count: \$(echo "\$WORKFLOWS" | jq length 2>/dev/null || echo "0")
Backup By: Script c·ªßa Nguy·ªÖn Ng·ªçc Thi·ªán
YouTube: @kalvinthiensocial
BACKUP_INFO

# T·∫°o file tar n√©n
log "ƒêang t·∫°o file n√©n backup..."
tar -czf \$BACKUP_FILE -C \$(dirname \$TEMP_DIR) \$(basename \$TEMP_DIR)

# X√≥a th∆∞ m·ª•c t·∫°m th·ªùi
rm -rf \$TEMP_DIR

# Ki·ªÉm tra k√≠ch th∆∞·ªõc file backup
if [ -f "\$BACKUP_FILE" ]; then
    BACKUP_SIZE=\$(du -h "\$BACKUP_FILE" | cut -f1)
    log "Sao l∆∞u ho√†n t·∫•t: \$BACKUP_FILE (K√≠ch th∆∞·ªõc: \$BACKUP_SIZE)"
else
    log "L·ªói: Kh√¥ng th·ªÉ t·∫°o file backup"
    exit 1
fi

# Gi·ªØ l·∫°i t·ªëi ƒëa 30 b·∫£n sao l∆∞u g·∫ßn nh·∫•t
log "D·ªçn d·∫πp c√°c b·∫£n sao l∆∞u c≈©..."
find \$BACKUP_DIR -name "n8n_backup_*.tar" -type f -mtime +30 -delete 2>/dev/null || true
BACKUP_COUNT=\$(ls -1 \$BACKUP_DIR/n8n_backup_*.tar 2>/dev/null | wc -l)
log "Hi·ªán c√≥ \$BACKUP_COUNT b·∫£n sao l∆∞u trong th∆∞ m·ª•c"

# G·ª≠i backup qua Telegram (n·∫øu ƒë∆∞·ª£c c·∫•u h√¨nh)
if [ -f "\$N8N_DIR/telegram_config.txt" ]; then
    source "\$N8N_DIR/telegram_config.txt"
    if [ -n "\$TELEGRAM_BOT_TOKEN" ] && [ -n "\$TELEGRAM_CHAT_ID" ]; then
        log "ƒêang g·ª≠i backup qua Telegram..."
        curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendDocument" \
            -F chat_id="\$TELEGRAM_CHAT_ID" \
            -F document=@"\$BACKUP_FILE" \
            -F caption="üîÑ Backup N8N t·ª± ƒë·ªông - \$(date '+%d/%m/%Y %H:%M:%S')%0AK√≠ch th∆∞·ªõc: \$BACKUP_SIZE%0Aüë®‚Äçüíª By: Nguy·ªÖn Ng·ªçc Thi·ªán" \
            > /dev/null 2>&1 && log "ƒê√£ g·ª≠i backup qua Telegram th√†nh c√¥ng" || log "L·ªói g·ª≠i backup qua Telegram"
    fi
fi

log "Ho√†n t·∫•t qu√° tr√¨nh sao l∆∞u"
EOF

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho script sao l∆∞u
chmod +x $N8N_DIR/backup-workflows.sh

# L∆∞u c·∫•u h√¨nh Telegram n·∫øu c√≥
if [ "$SETUP_TELEGRAM" = "y" ] && [ -f "/tmp/telegram_config.txt" ]; then
    echo "L∆∞u c·∫•u h√¨nh Telegram..."
    mv /tmp/telegram_config.txt $N8N_DIR/telegram_config.txt
    chmod 600 $N8N_DIR/telegram_config.txt
fi

# T·∫°o News API n·∫øu ng∆∞·ªùi d√πng ch·ªçn
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "ƒêang t·∫°o News Content API v·ªõi FastAPI v√† Newspaper4k..."
    
    # T·∫°o th∆∞ m·ª•c cho News API
    mkdir -p $N8N_DIR/news_api
    
    # T·∫°o m√¥i tr∆∞·ªùng ·∫£o Python
    echo "T·∫°o m√¥i tr∆∞·ªùng ·∫£o Python cho News API..."
    python3 -m venv $N8N_DIR/news_api/venv
    
    # C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt - S·ª¨A L·ªñI LXML
    echo "C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán Python c·∫ßn thi·∫øt..."
    $N8N_DIR/news_api/venv/bin/pip install --upgrade pip
    # C√†i ƒë·∫∑t lxml v·ªõi html_clean tr∆∞·ªõc
    $N8N_DIR/news_api/venv/bin/pip install "lxml[html_clean]" lxml_html_clean
    # C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán kh√°c
    $N8N_DIR/news_api/venv/bin/pip install fastapi uvicorn newspaper4k fake-useragent python-multipart pydantic requests beautifulsoup4 feedparser

    # T·∫°o file main.py cho FastAPI v·ªõi c·∫£i ti·∫øn
    cat << 'EOF' > $N8N_DIR/news_api/main.py
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
News Content API - T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán
YouTube: @kalvinthiensocial
Facebook: Ban.Thien.Handsome
Zalo/SƒêT: 08.8888.4749
"""

import os
import asyncio
import hashlib
from datetime import datetime, timedelta
from typing import List, Optional, Dict, Union
from urllib.parse import urlparse
from fake_useragent import UserAgent
import feedparser
import requests
from bs4 import BeautifulSoup

from fastapi import FastAPI, HTTPException, Depends, Security, Request
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import HTMLResponse, JSONResponse
from pydantic import BaseModel, HttpUrl, Field
import newspaper
from newspaper import Article, Source

# C·∫•u h√¨nh
API_TOKEN = os.getenv("NEWS_API_TOKEN", "your-secret-token-here")
API_HOST = os.getenv("NEWS_API_HOST", "0.0.0.0")
API_PORT = int(os.getenv("NEWS_API_PORT", "8001"))

# FastAPI app v·ªõi th√¥ng tin t√°c gi·∫£
app = FastAPI(
    title="üì∞ News Content API by Nguy·ªÖn Ng·ªçc Thi·ªán",
    description="""
    API l·∫•y n·ªôi dung tin t·ª©c s·ª≠ d·ª•ng Newspaper4k
    
    üé¨ **T√°c gi·∫£**: Nguy·ªÖn Ng·ªçc Thi·ªán  
    üì∫ **YouTube**: [@kalvinthiensocial](https://www.youtube.com/@kalvinthiensocial)  
    üì± **Facebook**: [Ban.Thien.Handsome](https://www.facebook.com/Ban.Thien.Handsome/)  
    üìû **Zalo/SƒêT**: 08.8888.4749  
    
    üîê **Bearer Token**: ƒê·ªÉ b·∫£o m·∫≠t, token th·∫≠t ƒë∆∞·ª£c ·∫©n trong docs n√†y
    """,
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc",
    contact={
        "name": "Nguy·ªÖn Ng·ªçc Thi·ªán",
        "url": "https://www.youtube.com/@kalvinthiensocial",
        "email": "contact@kalvinthien.dev"
    }
)

# Security
security = HTTPBearer()
ua = UserAgent()

# Models
class ArticleRequest(BaseModel):
    url: HttpUrl = Field(..., description="URL c·ªßa b√†i vi·∫øt c·∫ßn l·∫•y n·ªôi dung")
    language: Optional[str] = Field("vi", description="Ng√¥n ng·ªØ c·ªßa b√†i vi·∫øt (vi, en, etc.)")
    extract_images: Optional[bool] = Field(True, description="C√≥ l·∫•y h√¨nh ·∫£nh kh√¥ng")
    summarize: Optional[bool] = Field(True, description="C√≥ t√≥m t·∫Øt n·ªôi dung kh√¥ng")

class SourceRequest(BaseModel):
    url: HttpUrl = Field(..., description="URL c·ªßa trang tin t·ª©c")
    max_articles: Optional[int] = Field(10, description="S·ªë l∆∞·ª£ng b√†i vi·∫øt t·ªëi ƒëa")
    category_filter: Optional[List[str]] = Field(None, description="L·ªçc theo danh m·ª•c")

class FeedRequest(BaseModel):
    url: HttpUrl = Field(..., description="URL c·ªßa RSS feed")
    max_articles: Optional[int] = Field(20, description="S·ªë l∆∞·ª£ng b√†i vi·∫øt t·ªëi ƒëa")

# Authentication v·ªõi token demo trong docs
async def verify_token(credentials: HTTPAuthorizationCredentials = Security(security)):
    if credentials.credentials != API_TOKEN:
        raise HTTPException(
            status_code=401, 
            detail="Token kh√¥ng h·ª£p l·ªá. Li√™n h·ªá Nguy·ªÖn Ng·ªçc Thi·ªán ƒë·ªÉ l·∫•y token."
        )
    return credentials

# Helper functions
def get_random_headers():
    return {
        'User-Agent': ua.random,
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
        'Accept-Language': 'vi-VN,vi;q=0.9,en;q=0.8',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
        'Upgrade-Insecure-Requests': '1',
    }

def safe_extract_content(article_url: str, language: str = "vi") -> Dict:
    try:
        # C·∫•u h√¨nh newspaper
        config = newspaper.Config()
        config.browser_user_agent = ua.random
        config.request_timeout = 10
        config.language = language
        config.memoize_articles = False
        
        # T·∫°o b√†i vi·∫øt
        article = Article(article_url, config=config)
        article.download()
        article.parse()
        
        # NLP processing n·∫øu c√≥ n·ªôi dung
        if article.text:
            try:
                article.nlp()
            except:
                pass
        
        return {
            "success": True,
            "url": article_url,
            "title": article.title or "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
            "text": article.text or "Kh√¥ng th·ªÉ l·∫•y n·ªôi dung",
            "summary": article.summary or "Kh√¥ng c√≥ t√≥m t·∫Øt",
            "authors": article.authors or [],
            "publish_date": article.publish_date.isoformat() if article.publish_date else None,
            "top_image": article.top_image or None,
            "images": list(article.images) if article.images else [],
            "keywords": article.keywords or [],
            "language": article.meta_lang or language,
            "source_url": article.source_url or None,
            "meta_description": article.meta_description or None,
            "meta_keywords": article.meta_keywords or [],
            "tags": article.tags or [],
            "api_info": {
                "processed_by": "News API by Nguy·ªÖn Ng·ªçc Thi·ªán",
                "youtube": "@kalvinthiensocial",
                "processed_at": datetime.now().isoformat()
            }
        }
    except Exception as e:
        return {
            "success": False,
            "url": article_url,
            "error": str(e),
            "title": None,
            "text": None,
            "api_info": {
                "processed_by": "News API by Nguy·ªÖn Ng·ªçc Thi·ªán",
                "youtube": "@kalvinthiensocial",
                "error_at": datetime.now().isoformat()
            }
        }

# Routes
@app.get("/", response_class=HTMLResponse)
async def home():
    return f"""
    <html>
        <head>
            <title>üì∞ News Content API by Nguy·ªÖn Ng·ªçc Thi·ªán</title>
            <style>
                body {{ font-family: 'Segoe UI', Arial, sans-serif; max-width: 900px; margin: 0 auto; padding: 20px; background: #f5f7fa; }}
                .header {{ text-align: center; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 30px; border-radius: 15px; margin-bottom: 30px; }}
                .author-info {{ background: #ffffff; padding: 20px; border-radius: 10px; margin: 20px 0; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
                .api-info {{ background: #e3f2fd; padding: 15px; border-radius: 8px; margin: 20px 0; }}
                .endpoint {{ background: #fff3e0; padding: 15px; margin: 15px 0; border-radius: 8px; border-left: 4px solid #ff9800; }}
                .token-warning {{ background: #ffebee; padding: 15px; border-radius: 8px; margin: 20px 0; border-left: 4px solid #f44336; }}
                code {{ background: #f0f0f0; padding: 4px 8px; border-radius: 4px; font-family: 'Courier New', monospace; }}
                .btn {{ display: inline-block; padding: 12px 24px; background: #2196F3; color: white; text-decoration: none; border-radius: 6px; margin: 5px; }}
                .btn:hover {{ background: #1976D2; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h1>üì∞ News Content API</h1>
                <p>API l·∫•y n·ªôi dung tin t·ª©c s·ª≠ d·ª•ng Newspaper4k</p>
                <p>‚ú® T√°c gi·∫£: <strong>Nguy·ªÖn Ng·ªçc Thi·ªán</strong></p>
            </div>
            
            <div class="author-info">
                <h3>üë®‚Äçüíª Th√¥ng tin t√°c gi·∫£</h3>
                <p><strong>üì∫ YouTube:</strong> <a href="https://www.youtube.com/@kalvinthiensocial?sub_confirmation=1" target="_blank">@kalvinthiensocial</a></p>
                <p><strong>üé¨ Playlist N8N:</strong> <a href="https://www.youtube.com/@kalvinthiensocial/playlists" target="_blank">Xem t·∫°i ƒë√¢y</a></p>
                <p><strong>üì± Facebook:</strong> <a href="https://www.facebook.com/Ban.Thien.Handsome/" target="_blank">Ban.Thien.Handsome</a></p>
                <p><strong>üìû Zalo/SƒêT:</strong> 08.8888.4749</p>
                <p><strong>üîî H√£y ƒëƒÉng k√Ω k√™nh YouTube ƒë·ªÉ ·ªßng h·ªô!</strong></p>
            </div>
            
            <div class="token-warning">
                <h3>üîê B·∫£o m·∫≠t Token</h3>
                <p>Bearer Token th·∫≠t ƒë√£ ƒë∆∞·ª£c ·∫©n trong docs API ƒë·ªÉ b·∫£o m·∫≠t.</p>
                <p>Token demo hi·ªÉn th·ªã: <code>demo-token-for-docs-only</code></p>
                <p>Li√™n h·ªá t√°c gi·∫£ ƒë·ªÉ l·∫•y token th·∫≠t n·∫øu c·∫ßn s·ª≠ d·ª•ng API.</p>
            </div>
            
            <div class="api-info">
                <h3>üîê X√°c th·ª±c</h3>
                <p>T·∫•t c·∫£ API endpoints y√™u c·∫ßu Bearer Token trong header:</p>
                <code>Authorization: Bearer YOUR_TOKEN</code>
            </div>
            
            <div class="endpoint">
                <h4>GET /health</h4>
                <p>Ki·ªÉm tra tr·∫°ng th√°i API</p>
            </div>
            
            <div class="endpoint">
                <h4>POST /extract-article</h4>
                <p>L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt</p>
            </div>
            
            <div class="endpoint">
                <h4>POST /extract-source</h4>
                <p>L·∫•y nhi·ªÅu b√†i vi·∫øt t·ª´ m·ªôt trang tin t·ª©c</p>
            </div>
            
            <div class="endpoint">
                <h4>POST /parse-feed</h4>
                <p>Ph√¢n t√≠ch RSS feed</p>
            </div>
            
            <p style="text-align: center; margin-top: 30px;">
                <a href="/docs" class="btn">üìö Xem API Documentation</a>
                <a href="https://www.youtube.com/@kalvinthiensocial?sub_confirmation=1" class="btn" target="_blank">üîî ƒêƒÉng k√Ω YouTube</a>
            </p>
            
            <div style="text-align: center; margin-top: 30px; color: #666;">
                <p>¬© 2024 News API by Nguy·ªÖn Ng·ªçc Thi·ªán ‚Ä¢ Made with ‚ù§Ô∏è in Vietnam</p>
            </div>
        </body>
    </html>
    """

@app.get("/health")
async def health_check():
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "version": "1.0.0",
        "author": "Nguy·ªÖn Ng·ªçc Thi·ªán",
        "youtube": "@kalvinthiensocial",
        "contact": "Zalo: 08.8888.4749",
        "features": ["article_extraction", "source_crawling", "rss_parsing"]
    }

@app.post("/extract-article")
async def extract_article(
    request: ArticleRequest,
    credentials: HTTPAuthorizationCredentials = Depends(verify_token)
):
    """L·∫•y n·ªôi dung chi ti·∫øt c·ªßa m·ªôt b√†i vi·∫øt"""
    
    article_data = safe_extract_content(
        str(request.url),
        request.language
    )
    
    if not article_data["success"]:
        raise HTTPException(status_code=400, detail=f"Kh√¥ng th·ªÉ l·∫•y n·ªôi dung: {article_data.get('error')}")
    
    # L·ªçc d·ªØ li·ªáu theo y√™u c·∫ßu
    if not request.extract_images:
        article_data.pop("images", None)
        article_data.pop("top_image", None)
    
    if not request.summarize:
        article_data.pop("summary", None)
        article_data.pop("keywords", None)
    
    return article_data

if __name__ == "__main__":
    import uvicorn
    print(f"üöÄ Kh·ªüi ƒë·ªông News Content API t·∫°i http://{API_HOST}:{API_PORT}")
    print(f"üìö T√†i li·ªáu API: http://{API_HOST}:{API_PORT}/docs")
    print(f"üë®‚Äçüíª T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán")
    print(f"üì∫ YouTube: @kalvinthiensocial")
    
    uvicorn.run(
        "main:app",
        host=API_HOST,
        port=API_PORT,
        reload=False,
        workers=1
    )
EOF

    # T·∫°o systemd service cho News API
    cat << EOF > /etc/systemd/system/news-api.service
[Unit]
Description=News Content API Service by Nguy·ªÖn Ng·ªçc Thi·ªán
Documentation=https://www.youtube.com/@kalvinthiensocial
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$N8N_DIR/news_api
Environment=NEWS_API_TOKEN=$NEWS_API_TOKEN
Environment=NEWS_API_HOST=0.0.0.0
Environment=NEWS_API_PORT=8001
ExecStart=$N8N_DIR/news_api/venv/bin/python $N8N_DIR/news_api/main.py
Restart=always
RestartSec=10
StandardOutput=journal
StandardError=journal

[Install]
WantedBy=multi-user.target
EOF

    # ƒê·∫∑t quy·ªÅn cho c√°c file
    chmod +x $N8N_DIR/news_api/main.py
    
    # Kh·ªüi ƒë·ªông service
    systemctl daemon-reload
    systemctl enable news-api
    
    # Ki·ªÉm tra port 8001 c√≥ b·ªã xung ƒë·ªôt kh√¥ng
    if netstat -tuln | grep -q ":8001\s"; then
        echo "‚ö†Ô∏è C·ªïng 8001 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng. D·ª´ng service c≈©..."
        systemctl stop news-api 2>/dev/null || true
        sleep 2
    fi
    
    systemctl start news-api
    
    # ƒê·ª£i service kh·ªüi ƒë·ªông
    echo "‚è≥ ƒê·ª£i News API kh·ªüi ƒë·ªông..."
    sleep 5
    
    # Ki·ªÉm tra status
    if systemctl is-active --quiet news-api; then
        echo "‚úÖ News API ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng"
    else
        echo "‚ùå News API kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c"
        echo "üìã Ki·ªÉm tra logs: journalctl -u news-api -f"
    fi
    
    echo "‚úÖ News API setup ho√†n t·∫•t"
fi 

# ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n
echo "ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n..."
chown -R 1000:1000 $N8N_DIR
chmod -R 755 $N8N_DIR

# Kh·ªüi ƒë·ªông c√°c container
echo "Kh·ªüi ƒë·ªông c√°c container..."
echo "L∆∞u √Ω: Qu√° tr√¨nh build image c√≥ th·ªÉ m·∫•t v√†i ph√∫t, vui l√≤ng ƒë·ª£i..."
cd $N8N_DIR

# Ki·ªÉm tra c·ªïng 80 ch·ªâ trong domain mode
if [ "$DOMAIN_MODE" = "domain" ]; then
    if netstat -tuln | grep -q ":80\s"; then
        echo "C·∫¢NH B√ÅO: C·ªïng 80 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi m·ªôt ·ª©ng d·ª•ng kh√°c."
    else
        echo "C·ªïng 80 ƒëang tr·ªëng. Caddy s·∫Ω s·ª≠ d·ª•ng c·ªïng 80 cho HTTP."
    fi
fi

# Build v√† kh·ªüi ƒë·ªông containers v·ªõi docker compose
echo "üî® B·∫Øt ƒë·∫ßu build Docker image..."
BUILD_OUTPUT=$(docker compose build 2>&1)
BUILD_EXIT_CODE=$?

if [ $BUILD_EXIT_CODE -ne 0 ]; then
    echo "‚ùå L·ªói build Docker image:"
    echo "$BUILD_OUTPUT"
    echo ""
    echo "C√≥ th·ªÉ th·ª≠ c√°c c√°ch kh·∫Øc ph·ª•c sau:"
    echo "1. Ch·∫°y l·∫°i script n√†y"
    echo "2. Ki·ªÉm tra k·∫øt n·ªëi internet"
    echo "3. Gi·∫£i ph√≥ng dung l∆∞·ª£ng disk"
    exit 1
else
    echo "‚úÖ Build Docker image th√†nh c√¥ng!"
fi

echo "üöÄ Kh·ªüi ƒë·ªông containers..."
START_OUTPUT=$(docker compose up -d --remove-orphans 2>&1)
START_EXIT_CODE=$?

if [ $START_EXIT_CODE -ne 0 ]; then
    echo "‚ùå L·ªói kh·ªüi ƒë·ªông containers:"
    echo "$START_OUTPUT"
    exit 1
else
    echo "‚úÖ Containers ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông!"
fi

# ƒê·ª£i containers kh·ªüi ƒë·ªông ho√†n to√†n
echo "‚è≥ ƒê·ª£i containers kh·ªüi ƒë·ªông ho√†n to√†n (30 gi√¢y)..."
sleep 30

# Ki·ªÉm tra c√°c container ƒë√£ ch·∫°y ch∆∞a
echo "üîç Ki·ªÉm tra tr·∫°ng th√°i containers..."

# Ki·ªÉm tra container N8N
N8N_RUNNING=$(docker ps --filter "name=n8n" --format "{{.Names}}" 2>/dev/null)
if [ -n "$N8N_RUNNING" ]; then
    N8N_STATUS=$(docker ps --filter "name=n8n" --format "{{.Status}}" 2>/dev/null)
    echo "‚úÖ Container N8N: $N8N_RUNNING - $N8N_STATUS"
else
    echo "‚ùå Container N8N: Kh√¥ng ch·∫°y ho·∫∑c l·ªói kh·ªüi ƒë·ªông"
    echo "üìã Ki·ªÉm tra logs N8N:"
    echo "   docker compose logs n8n"
    echo ""
fi

# Ki·ªÉm tra container Caddy (ch·ªâ trong domain mode)
if [ "$DOMAIN_MODE" = "domain" ]; then
    CADDY_RUNNING=$(docker ps --filter "name=caddy" --format "{{.Names}}" 2>/dev/null)
    if [ -n "$CADDY_RUNNING" ]; then
        CADDY_STATUS=$(docker ps --filter "name=caddy" --format "{{.Status}}" 2>/dev/null)
        echo "‚úÖ Container Caddy: $CADDY_RUNNING - $CADDY_STATUS"
    else
        echo "‚ùå Container Caddy: Kh√¥ng ch·∫°y ho·∫∑c l·ªói kh·ªüi ƒë·ªông"
        echo "üìã Ki·ªÉm tra logs Caddy:"
        echo "   docker compose logs caddy"
        echo ""
    fi
fi

# Ki·ªÉm tra FFmpeg, yt-dlp v√† Puppeteer trong container n8n
echo "Ki·ªÉm tra FFmpeg, yt-dlp v√† Puppeteer trong container n8n..."

N8N_CONTAINER=$(docker ps -q --filter "name=n8n" 2>/dev/null)
if [ -n "$N8N_CONTAINER" ]; then
    if docker exec $N8N_CONTAINER ffmpeg -version &> /dev/null; then
        echo "‚úÖ FFmpeg ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
    else
        echo "‚ö†Ô∏è FFmpeg c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch trong container."
    fi

    if docker exec $N8N_CONTAINER yt-dlp --version &> /dev/null; then
        echo "‚úÖ yt-dlp ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
    else
        echo "‚ö†Ô∏è yt-dlp c√≥ th·ªÉ ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch trong container."
    fi
    
    # Ki·ªÉm tra tr·∫°ng th√°i Puppeteer t·ª´ file status
    PUPPETEER_STATUS=$(docker exec $N8N_CONTAINER cat /files/puppeteer_status.txt 2>/dev/null || echo "Puppeteer: UNKNOWN")
    
    if [[ "$PUPPETEER_STATUS" == *"AVAILABLE"* ]]; then
        echo "‚úÖ Puppeteer/Chromium ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng trong container n8n."
    else
        echo "‚ö†Ô∏è Puppeteer/Chromium c√†i ƒë·∫∑t kh√¥ng th√†nh c√¥ng ho·∫∑c kh√¥ng kh·∫£ d·ª•ng."
        echo "   C√°c t√≠nh nƒÉng t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát s·∫Ω kh√¥ng ho·∫°t ƒë·ªông."
        echo "   H·ªá th·ªëng v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng v·ªõi c√°c t√≠nh nƒÉng kh√°c."
    fi
else
    echo "‚ö†Ô∏è Kh√¥ng th·ªÉ ki·ªÉm tra c√¥ng c·ª• ngay l√∫c n√†y. Container n8n ch∆∞a s·∫µn s√†ng."
fi

# T·∫°o script c·∫≠p nh·∫≠t t·ª± ƒë·ªông
echo "T·∫°o script c·∫≠p nh·∫≠t t·ª± ƒë·ªông..."
cat << EOF > $N8N_DIR/update-n8n.sh
#!/bin/bash

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c n8n
N8N_DIR="$N8N_DIR"

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" >> \$N8N_DIR/update.log
}

log "B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫≠p nh·∫≠t..."

# C·∫≠p nh·∫≠t yt-dlp tr√™n host
log "C·∫≠p nh·∫≠t yt-dlp tr√™n host system..."
if command -v pipx &> /dev/null; then
    pipx upgrade yt-dlp
elif [ -d "/opt/yt-dlp-venv" ]; then
    /opt/yt-dlp-venv/bin/pip install -U yt-dlp
else
    log "Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t yt-dlp ƒë√£ bi·∫øt"
fi

# L·∫•y phi√™n b·∫£n hi·ªán t·∫°i
CURRENT_IMAGE_ID=\$(docker images -q n8n-ffmpeg-latest)
if [ -z "\$CURRENT_IMAGE_ID" ]; then
    log "Kh√¥ng t√¨m th·∫•y image n8n-ffmpeg-latest"
    exit 1
fi

# Ki·ªÉm tra v√† x√≥a image g·ªëc n8nio/n8n c≈© n·∫øu c·∫ßn
OLD_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Pull image g·ªëc m·ªõi nh·∫•t
log "K√©o image n8nio/n8n m·ªõi nh·∫•t"
docker pull n8nio/n8n

# L·∫•y image ID m·ªõi
NEW_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Ki·ªÉm tra xem image g·ªëc ƒë√£ thay ƒë·ªïi ch∆∞a
if [ "\$NEW_BASE_IMAGE_ID" != "\$OLD_BASE_IMAGE_ID" ]; then
    log "Ph√°t hi·ªán image m·ªõi (\${NEW_BASE_IMAGE_ID}), ti·∫øn h√†nh c·∫≠p nh·∫≠t..."
    
    # Sao l∆∞u d·ªØ li·ªáu n8n
    BACKUP_DATE=\$(date '+%Y%m%d_%H%M%S')
    BACKUP_FILE="\$N8N_DIR/backup_\${BACKUP_DATE}.zip"
    log "T·∫°o b·∫£n sao l∆∞u t·∫°i \$BACKUP_FILE"
    zip -r \$BACKUP_FILE \$N8N_DIR -x \$N8N_DIR/update-n8n.sh -x \$N8N_DIR/backup_* -x \$N8N_DIR/files/temp/* -x \$N8N_DIR/Dockerfile -x \$N8N_DIR/docker-compose.yml
    
    # Build l·∫°i image n8n-ffmpeg
    cd \$N8N_DIR
    log "ƒêang build l·∫°i image n8n-ffmpeg-latest..."
    docker compose build
    
    # Kh·ªüi ƒë·ªông l·∫°i container
    log "Kh·ªüi ƒë·ªông l·∫°i container..."
    docker compose down
    docker compose up -d
    
    log "C·∫≠p nh·∫≠t ho√†n t·∫•t, phi√™n b·∫£n m·ªõi: \${NEW_BASE_IMAGE_ID}"
else
    log "Kh√¥ng c√≥ c·∫≠p nh·∫≠t m·ªõi cho n8n"
    
    # C·∫≠p nh·∫≠t yt-dlp trong container
    log "C·∫≠p nh·∫≠t yt-dlp trong container n8n..."
    N8N_CONTAINER=\$(docker ps -q --filter "name=n8n" 2>/dev/null)
    if [ -n "\$N8N_CONTAINER" ]; then
        docker exec -u root \$N8N_CONTAINER pip3 install --break-system-packages -U yt-dlp
        log "yt-dlp ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng trong container"
    else
        log "Kh√¥ng t√¨m th·∫•y container n8n ƒëang ch·∫°y"
    fi
fi
EOF

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho script c·∫≠p nh·∫≠t
chmod +x $N8N_DIR/update-n8n.sh

# T·∫°o script kh·∫Øc ph·ª•c s·ª± c·ªë
echo "T·∫°o script kh·∫Øc ph·ª•c s·ª± c·ªë..."
cat << 'EOF' > $N8N_DIR/troubleshoot.sh
#!/bin/bash

# Script kh·∫Øc ph·ª•c s·ª± c·ªë N8N
echo "üîß SCRIPT KH·∫ÆC PH·ª§C S·ª∞ C·ªê N8N"
echo "================================"

N8N_DIR="$(dirname "$0")"
cd "$N8N_DIR"

echo "1. Ki·ªÉm tra tr·∫°ng th√°i containers..."
echo "=================================="
docker ps --filter "name=n8n" --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"
echo ""

echo "2. Ki·ªÉm tra logs containers..."
echo "============================="
echo ">> N8N Logs (10 d√≤ng cu·ªëi):"
docker compose logs --tail=10 n8n 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y logs N8N"
echo ""

if [ -f "Caddyfile" ]; then
    echo ">> Caddy Logs (10 d√≤ng cu·ªëi):"
    docker compose logs --tail=10 caddy 2>/dev/null || echo "Kh√¥ng th·ªÉ l·∫•y logs Caddy"
    echo ""
fi

echo "3. Ki·ªÉm tra network connectivity..."
echo "==================================="
echo ">> Ki·ªÉm tra c·ªïng 5678 (N8N internal):"
docker exec $(docker ps -q --filter "name=n8n" | head -1) netstat -tuln | grep :5678 2>/dev/null || echo "N8N port kh√¥ng listening"
echo ""

echo "4. Ki·ªÉm tra disk space..."
echo "========================"
df -h | head -1
df -h | grep -E '(/$|/var|/home)'
echo ""

echo "5. C√°c l·ªánh kh·∫Øc ph·ª•c th∆∞·ªùng d√πng:"
echo "================================="
echo "‚Ä¢ Restart containers:"
echo "  docker compose restart"
echo ""
echo "‚Ä¢ Rebuild containers:"
echo "  docker compose down && docker compose up -d --build"
echo ""
echo "‚Ä¢ Xem logs realtime:"
echo "  docker compose logs -f"
echo ""
echo "‚Ä¢ Ki·ªÉm tra resources:"
echo "  docker stats --no-stream"
echo ""

read -p "B·∫°n c√≥ mu·ªën restart containers ngay b√¢y gi·ªù? (y/n): " RESTART_CHOICE
if [ "$RESTART_CHOICE" = "y" ] || [ "$RESTART_CHOICE" = "Y" ]; then
    echo "üîÑ ƒêang restart containers..."
    docker compose restart
    echo "‚úÖ Ho√†n t·∫•t restart. ƒê·ª£i 30 gi√¢y ƒë·ªÉ containers kh·ªüi ƒë·ªông..."
    sleep 30
    echo "Tr·∫°ng th√°i sau khi restart:"
    docker ps --filter "name=n8n"
fi
EOF

chmod +x $N8N_DIR/troubleshoot.sh

# T·∫°o cron job ƒë·ªÉ ch·∫°y m·ªói 12 gi·ªù
echo "Thi·∫øt l·∫≠p cron job c·∫≠p nh·∫≠t t·ª± ƒë·ªông m·ªói 12 gi·ªù v√† sao l∆∞u h√†ng ng√†y..."
UPDATE_CRON="0 */12 * * * $N8N_DIR/update-n8n.sh"
BACKUP_CRON="0 2 * * * $N8N_DIR/backup-workflows.sh"
(crontab -l 2>/dev/null | grep -v "update-n8n.sh\|backup-workflows.sh"; echo "$UPDATE_CRON"; echo "$BACKUP_CRON") | crontab -

# Danh s√°ch c√°c th√†nh ph·∫ßn th·∫•t b·∫°i
FAILED_COMPONENTS=()

# Ki·ªÉm tra tr·∫°ng th√°i News API
if [ "$SETUP_NEWS_API" = "y" ]; then
    if systemctl is-active --quiet news-api; then
        NEWS_API_STATUS="‚úÖ ƒêang ch·∫°y"
    else
        NEWS_API_STATUS="‚ùå L·ªói kh·ªüi ƒë·ªông"
        FAILED_COMPONENTS+=("News API")
    fi
fi

# Ki·ªÉm tra tr·∫°ng th√°i Puppeteer
PUPPETEER_INSTALL_STATUS="‚ùå L·ªói c√†i ƒë·∫∑t"
N8N_CONTAINER_CHECK=$(docker ps -q --filter "name=n8n" 2>/dev/null)
if [ -n "$N8N_CONTAINER_CHECK" ]; then
    PUPPETEER_STATUS_CHECK=$(docker exec $N8N_CONTAINER_CHECK cat /files/puppeteer_status.txt 2>/dev/null || echo "Puppeteer: UNKNOWN")
    if [[ "$PUPPETEER_STATUS_CHECK" == *"AVAILABLE"* ]]; then
        PUPPETEER_INSTALL_STATUS="‚úÖ Kh·∫£ d·ª•ng"
    else
        PUPPETEER_INSTALL_STATUS="‚ö†Ô∏è Kh√¥ng kh·∫£ d·ª•ng"
        FAILED_COMPONENTS+=("Puppeteer/Chromium")
    fi
fi

echo "======================================================================"
echo "üéâ N8N ƒê√É ƒê∆Ø·ª¢C C√ÄI ƒê·∫∂T V√Ä C·∫§U H√åNH TH√ÄNH C√îNG!"
echo "======================================================================"
echo ""

if [ "$DOMAIN_MODE" = "localhost" ]; then
    echo "üè† TRUY C·∫¨P N8N (LOCALHOST MODE):"
    echo "  - URL truy c·∫≠p: http://localhost:5678"
    echo "  - Kh√¥ng c·∫ßn SSL, ph√π h·ª£p cho: Development, WSL, testing"
else
    echo "üåê TRUY C·∫¨P N8N (DOMAIN MODE):"
    echo "  - URL ch√≠nh: https://${DOMAIN}"
    echo "  - SSL: T·ª± ƒë·ªông v·ªõi Let's Encrypt"
    echo "  - Ph√π h·ª£p cho: Production, server VPS"
fi
echo ""

# Hi·ªÉn th·ªã th√¥ng tin v·ªÅ swap
if [ "$(swapon --show | wc -l)" -gt 0 ]; then
    SWAP_SIZE=$(free -h | grep Swap | awk '{print $2}')
    echo "üíæ TH√îNG TIN SWAP:"
    echo "  - K√≠ch th∆∞·ªõc: ${SWAP_SIZE}"
    echo "  - Swappiness: $(cat /proc/sys/vm/swappiness) (M·ª©c c√†ng th·∫•p c√†ng ∆∞u ti√™n d√πng RAM)"
    echo "  - Vfs_cache_pressure: $(cat /proc/sys/vm/vfs_cache_pressure) (M·ª©c c√†ng th·∫•p c√†ng gi·ªØ cache l√¢u h∆°n)"
    echo ""
fi

echo "üìÅ TH√îNG TIN H·ªÜ TH·ªêNG:"
echo "  - Th∆∞ m·ª•c c√†i ƒë·∫∑t: $N8N_DIR"
echo "  - Container runtime: Docker"
if [ "$DOMAIN_MODE" = "domain" ]; then
    echo "  - Reverse proxy: Caddy (t·ª± ƒë·ªông SSL)"
    echo "  - SSL: Let's Encrypt"
else
    echo "  - Ch·∫ø ƒë·ªô: Localhost (kh√¥ng SSL)"
fi
echo ""

echo "üîÑ T√çNH NƒÇNG T·ª∞ ƒê·ªòNG C·∫¨P NH·∫¨T:"
echo "  - Ki·ªÉm tra c·∫≠p nh·∫≠t: M·ªói 12 gi·ªù"
echo "  - Log c·∫≠p nh·∫≠t: $N8N_DIR/update.log"
echo "  - T·ª± ƒë·ªông sao l∆∞u tr∆∞·ªõc khi c·∫≠p nh·∫≠t"
echo "  - T·ª± ƒë·ªông c·∫≠p nh·∫≠t yt-dlp v√† c√°c c√¥ng c·ª•"
echo ""

echo "üíæ T√çNH NƒÇNG SAO L∆ØU T·ª∞ ƒê·ªòNG:"
echo "  - L·ªãch sao l∆∞u: H√†ng ng√†y l√∫c 2:00 AM"
echo "  - Th∆∞ m·ª•c backup: $N8N_DIR/files/backup_full/"
echo "  - Lo·∫°i d·ªØ li·ªáu: Workflows, Credentials, Database"
echo "  - Gi·ªØ l·∫°i: 30 b·∫£n sao l∆∞u g·∫ßn nh·∫•t"
echo "  - Log backup: $N8N_DIR/files/backup_full/backup.log"

if [ "$SETUP_TELEGRAM" = "y" ]; then
    echo "  - üì± Telegram: T·ª± ƒë·ªông g·ª≠i backup qua Telegram"
fi
echo ""

if [ "$SETUP_TELEGRAM" = "y" ]; then
    echo "üì± C·∫§U H√åNH TELEGRAM BACKUP:"
    echo "  - Tr·∫°ng th√°i: ‚úÖ ƒê√£ k√≠ch ho·∫°t"
    echo "  - File c·∫•u h√¨nh: $N8N_DIR/telegram_config.txt"
    echo "  - Ch·ª©c nƒÉng: T·ª± ƒë·ªông g·ª≠i file backup qua Telegram"
    echo ""
fi

if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "üì∞ NEWS CONTENT API:"
    if [ "$DOMAIN_MODE" = "domain" ]; then
        echo "  - URL API: https://api.${DOMAIN}"
        echo "  - Docs/Testing: https://api.${DOMAIN}/docs"
    else
        echo "  - URL API: http://localhost:8001"
        echo "  - Docs/Testing: http://localhost:8001/docs"
    fi
    echo "  - Bearer Token: ********** (·∫©n ƒë·ªÉ b·∫£o m·∫≠t)"
    echo "  - Token ƒë∆∞·ª£c l∆∞u trong env vars"
    echo "  - Tr·∫°ng th√°i: $NEWS_API_STATUS"
    echo "  - Ch·ª©c nƒÉng: L·∫•y n·ªôi dung tin t·ª©c v·ªõi Newspaper4k"
    echo ""
    echo "  üìã C√ÅCH S·ª¨ D·ª§NG NEWS API TRONG N8N:"
    echo "  1. T·∫°o HTTP Request node trong workflow"
    echo "  2. Method: POST"
    if [ "$DOMAIN_MODE" = "domain" ]; then
        echo "  3. URL: https://api.${DOMAIN}/extract-article"
    else
        echo "  3. URL: http://localhost:8001/extract-article"
    fi
    echo "  4. Headers: Authorization: Bearer [TOKEN_ƒê∆Ø·ª¢C_C·∫§U_H√åNH]"
    echo "  5. Body: {\"url\": \"https://example.com/news-article\"}"
    echo ""
fi

echo "üì∫ TH√îNG TIN C√îNG C·ª§ T√çCH H·ª¢P:"
echo "  - FFmpeg: ‚úÖ X·ª≠ l√Ω video/audio"
echo "  - yt-dlp: ‚úÖ T·∫£i video YouTube"
echo "  - Puppeteer: $PUPPETEER_INSTALL_STATUS"
echo "  - Chromium: $PUPPETEER_INSTALL_STATUS"
echo "  - Th∆∞ m·ª•c video: $N8N_DIR/files/youtube_content_anylystic/"
echo ""

echo "üõ†Ô∏è L·ªÜNH QU·∫¢N L√ù H·ªÜ TH·ªêNG:"
echo "  - üîß Kh·∫Øc ph·ª•c s·ª± c·ªë: $N8N_DIR/troubleshoot.sh"
echo "  - üìã Xem logs N8N: cd $N8N_DIR && docker compose logs -f n8n"
echo "  - üîÑ Restart N8N: cd $N8N_DIR && docker compose restart"
echo "  - üíæ Backup th·ªß c√¥ng: $N8N_DIR/backup-workflows.sh"
echo "  - üîÑ C·∫≠p nh·∫≠t th·ªß c√¥ng: $N8N_DIR/update-n8n.sh"
echo "  - üèóÔ∏è  Rebuild containers: cd $N8N_DIR && docker compose down && docker compose up -d --build"

if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - üîÑ Restart News API: systemctl restart news-api"
    echo "  - üìã Xem logs News API: journalctl -u news-api -f"
fi
echo ""

# Hi·ªÉn th·ªã c·∫£nh b√°o n·∫øu c√≥ th√†nh ph·∫ßn th·∫•t b·∫°i
if [ ${#FAILED_COMPONENTS[@]} -gt 0 ]; then
    echo "‚ö†Ô∏è  C√ÅC TH√ÄNH PH·∫¶N C√ÄI ƒê·∫∂T KH√îNG TH√ÄNH C√îNG:"
    for component in "${FAILED_COMPONENTS[@]}"; do
        echo "  - ‚ùå $component"
    done
    echo ""
    echo "üìû B·∫°n c√≥ th·ªÉ ch·∫°y l·∫°i script ho·∫∑c c√†i ƒë·∫∑t th·ªß c√¥ng c√°c th√†nh ph·∫ßn n√†y."
    echo ""
fi

echo "üìö T√ÄI LI·ªÜU THAM KH·∫¢O:"
echo "  - N8N Documentation: https://docs.n8n.io/"
echo "  - N8N Community: https://community.n8n.io/"
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - Newspaper4k: https://newspaper4k.readthedocs.io/"
fi
echo ""

echo "üîí L∆ØU √ù B·∫¢O M·∫¨T V√Ä H·ªÜ TH·ªêNG:"
echo "  - ƒê·ªïi m·∫≠t kh·∫©u ƒëƒÉng nh·∫≠p N8N sau khi truy c·∫≠p l·∫ßn ƒë·∫ßu"
echo "  - Backup ƒë·ªãnh k·ª≥ c√°c workflow quan tr·ªçng"
echo "  - Gi√°m s√°t logs h·ªá th·ªëng th∆∞·ªùng xuy√™n"
if [ "$SETUP_NEWS_API" = "y" ]; then
    echo "  - Bearer Token ƒë∆∞·ª£c ·∫©n v√† l∆∞u trong system environment"
fi
if [ "$DOMAIN_MODE" = "domain" ]; then
    echo "  - ƒê·∫£m b·∫£o domain ƒë∆∞·ª£c c·∫•u h√¨nh DNS ƒë√∫ng"
    echo "  - SSL certificate s·∫Ω t·ª± ƒë·ªông gia h·∫°n"
fi

# Th√¥ng b√°o ƒë·∫∑c bi·ªát v·ªÅ Puppeteer n·∫øu kh√¥ng kh·∫£ d·ª•ng
if [[ "$PUPPETEER_INSTALL_STATUS" == *"Kh√¥ng kh·∫£ d·ª•ng"* ]] || [[ "$PUPPETEER_INSTALL_STATUS" == *"L·ªói c√†i ƒë·∫∑t"* ]]; then
    echo ""
    echo "‚ö†Ô∏è  TH√îNG B√ÅO V·ªÄ PUPPETEER:"
    echo "  - Puppeteer/Chromium kh√¥ng c√†i ƒë·∫∑t th√†nh c√¥ng"
    echo "  - C√°c workflow s·ª≠ d·ª•ng t·ª± ƒë·ªông h√≥a tr√¨nh duy·ªát s·∫Ω kh√¥ng ho·∫°t ƒë·ªông"
    echo "  - T·∫•t c·∫£ t√≠nh nƒÉng kh√°c c·ªßa N8N v·∫´n ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng"
    echo "  - B·∫°n c√≥ th·ªÉ th·ª≠ c√†i ƒë·∫∑t l·∫°i b·∫±ng c√°ch ch·∫°y script m·ªôt l·∫ßn n·ªØa"
fi
echo ""

if [ "$DOMAIN_MODE" = "localhost" ]; then
    echo "‚è±Ô∏è  L∆ØU √ù LOCALHOST MODE:"
    echo "  - N8N c√≥ th·ªÉ c·∫ßn 2-3 ph√∫t ƒë·ªÉ kh·ªüi ƒë·ªông ho√†n to√†n"
    echo "  - Truy c·∫≠p qua http://localhost:5678"
    echo "  - Ph√π h·ª£p cho development v√† testing"
    echo "  - ƒê·ªÉ chuy·ªÉn sang domain mode, ch·∫°y l·∫°i script m√† kh√¥ng d√πng --localhost"
else
    echo "‚è±Ô∏è  L∆ØU √ù DOMAIN MODE:"
    echo "  - N8N c√≥ th·ªÉ c·∫ßn 2-3 ph√∫t ƒë·ªÉ kh·ªüi ƒë·ªông ho√†n to√†n"
    echo "  - SSL certificate t·ª± ƒë·ªông c√≥ th·ªÉ m·∫•t 5-10 ph√∫t ƒë·ªÉ c·∫•u h√¨nh"
    echo "  - N·∫øu kh√¥ng truy c·∫≠p ƒë∆∞·ª£c, h√£y ki·ªÉm tra logs v√† DNS"
    echo "  - ƒê·ªÉ chuy·ªÉn sang localhost mode, ch·∫°y l·∫°i script v·ªõi --localhost"
fi
echo ""

echo "üë®‚Äçüíª TH√îNG TIN T√ÅC GI·∫¢:"
echo "  - T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán"
echo "  - üì∫ YouTube: https://www.youtube.com/@kalvinthiensocial"
echo "  - üé¨ Playlist N8N: https://www.youtube.com/@kalvinthiensocial/playlists"
echo "  - üì± Facebook: https://www.facebook.com/Ban.Thien.Handsome/"
echo "  - üìû Zalo/SƒêT: 08.8888.4749"
echo "  - üîî H√£y ƒëƒÉng k√Ω k√™nh YouTube ƒë·ªÉ ·ªßng h·ªô t√°c gi·∫£!"
echo ""
echo "======================================================================"
echo "üéØ C√ÄI ƒê·∫∂T HO√ÄN T·∫§T! CH√öC B·∫†N S·ª¨ D·ª§NG N8N HI·ªÜU QU·∫¢!"
echo "======================================================================" 
