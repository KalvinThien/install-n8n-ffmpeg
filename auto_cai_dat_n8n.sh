#!/bin/bash

# Script c√†i ƒë·∫∑t N8N t·ª± ƒë·ªông v·ªõi ZeroSSL v√† Google Drive Backup
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán
# YouTube: https://www.youtube.com/@kalvinthiensocial
# C·∫≠p nh·∫≠t: 30/06/2025

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Bi·∫øn to√†n c·ª•c
SCRIPT_DIR="/tmp"
N8N_DIR="/home/n8n"
DOMAIN=""
API_DOMAIN=""
USE_DOMAIN="true"
NEWS_API_ENABLED="false"
TELEGRAM_BACKUP_ENABLED="false"
GDRIVE_BACKUP_ENABLED="false"
AUTO_UPDATE_ENABLED="false"
BEARER_TOKEN=""
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""
GDRIVE_SERVICE_ACCOUNT=""
SSL_PROVIDER="letsencrypt"

# Logging
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    log "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

# Header
show_header() {
    clear
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    üöÄ SCRIPT C√ÄI ƒê·∫∂T N8N T·ª∞ ƒê·ªòNG 2025 üöÄ                    ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë ‚ú® N8N + FFmpeg + yt-dlp + Puppeteer + News API + Telegram Backup        ‚ïë
‚ïë üîí SSL Certificate t·ª± ƒë·ªông v·ªõi Let's Encrypt & ZeroSSL                   ‚ïë
‚ïë üì∞ News Content API v·ªõi FastAPI + Newspaper4k                            ‚ïë
‚ïë üì± Telegram Backup t·ª± ƒë·ªông h√†ng ng√†y                                     ‚ïë
‚ïë ‚òÅÔ∏è  Google Drive Backup v·ªõi Service Account                              ‚ïë
‚ïë üîÑ Auto-Update v·ªõi t√πy ch·ªçn                                              ‚ïë
‚ïë üè† Localhost mode cho m√°y ·∫£o                                             ‚ïë
‚ï†‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ï£
‚ïë üë®‚Äçüíª T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán                                           ‚ïë
‚ïë üì∫ YouTube: https://www.youtube.com/@kalvinthiensocial                  ‚ïë
‚ïë üì± Zalo: 08.8888.4749                                                   ‚ïë
‚ïë üé¨ ƒêƒÉng k√Ω k√™nh ƒë·ªÉ ·ªßng h·ªô m√¨nh nh√©! üîî                                  ‚ïë
‚ïë üìÖ C·∫≠p nh·∫≠t: 30/06/2025                                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
}

# Ki·ªÉm tra quy·ªÅn root
check_root() {
    if [[ $EUID -ne 0 ]]; then
        log_error "Script n√†y c·∫ßn ch·∫°y v·ªõi quy·ªÅn root!"
        exit 1
    fi
}

# Ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh
detect_os() {
    if [[ -f /etc/os-release ]]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        log_error "Kh√¥ng th·ªÉ ph√°t hi·ªán h·ªá ƒëi·ªÅu h√†nh"
        exit 1
    fi
    
    log_info "H·ªá ƒëi·ªÅu h√†nh: $OS $VER"
}

# Thi·∫øt l·∫≠p swap
setup_swap() {
    log_info "üîÑ Thi·∫øt l·∫≠p swap memory..."
    
    if [[ -f /swapfile ]]; then
        log_info "Swap file ƒë√£ t·ªìn t·∫°i"
        return
    fi
    
    # T·∫°o swap 2GB
    fallocate -l 2G /swapfile
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    
    # Th√™m v√†o fstab
    if ! grep -q "/swapfile" /etc/fstab; then
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
    fi
    
    log_success "ƒê√£ thi·∫øt l·∫≠p swap 2GB"
}

# C·∫•u h√¨nh domain
configure_domain() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üåê C·∫§U H√åNH DOMAIN                                ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${YELLOW}üè† B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t v·ªõi domain (SSL) hay localhost? (D/l):${NC}"
    echo -e "   ${GREEN}D${NC} - S·ª≠ d·ª•ng domain v·ªõi SSL certificate"
    echo -e "   ${GREEN}l${NC} - Localhost mode (kh√¥ng c·∫ßn domain/SSL)"
    echo ""
    read -p "L·ª±a ch·ªçn (D/l): " domain_choice
    
    case $domain_choice in
        [Ll]*)
            USE_DOMAIN="false"
            log_info "Ch·∫ø ƒë·ªô localhost ƒë∆∞·ª£c ch·ªçn"
            ;;
        *)
            USE_DOMAIN="true"
            echo ""
            echo -e "${CYAN}üåê Nh·∫≠p domain ch√≠nh cho N8N (v√≠ d·ª•: n8n.example.com):${NC}"
            read -p "Domain: " DOMAIN
            
            if [[ -z "$DOMAIN" ]]; then
                log_error "Domain kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!"
                exit 1
            fi
            
            API_DOMAIN="api.$DOMAIN"
            log_info "Domain N8N: $DOMAIN"
            log_info "Domain API: $API_DOMAIN"
            ;;
    esac
}

# Ki·ªÉm tra DNS
check_dns() {
    if [[ "$USE_DOMAIN" == "false" ]]; then
        return 0
    fi
    
    log_info "üîç Ki·ªÉm tra DNS cho domain $DOMAIN..."
    
    SERVER_IP=$(curl -s ifconfig.me || curl -s ipinfo.io/ip || curl -s icanhazip.com)
    DOMAIN_IP=$(dig +short $DOMAIN | tail -n1)
    API_DOMAIN_IP=$(dig +short $API_DOMAIN | tail -n1)
    
    log_info "IP m√°y ch·ªß: $SERVER_IP"
    log_info "IP c·ªßa $DOMAIN: $DOMAIN_IP"
    log_info "IP c·ªßa $API_DOMAIN: $API_DOMAIN_IP"
    
    if [[ "$SERVER_IP" != "$DOMAIN_IP" ]] || [[ "$SERVER_IP" != "$API_DOMAIN_IP" ]]; then
        log_warning "DNS ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng!"
        echo -e "${YELLOW}Vui l√≤ng c·∫•u h√¨nh DNS records:${NC}"
        echo -e "  A    $DOMAIN        $SERVER_IP"
        echo -e "  A    $API_DOMAIN    $SERVER_IP"
        echo ""
        read -p "Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c sau khi ƒë√£ c·∫•u h√¨nh DNS..."
    else
        log_success "DNS ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh ƒë√∫ng"
    fi
}

# Cleanup c√†i ƒë·∫∑t c≈©
cleanup_old_installation() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üóëÔ∏è  CLEANUP OPTION                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    if [[ -d "$N8N_DIR" ]]; then
        log_warning "Ph√°t hi·ªán c√†i ƒë·∫∑t N8N c≈© t·∫°i: $N8N_DIR"
        echo -e "${YELLOW}üóëÔ∏è  B·∫°n c√≥ mu·ªën x√≥a c√†i ƒë·∫∑t c≈© v√† c√†i m·ªõi? (y/N):${NC}"
        read -p "L·ª±a ch·ªçn: " cleanup_choice
        
        if [[ $cleanup_choice =~ ^[Yy]$ ]]; then
            log_info "üóëÔ∏è X√≥a c√†i ƒë·∫∑t c≈©..."
            
            # D·ª´ng containers
            cd $N8N_DIR 2>/dev/null && docker-compose down -v 2>/dev/null || true
            
            # X√≥a th∆∞ m·ª•c
            rm -rf $N8N_DIR
            
            # X√≥a cron jobs
            crontab -l 2>/dev/null | grep -v "/home/n8n" | crontab - 2>/dev/null || true
            
            log_success "ƒê√£ x√≥a c√†i ƒë·∫∑t c≈©"
        fi
    fi
}

# C√†i ƒë·∫∑t Docker
install_docker() {
    if command -v docker &> /dev/null && command -v docker-compose &> /dev/null; then
        log_info "Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return
    fi
    
    log_info "üê≥ C√†i ƒë·∫∑t Docker..."
    
    # C·∫≠p nh·∫≠t package list
    apt-get update -y
    
    # C√†i ƒë·∫∑t dependencies
    apt-get install -y \
        apt-transport-https \
        ca-certificates \
        curl \
        gnupg \
        lsb-release \
        software-properties-common \
        jq \
        zip \
        unzip \
        wget \
        git \
        htop \
        nano \
        dnsutils
    
    # Th√™m Docker GPG key
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
    
    # Th√™m Docker repository
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # C√†i ƒë·∫∑t Docker
    apt-get update -y
    apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin
    
    # C√†i ƒë·∫∑t docker-compose standalone
    curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    chmod +x /usr/local/bin/docker-compose
    
    # Kh·ªüi ƒë·ªông Docker
    systemctl enable docker
    systemctl start docker
    
    log_success "ƒê√£ c√†i ƒë·∫∑t Docker"
}

# T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
create_directory_structure() {
    log_info "üìÅ T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c..."
    
    mkdir -p $N8N_DIR/{data,scripts,backups,logs,ssl}
    mkdir -p $N8N_DIR/news-api
    mkdir -p $N8N_DIR/backups/{local,gdrive}
    
    log_success "ƒê√£ t·∫°o c·∫•u tr√∫c th∆∞ m·ª•c"
}

# C·∫•u h√¨nh News API
configure_news_api() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üì∞ NEWS CONTENT API                                 ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "News Content API cho ph√©p:"
    echo -e "  üì∞ C√†o n·ªôi dung b√†i vi·∫øt t·ª´ b·∫•t k·ª≥ website n√†o"
    echo -e "  üì° Parse RSS feeds ƒë·ªÉ l·∫•y tin t·ª©c m·ªõi nh·∫•t"
    echo -e "  üîç T√¨m ki·∫øm v√† ph√¢n t√≠ch n·ªôi dung t·ª± ƒë·ªông"
    echo -e "  ü§ñ T√≠ch h·ª£p tr·ª±c ti·∫øp v√†o N8N workflows"
    echo ""
    
    read -p "üì∞ B·∫°n c√≥ mu·ªën c√†i ƒë·∫∑t News Content API? (Y/n): " news_choice
    
    if [[ ! $news_choice =~ ^[Nn]$ ]]; then
        NEWS_API_ENABLED="true"
        
        echo ""
        echo -e "${CYAN}üîê Thi·∫øt l·∫≠p Bearer Token cho News API:${NC}"
        echo -e "  ‚Ä¢ Token c√≥ th·ªÉ ch·ª©a ch·ªØ c√°i, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"
        echo -e "  ‚Ä¢ ƒê·ªô d√†i t√πy √Ω (khuy·∫øn ngh·ªã t·ª´ 32 k√Ω t·ª± tr·ªü l√™n)"
        echo -e "  ‚Ä¢ S·∫Ω ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ x√°c th·ª±c API calls"
        echo ""
        
        while true; do
            read -s -p "üîë Nh·∫≠p Bearer Token: " BEARER_TOKEN
            echo ""
            
            if [[ ${#BEARER_TOKEN} -lt 8 ]]; then
                log_error "Token ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±!"
                continue
            fi
            
            break
        done
        
        log_success "ƒê√£ thi·∫øt l·∫≠p Bearer Token cho News API"
    fi
}

# C·∫•u h√¨nh Telegram Backup
configure_telegram_backup() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üì± TELEGRAM BACKUP                                  ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "Telegram Backup cho ph√©p:"
    echo -e "  üîÑ T·ª± ƒë·ªông backup workflows & credentials m·ªói ng√†y"
    echo -e "  üì± G·ª≠i file backup qua Telegram Bot (n·∫øu <20MB)"
    echo -e "  üìä Th√¥ng b√°o realtime v·ªÅ tr·∫°ng th√°i backup"
    echo -e "  üóÇÔ∏è Gi·ªØ 30 b·∫£n backup g·∫ßn nh·∫•t t·ª± ƒë·ªông"
    echo ""
    
    read -p "üì± B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p Telegram Backup? (Y/n): " telegram_choice
    
    if [[ ! $telegram_choice =~ ^[Nn]$ ]]; then
        TELEGRAM_BACKUP_ENABLED="true"
        
        echo ""
        echo -e "${CYAN}ü§ñ Thi·∫øt l·∫≠p Telegram Bot:${NC}"
        echo -e "  1. T·∫°o bot m·ªõi: https://t.me/BotFather"
        echo -e "  2. G·ª≠i /newbot v√† l√†m theo h∆∞·ªõng d·∫´n"
        echo -e "  3. L·∫•y Bot Token t·ª´ BotFather"
        echo ""
        
        read -p "üîë Nh·∫≠p Telegram Bot Token: " TELEGRAM_BOT_TOKEN
        
        echo ""
        echo -e "${CYAN}üí¨ L·∫•y Chat ID:${NC}"
        echo -e "  1. G·ª≠i tin nh·∫Øn cho bot v·ª´a t·∫°o"
        echo -e "  2. Truy c·∫≠p: https://api.telegram.org/bot$TELEGRAM_BOT_TOKEN/getUpdates"
        echo -e "  3. T√¨m 'chat':{'id': YOUR_CHAT_ID}"
        echo ""
        
        read -p "üÜî Nh·∫≠p Chat ID: " TELEGRAM_CHAT_ID
        
        log_success "ƒê√£ thi·∫øt l·∫≠p Telegram Backup"
    fi
}

# C·∫•u h√¨nh Google Drive Backup
configure_gdrive_backup() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚òÅÔ∏è  GOOGLE DRIVE BACKUP                             ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "Google Drive Backup cho ph√©p:"
    echo -e "  ‚òÅÔ∏è  T·ª± ƒë·ªông upload backup l√™n Google Drive"
    echo -e "  üîê S·ª≠ d·ª•ng Service Account ƒë·ªÉ x√°c th·ª±c"
    echo -e "  üìÅ T·ª± ƒë·ªông t·∫°o th∆∞ m·ª•c theo ng√†y/th√°ng"
    echo -e "  üóÇÔ∏è Cleanup backup c≈© t·ª± ƒë·ªông (gi·ªØ 30 b·∫£n)"
    echo ""
    
    read -p "‚òÅÔ∏è  B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p Google Drive Backup? (Y/n): " gdrive_choice
    
    if [[ ! $gdrive_choice =~ ^[Nn]$ ]]; then
        GDRIVE_BACKUP_ENABLED="true"
        
        echo ""
        echo -e "${CYAN}üîß H∆∞·ªõng d·∫´n t·∫°o Service Account:${NC}"
        echo -e "  1. Truy c·∫≠p: https://console.cloud.google.com/"
        echo -e "  2. T·∫°o project m·ªõi ho·∫∑c ch·ªçn project c√≥ s·∫µn"
        echo -e "  3. B·∫≠t Google Drive API"
        echo -e "  4. T·∫°o Service Account:"
        echo -e "     - IAM & Admin ‚Üí Service Accounts ‚Üí Create"
        echo -e "     - T·∫°o key JSON v√† download"
        echo -e "  5. Chia s·∫ª th∆∞ m·ª•c Drive v·ªõi email Service Account"
        echo ""
        
        echo -e "${YELLOW}üìã Paste n·ªôi dung file JSON Service Account:${NC}"
        echo -e "${YELLOW}(Nh·∫•n Ctrl+D khi ho√†n th√†nh)${NC}"
        echo ""
        
        GDRIVE_SERVICE_ACCOUNT=$(cat)
        
        if [[ -z "$GDRIVE_SERVICE_ACCOUNT" ]]; then
            log_warning "Kh√¥ng c√≥ Service Account, b·ªè qua Google Drive Backup"
            GDRIVE_BACKUP_ENABLED="false"
        else
            log_success "ƒê√£ thi·∫øt l·∫≠p Google Drive Backup"
        fi
    fi
}

# C·∫•u h√¨nh Auto Update
configure_auto_update() {
    echo -e "${CYAN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîÑ AUTO-UPDATE                                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo "Auto-Update s·∫Ω:"
    echo -e "  üîÑ T·ª± ƒë·ªông c·∫≠p nh·∫≠t N8N m·ªói 12 gi·ªù"
    echo -e "  üì¶ C·∫≠p nh·∫≠t yt-dlp, FFmpeg v√† c√°c dependencies"
    echo -e "  üìã Ghi log chi ti·∫øt qu√° tr√¨nh update"
    echo -e "  üîí Backup tr∆∞·ªõc khi update"
    echo ""
    
    read -p "üîÑ B·∫°n c√≥ mu·ªën b·∫≠t Auto-Update? (Y/n): " update_choice
    
    if [[ ! $update_choice =~ ^[Nn]$ ]]; then
        AUTO_UPDATE_ENABLED="true"
        log_success "ƒê√£ b·∫≠t Auto-Update"
    fi
}

# T·∫°o Dockerfile cho N8N
create_n8n_dockerfile() {
    log_info "üê≥ T·∫°o Dockerfile cho N8N..."
    
    cat > $N8N_DIR/Dockerfile << 'EOF'
FROM n8nio/n8n:latest

USER root

# C√†i ƒë·∫∑t dependencies
RUN apk add --no-cache \
    ffmpeg \
    python3 \
    py3-pip \
    chromium \
    chromium-chromedriver \
    curl \
    wget \
    git \
    bash \
    && rm -rf /var/cache/apk/*

# C√†i ƒë·∫∑t yt-dlp
RUN pip3 install --no-cache-dir yt-dlp

# C√†i ƒë·∫∑t Puppeteer dependencies
RUN npm install -g puppeteer

# Thi·∫øt l·∫≠p Chrome path cho Puppeteer
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser

# T·∫°o th∆∞ m·ª•c cho custom nodes
RUN mkdir -p /home/node/.n8n/custom

USER node

# C√†i ƒë·∫∑t custom nodes ph·ªï bi·∫øn
RUN cd /home/node/.n8n && npm install \
    n8n-nodes-puppeteer \
    n8n-nodes-youtube \
    n8n-nodes-rss-feed-trigger

WORKDIR /home/node
EOF
    
    log_success "ƒê√£ t·∫°o Dockerfile cho N8N"
}

# T·∫°o News Content API
create_news_api() {
    if [[ "$NEWS_API_ENABLED" != "true" ]]; then
        return
    fi
    
    log_info "üì∞ T·∫°o News Content API..."
    
    # T·∫°o requirements.txt
    cat > $N8N_DIR/news-api/requirements.txt << 'EOF'
fastapi==0.104.1
uvicorn[standard]==0.24.0
newspaper4k==0.9.2
feedparser==6.0.10
requests==2.31.0
beautifulsoup4==4.12.2
python-multipart==0.0.6
pydantic==2.5.0
lxml==4.9.3
Pillow==10.1.0
python-dateutil==2.8.2
EOF
    
    # T·∫°o main.py
    cat > $N8N_DIR/news-api/main.py << EOF
from fastapi import FastAPI, HTTPException, Depends, Security
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.middleware.cors import CORSMiddleware
import newspaper
import feedparser
import requests
from bs4 import BeautifulSoup
from pydantic import BaseModel
from typing import List, Optional
import logging
from datetime import datetime
import re

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

app = FastAPI(
    title="News Content API",
    description="API ƒë·ªÉ c√†o n·ªôi dung tin t·ª©c v√† parse RSS feeds",
    version="2.0.0"
)

# CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Security
security = HTTPBearer()
BEARER_TOKEN = "$BEARER_TOKEN"

def verify_token(credentials: HTTPAuthorizationCredentials = Security(security)):
    if credentials.credentials != BEARER_TOKEN:
        raise HTTPException(status_code=401, detail="Invalid token")
    return credentials.credentials

# Models
class ArticleRequest(BaseModel):
    url: str
    language: str = "vi"

class RSSRequest(BaseModel):
    url: str
    limit: int = 10

class ArticleResponse(BaseModel):
    title: str
    content: str
    summary: str
    authors: List[str]
    publish_date: Optional[str]
    top_image: Optional[str]
    url: str
    keywords: List[str]

class RSSResponse(BaseModel):
    title: str
    description: str
    entries: List[dict]

@app.get("/")
async def root():
    return {
        "message": "News Content API v2.0.0",
        "endpoints": {
            "article": "/article - C√†o n·ªôi dung b√†i vi·∫øt",
            "rss": "/rss - Parse RSS feed",
            "search": "/search - T√¨m ki·∫øm tin t·ª©c"
        }
    }

@app.post("/article", response_model=ArticleResponse)
async def get_article(request: ArticleRequest, token: str = Depends(verify_token)):
    try:
        # T·∫°o Article object
        article = newspaper.Article(request.url, language=request.language)
        
        # Download v√† parse
        article.download()
        article.parse()
        article.nlp()
        
        # Format publish date
        publish_date = None
        if article.publish_date:
            publish_date = article.publish_date.isoformat()
        
        return ArticleResponse(
            title=article.title or "",
            content=article.text or "",
            summary=article.summary or "",
            authors=article.authors or [],
            publish_date=publish_date,
            top_image=article.top_image or "",
            url=request.url,
            keywords=article.keywords or []
        )
        
    except Exception as e:
        logger.error(f"Error processing article {request.url}: {str(e)}")
        raise HTTPException(status_code=400, detail=f"Kh√¥ng th·ªÉ x·ª≠ l√Ω b√†i vi·∫øt: {str(e)}")

@app.post("/rss", response_model=RSSResponse)
async def parse_rss(request: RSSRequest, token: str = Depends(verify_token)):
    try:
        # Parse RSS feed
        feed = feedparser.parse(request.url)
        
        if feed.bozo:
            raise HTTPException(status_code=400, detail="RSS feed kh√¥ng h·ª£p l·ªá")
        
        # L·∫•y entries theo limit
        entries = []
        for entry in feed.entries[:request.limit]:
            entry_data = {
                "title": getattr(entry, 'title', ''),
                "link": getattr(entry, 'link', ''),
                "description": getattr(entry, 'description', ''),
                "published": getattr(entry, 'published', ''),
                "author": getattr(entry, 'author', ''),
                "tags": [tag.term for tag in getattr(entry, 'tags', [])]
            }
            entries.append(entry_data)
        
        return RSSResponse(
            title=getattr(feed.feed, 'title', ''),
            description=getattr(feed.feed, 'description', ''),
            entries=entries
        )
        
    except Exception as e:
        logger.error(f"Error parsing RSS {request.url}: {str(e)}")
        raise HTTPException(status_code=400, detail=f"Kh√¥ng th·ªÉ parse RSS: {str(e)}")

@app.get("/search")
async def search_news(q: str, source: str = "google", limit: int = 10, token: str = Depends(verify_token)):
    try:
        results = []
        
        if source == "google":
            # Google News search
            search_url = f"https://news.google.com/rss/search?q={q}&hl=vi&gl=VN&ceid=VN:vi"
            feed = feedparser.parse(search_url)
            
            for entry in feed.entries[:limit]:
                results.append({
                    "title": getattr(entry, 'title', ''),
                    "link": getattr(entry, 'link', ''),
                    "published": getattr(entry, 'published', ''),
                    "source": getattr(entry, 'source', {}).get('title', ''),
                    "description": getattr(entry, 'summary', '')
                })
        
        return {"query": q, "results": results}
        
    except Exception as e:
        logger.error(f"Error searching news: {str(e)}")
        raise HTTPException(status_code=400, detail=f"L·ªói t√¨m ki·∫øm: {str(e)}")

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8001)
EOF
    
    # T·∫°o Dockerfile cho News API
    cat > $N8N_DIR/news-api/Dockerfile << 'EOF'
FROM python:3.11-slim

WORKDIR /app

# C√†i ƒë·∫∑t system dependencies
RUN apt-get update && apt-get install -y \
    gcc \
    g++ \
    libxml2-dev \
    libxslt-dev \
    libjpeg-dev \
    libpng-dev \
    libwebp-dev \
    curl \
    && rm -rf /var/lib/apt/lists/*

# Copy requirements v√† c√†i ƒë·∫∑t Python packages
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt

# Copy source code
COPY . .

# Expose port
EXPOSE 8001

# Run application
CMD ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8001", "--reload"]
EOF
    
    log_success "ƒê√£ t·∫°o News Content API"
}

# T·∫°o docker-compose.yml
create_docker_compose() {
    log_info "üê≥ T·∫°o docker-compose.yml..."
    
    if [[ "$USE_DOMAIN" == "true" ]]; then
        # V·ªõi domain v√† SSL
        cat > $N8N_DIR/docker-compose.yml << EOF
version: '3.8'

services:
  n8n:
    build: .
    container_name: n8n-container
    restart: unless-stopped
    environment:
      - N8N_HOST=$DOMAIN
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - WEBHOOK_URL=https://$DOMAIN/
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_TTL=24
      - N8N_BINARY_DATA_STORAGE_PATH=/home/node/.n8n/binaryData
    volumes:
      - ./data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n_network
    depends_on:
      - caddy

EOF

        # Th√™m News API n·∫øu ƒë∆∞·ª£c b·∫≠t
        if [[ "$NEWS_API_ENABLED" == "true" ]]; then
            cat >> $N8N_DIR/docker-compose.yml << EOF
  news-api:
    build: ./news-api
    container_name: news-api-container
    restart: unless-stopped
    environment:
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - n8n_network

EOF
        fi

        # Th√™m Caddy
        cat >> $N8N_DIR/docker-compose.yml << EOF
  caddy:
    image: caddy:2-alpine
    container_name: caddy-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - n8n_network

volumes:
  caddy_data:
  caddy_config:

networks:
  n8n_network:
    driver: bridge
EOF
    else
        # Localhost mode
        cat > $N8N_DIR/docker-compose.yml << EOF
version: '3.8'

services:
  n8n:
    build: .
    container_name: n8n-container
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_HOST=localhost
      - N8N_PORT=5678
      - N8N_PROTOCOL=http
      - WEBHOOK_URL=http://localhost:5678/
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
      - N8N_METRICS=true
      - N8N_LOG_LEVEL=info
      - N8N_PERSONALIZATION_ENABLED=false
      - N8N_VERSION_NOTIFICATIONS_ENABLED=false
      - N8N_DIAGNOSTICS_ENABLED=false
      - N8N_DEFAULT_BINARY_DATA_MODE=filesystem
      - N8N_BINARY_DATA_TTL=24
      - N8N_BINARY_DATA_STORAGE_PATH=/home/node/.n8n/binaryData
    volumes:
      - ./data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n_network

EOF

        # Th√™m News API n·∫øu ƒë∆∞·ª£c b·∫≠t
        if [[ "$NEWS_API_ENABLED" == "true" ]]; then
            cat >> $N8N_DIR/docker-compose.yml << EOF
  news-api:
    build: ./news-api
    container_name: news-api-container
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - TZ=Asia/Ho_Chi_Minh
    networks:
      - n8n_network

EOF
        fi

        cat >> $N8N_DIR/docker-compose.yml << EOF
networks:
  n8n_network:
    driver: bridge
EOF
    fi
    
    log_success "ƒê√£ t·∫°o docker-compose.yml"
}

# T·∫°o Caddyfile
create_caddyfile() {
    if [[ "$USE_DOMAIN" != "true" ]]; then
        return
    fi
    
    log_info "üåê T·∫°o Caddyfile..."
    
    cat > $N8N_DIR/Caddyfile << EOF
# N8N Main Domain
$DOMAIN {
    reverse_proxy n8n:5678
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
    }
    
    # Gzip compression
    encode gzip
    
    # Logging
    log {
        output file /var/log/caddy/n8n.log
        format json
    }
}

EOF

    # Th√™m API domain n·∫øu News API ƒë∆∞·ª£c b·∫≠t
    if [[ "$NEWS_API_ENABLED" == "true" ]]; then
        cat >> $N8N_DIR/Caddyfile << EOF
# News API Domain
$API_DOMAIN {
    reverse_proxy news-api:8001
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }
    
    # Gzip compression
    encode gzip
    
    # Logging
    log {
        output file /var/log/caddy/api.log
        format json
    }
}
EOF
    fi
    
    log_success "ƒê√£ t·∫°o Caddyfile"
}

# T·∫°o backup system
create_backup_system() {
    log_info "üíæ T·∫°o h·ªá th·ªëng backup..."
    
    # T·∫°o script backup ch√≠nh
    cat > $N8N_DIR/scripts/backup.sh << 'EOF'
#!/bin/bash

# N8N Backup Script v·ªõi Google Drive support
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Bi·∫øn
N8N_DIR="/home/n8n"
BACKUP_DIR="$N8N_DIR/backups"
LOCAL_BACKUP_DIR="$BACKUP_DIR/local"
GDRIVE_BACKUP_DIR="$BACKUP_DIR/gdrive"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="n8n_backup_$TIMESTAMP"

# Logging
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

# T·∫°o backup local
create_local_backup() {
    log_info "üîÑ T·∫°o backup local..."
    
    mkdir -p $LOCAL_BACKUP_DIR
    
    # T·∫°o th∆∞ m·ª•c backup t·∫°m
    TEMP_BACKUP_DIR="/tmp/$BACKUP_NAME"
    mkdir -p $TEMP_BACKUP_DIR
    
    # Backup N8N data
    if [[ -d "$N8N_DIR/data" ]]; then
        cp -r $N8N_DIR/data $TEMP_BACKUP_DIR/
        log_info "‚úÖ ƒê√£ backup N8N data"
    fi
    
    # Backup docker-compose v√† configs
    cp $N8N_DIR/docker-compose.yml $TEMP_BACKUP_DIR/ 2>/dev/null || true
    cp $N8N_DIR/Dockerfile $TEMP_BACKUP_DIR/ 2>/dev/null || true
    cp $N8N_DIR/Caddyfile $TEMP_BACKUP_DIR/ 2>/dev/null || true
    
    # Backup scripts
    if [[ -d "$N8N_DIR/scripts" ]]; then
        cp -r $N8N_DIR/scripts $TEMP_BACKUP_DIR/
    fi
    
    # Backup news-api n·∫øu c√≥
    if [[ -d "$N8N_DIR/news-api" ]]; then
        cp -r $N8N_DIR/news-api $TEMP_BACKUP_DIR/
    fi
    
    # T·∫°o file zip
    cd /tmp
    zip -r "$LOCAL_BACKUP_DIR/$BACKUP_NAME.zip" $BACKUP_NAME/
    
    # Cleanup temp
    rm -rf $TEMP_BACKUP_DIR
    
    log_success "‚úÖ ƒê√£ t·∫°o backup: $LOCAL_BACKUP_DIR/$BACKUP_NAME.zip"
    
    # Cleanup old backups (gi·ªØ 30 b·∫£n)
    cd $LOCAL_BACKUP_DIR
    ls -t *.zip 2>/dev/null | tail -n +31 | xargs rm -f 2>/dev/null || true
    
    echo "$LOCAL_BACKUP_DIR/$BACKUP_NAME.zip"
}

# Upload to Google Drive
upload_to_gdrive() {
    local backup_file="$1"
    
    if [[ ! -f "$N8N_DIR/gdrive_service_account.json" ]]; then
        log_info "‚è≠Ô∏è B·ªè qua Google Drive backup (kh√¥ng c√≥ service account)"
        return
    fi
    
    log_info "‚òÅÔ∏è Upload backup l√™n Google Drive..."
    
    # C√†i ƒë·∫∑t Google Drive API client n·∫øu ch∆∞a c√≥
    if ! command -v python3 &> /dev/null; then
        log_error "Python3 kh√¥ng ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return
    fi
    
    # T·∫°o script upload
    cat > /tmp/gdrive_upload.py << 'PYTHON_EOF'
import json
import os
import sys
from datetime import datetime
import requests
from google.oauth2 import service_account
from googleapiclient.discovery import build
from googleapiclient.http import MediaFileUpload

def get_access_token(service_account_file):
    """L·∫•y access token t·ª´ service account"""
    credentials = service_account.Credentials.from_service_account_file(
        service_account_file,
        scopes=['https://www.googleapis.com/auth/drive']
    )
    credentials.refresh(requests.Request())
    return credentials.token

def upload_file(service_account_file, file_path, folder_name="N8N_Backups"):
    """Upload file l√™n Google Drive"""
    try:
        # Kh·ªüi t·∫°o service
        credentials = service_account.Credentials.from_service_account_file(
            service_account_file,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        service = build('drive', 'v3', credentials=credentials)
        
        # T√¨m ho·∫∑c t·∫°o th∆∞ m·ª•c backup
        folder_id = None
        results = service.files().list(
            q=f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'",
            fields="files(id, name)"
        ).execute()
        
        if results['files']:
            folder_id = results['files'][0]['id']
        else:
            # T·∫°o th∆∞ m·ª•c m·ªõi
            folder_metadata = {
                'name': folder_name,
                'mimeType': 'application/vnd.google-apps.folder'
            }
            folder = service.files().create(body=folder_metadata, fields='id').execute()
            folder_id = folder.get('id')
        
        # Upload file
        file_name = os.path.basename(file_path)
        file_metadata = {
            'name': file_name,
            'parents': [folder_id]
        }
        
        media = MediaFileUpload(file_path, resumable=True)
        file = service.files().create(
            body=file_metadata,
            media_body=media,
            fields='id'
        ).execute()
        
        print(f"SUCCESS: File uploaded with ID: {file.get('id')}")
        return True
        
    except Exception as e:
        print(f"ERROR: {str(e)}")
        return False

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python3 gdrive_upload.py <service_account_file> <backup_file>")
        sys.exit(1)
    
    service_account_file = sys.argv[1]
    backup_file = sys.argv[2]
    
    if upload_file(service_account_file, backup_file):
        sys.exit(0)
    else:
        sys.exit(1)
PYTHON_EOF
    
    # C√†i ƒë·∫∑t Google API client
    pip3 install --quiet google-api-python-client google-auth google-auth-oauthlib google-auth-httplib2 2>/dev/null || {
        log_error "Kh√¥ng th·ªÉ c√†i ƒë·∫∑t Google API client"
        return
    }
    
    # Upload file
    if python3 /tmp/gdrive_upload.py "$N8N_DIR/gdrive_service_account.json" "$backup_file"; then
        log_success "‚úÖ ƒê√£ upload backup l√™n Google Drive"
    else
        log_error "‚ùå L·ªói upload l√™n Google Drive"
    fi
    
    # Cleanup
    rm -f /tmp/gdrive_upload.py
}

# G·ª≠i th√¥ng b√°o Telegram
send_telegram_notification() {
    local message="$1"
    local backup_file="$2"
    
    if [[ ! -f "$N8N_DIR/telegram_config.json" ]]; then
        return
    fi
    
    # ƒê·ªçc config
    local bot_token=$(jq -r '.bot_token' $N8N_DIR/telegram_config.json)
    local chat_id=$(jq -r '.chat_id' $N8N_DIR/telegram_config.json)
    
    if [[ "$bot_token" == "null" || "$chat_id" == "null" ]]; then
        return
    fi
    
    # G·ª≠i tin nh·∫Øn
    curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" \
        -d "chat_id=$chat_id" \
        -d "text=$message" \
        -d "parse_mode=HTML" > /dev/null
    
    # G·ª≠i file n·∫øu < 20MB
    if [[ -f "$backup_file" ]]; then
        local file_size=$(stat -f%z "$backup_file" 2>/dev/null || stat -c%s "$backup_file" 2>/dev/null || echo "0")
        if [[ $file_size -lt 20971520 ]]; then  # 20MB
            curl -s -X POST "https://api.telegram.org/bot$bot_token/sendDocument" \
                -F "chat_id=$chat_id" \
                -F "document=@$backup_file" \
                -F "caption=üì¶ N8N Backup - $(date)" > /dev/null
        fi
    fi
}

# Main backup function
main() {
    log_info "üöÄ B·∫Øt ƒë·∫ßu backup N8N..."
    
    # T·∫°o backup local
    backup_file=$(create_local_backup)
    
    # Upload to Google Drive
    upload_to_gdrive "$backup_file"
    
    # G·ª≠i th√¥ng b√°o
    local message="‚úÖ <b>N8N Backup Completed</b>
üìÖ Time: $(date)
üì¶ File: $(basename $backup_file)
üíæ Size: $(du -h $backup_file | cut -f1)
üñ•Ô∏è Server: $(hostname)"
    
    send_telegram_notification "$message" "$backup_file"
    
    log_success "üéâ Backup ho√†n th√†nh!"
}

# Ch·∫°y backup
main "$@"
EOF
    
    chmod +x $N8N_DIR/scripts/backup.sh
    
    # T·∫°o script restore
    cat > $N8N_DIR/scripts/restore.sh << 'EOF'
#!/bin/bash

# N8N Restore Script
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m'

# Bi·∫øn
N8N_DIR="/home/n8n"
BACKUP_DIR="$N8N_DIR/backups"
LOCAL_BACKUP_DIR="$BACKUP_DIR/local"

# Logging
log() {
    echo -e "[$(date '+%Y-%m-%d %H:%M:%S')] $1"
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

log_warning() {
    log "${YELLOW}[WARNING]${NC} $1"
}

# Menu restore
show_restore_menu() {
    echo -e "${CYAN}"
    cat << 'MENU_EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                           üîÑ N8N RESTORE MENU                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
MENU_EOF
    echo -e "${NC}"
    
    echo -e "${YELLOW}Ch·ªçn ngu·ªìn restore:${NC}"
    echo -e "  ${GREEN}1${NC} - Restore t·ª´ backup local"
    echo -e "  ${GREEN}2${NC} - Restore t·ª´ file zip"
    echo -e "  ${GREEN}3${NC} - Restore t·ª´ Google Drive"
    echo -e "  ${GREEN}0${NC} - Tho√°t"
    echo ""
    
    read -p "L·ª±a ch·ªçn (0-3): " choice
    
    case $choice in
        1) restore_from_local ;;
        2) restore_from_file ;;
        3) restore_from_gdrive ;;
        0) exit 0 ;;
        *) 
            log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
            show_restore_menu
            ;;
    esac
}

# Restore t·ª´ backup local
restore_from_local() {
    log_info "üìã Danh s√°ch backup local:"
    
    if [[ ! -d "$LOCAL_BACKUP_DIR" ]] || [[ -z "$(ls -A $LOCAL_BACKUP_DIR 2>/dev/null)" ]]; then
        log_error "Kh√¥ng t√¨m th·∫•y backup local n√†o!"
        return
    fi
    
    # Li·ªát k√™ backup
    local backups=($(ls -t $LOCAL_BACKUP_DIR/*.zip 2>/dev/null))
    
    if [[ ${#backups[@]} -eq 0 ]]; then
        log_error "Kh√¥ng t√¨m th·∫•y file backup!"
        return
    fi
    
    echo ""
    for i in "${!backups[@]}"; do
        local backup_file="${backups[$i]}"
        local backup_name=$(basename "$backup_file" .zip)
        local backup_date=$(echo "$backup_name" | grep -o '[0-9]\{8\}_[0-9]\{6\}' | sed 's/_/ /')
        local file_size=$(du -h "$backup_file" | cut -f1)
        
        echo -e "  ${GREEN}$((i+1))${NC} - $backup_date (${file_size})"
    done
    
    echo ""
    read -p "Ch·ªçn backup ƒë·ªÉ restore (1-${#backups[@]}): " backup_choice
    
    if [[ $backup_choice -ge 1 && $backup_choice -le ${#backups[@]} ]]; then
        local selected_backup="${backups[$((backup_choice-1))]}"
        perform_restore "$selected_backup"
    else
        log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
    fi
}

# Restore t·ª´ file zip
restore_from_file() {
    echo ""
    read -p "üìÅ Nh·∫≠p ƒë∆∞·ªùng d·∫´n ƒë·∫øn file backup (.zip): " backup_file
    
    if [[ ! -f "$backup_file" ]]; then
        log_error "File kh√¥ng t·ªìn t·∫°i: $backup_file"
        return
    fi
    
    if [[ "${backup_file##*.}" != "zip" ]]; then
        log_error "File ph·∫£i c√≥ ƒë·ªãnh d·∫°ng .zip"
        return
    fi
    
    perform_restore "$backup_file"
}

# Restore t·ª´ Google Drive
restore_from_gdrive() {
    log_info "‚òÅÔ∏è Restore t·ª´ Google Drive..."
    
    if [[ ! -f "$N8N_DIR/gdrive_service_account.json" ]]; then
        log_error "Kh√¥ng t√¨m th·∫•y Google Drive service account!"
        return
    fi
    
    # T·∫°o script list files
    cat > /tmp/gdrive_list.py << 'PYTHON_EOF'
import json
import sys
from google.oauth2 import service_account
from googleapiclient.discovery import build

def list_backup_files(service_account_file, folder_name="N8N_Backups"):
    """List backup files t·ª´ Google Drive"""
    try:
        credentials = service_account.Credentials.from_service_account_file(
            service_account_file,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        service = build('drive', 'v3', credentials=credentials)
        
        # T√¨m th∆∞ m·ª•c backup
        results = service.files().list(
            q=f"name='{folder_name}' and mimeType='application/vnd.google-apps.folder'",
            fields="files(id, name)"
        ).execute()
        
        if not results['files']:
            print("ERROR: Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c backup")
            return
        
        folder_id = results['files'][0]['id']
        
        # List files trong th∆∞ m·ª•c
        results = service.files().list(
            q=f"parents in '{folder_id}' and name contains '.zip'",
            orderBy="createdTime desc",
            fields="files(id, name, size, createdTime)"
        ).execute()
        
        files = results.get('files', [])
        
        if not files:
            print("ERROR: Kh√¥ng t√¨m th·∫•y file backup")
            return
        
        for i, file in enumerate(files):
            size_mb = round(int(file['size']) / 1024 / 1024, 2)
            print(f"{i+1}|{file['id']}|{file['name']}|{size_mb}MB|{file['createdTime']}")
            
    except Exception as e:
        print(f"ERROR: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 2:
        print("Usage: python3 gdrive_list.py <service_account_file>")
        sys.exit(1)
    
    list_backup_files(sys.argv[1])
PYTHON_EOF
    
    # List files
    local gdrive_files=$(python3 /tmp/gdrive_list.py "$N8N_DIR/gdrive_service_account.json" 2>/dev/null)
    
    if [[ -z "$gdrive_files" ]] || [[ "$gdrive_files" == ERROR* ]]; then
        log_error "Kh√¥ng th·ªÉ l·∫•y danh s√°ch backup t·ª´ Google Drive"
        rm -f /tmp/gdrive_list.py
        return
    fi
    
    echo ""
    echo -e "${YELLOW}üìã Danh s√°ch backup tr√™n Google Drive:${NC}"
    echo ""
    
    local file_ids=()
    local file_names=()
    
    while IFS='|' read -r num file_id file_name file_size created_time; do
        echo -e "  ${GREEN}$num${NC} - $file_name ($file_size)"
        file_ids+=("$file_id")
        file_names+=("$file_name")
    done <<< "$gdrive_files"
    
    echo ""
    read -p "Ch·ªçn backup ƒë·ªÉ restore (1-${#file_ids[@]}): " gdrive_choice
    
    if [[ $gdrive_choice -ge 1 && $gdrive_choice -le ${#file_ids[@]} ]]; then
        local selected_id="${file_ids[$((gdrive_choice-1))]}"
        local selected_name="${file_names[$((gdrive_choice-1))]}"
        
        # Download file
        log_info "üì• Downloading $selected_name..."
        
        cat > /tmp/gdrive_download.py << 'PYTHON_EOF'
import sys
from google.oauth2 import service_account
from googleapiclient.discovery import build
import io
from googleapiclient.http import MediaIoBaseDownload

def download_file(service_account_file, file_id, output_path):
    """Download file t·ª´ Google Drive"""
    try:
        credentials = service_account.Credentials.from_service_account_file(
            service_account_file,
            scopes=['https://www.googleapis.com/auth/drive']
        )
        service = build('drive', 'v3', credentials=credentials)
        
        request = service.files().get_media(fileId=file_id)
        fh = io.BytesIO()
        downloader = MediaIoBaseDownload(fh, request)
        
        done = False
        while done is False:
            status, done = downloader.next_chunk()
        
        with open(output_path, 'wb') as f:
            f.write(fh.getvalue())
        
        print("SUCCESS")
        
    except Exception as e:
        print(f"ERROR: {str(e)}")

if __name__ == "__main__":
    if len(sys.argv) != 4:
        print("Usage: python3 gdrive_download.py <service_account_file> <file_id> <output_path>")
        sys.exit(1)
    
    download_file(sys.argv[1], sys.argv[2], sys.argv[3])
PYTHON_EOF
        
        local temp_file="/tmp/$selected_name"
        local download_result=$(python3 /tmp/gdrive_download.py "$N8N_DIR/gdrive_service_account.json" "$selected_id" "$temp_file")
        
        if [[ "$download_result" == "SUCCESS" ]]; then
            log_success "‚úÖ ƒê√£ download backup t·ª´ Google Drive"
            perform_restore "$temp_file"
            rm -f "$temp_file"
        else
            log_error "‚ùå L·ªói download backup t·ª´ Google Drive"
        fi
    else
        log_error "L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!"
    fi
    
    # Cleanup
    rm -f /tmp/gdrive_list.py /tmp/gdrive_download.py
}

# Th·ª±c hi·ªán restore
perform_restore() {
    local backup_file="$1"
    
    log_warning "‚ö†Ô∏è C·∫¢NH B√ÅO: Restore s·∫Ω ghi ƒë√® to√†n b·ªô d·ªØ li·ªáu N8N hi·ªán t·∫°i!"
    echo ""
    read -p "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ti·∫øp t·ª•c? (y/N): " confirm
    
    if [[ ! $confirm =~ ^[Yy]$ ]]; then
        log_info "ƒê√£ h·ªßy restore"
        return
    fi
    
    log_info "üîÑ B·∫Øt ƒë·∫ßu restore t·ª´: $(basename $backup_file)"
    
    # D·ª´ng N8N containers
    log_info "üõë D·ª´ng N8N containers..."
    cd $N8N_DIR
    docker-compose down 2>/dev/null || true
    
    # Backup d·ªØ li·ªáu hi·ªán t·∫°i
    log_info "üíæ Backup d·ªØ li·ªáu hi·ªán t·∫°i..."
    local current_backup="$N8N_DIR/backups/pre_restore_$(date +%Y%m%d_%H%M%S).zip"
    mkdir -p $(dirname $current_backup)
    
    if [[ -d "$N8N_DIR/data" ]]; then
        cd $N8N_DIR
        zip -r "$current_backup" data/ 2>/dev/null || true
        log_info "‚úÖ ƒê√£ backup d·ªØ li·ªáu hi·ªán t·∫°i: $current_backup"
    fi
    
    # Extract backup
    log_info "üì¶ Gi·∫£i n√©n backup..."
    local temp_extract="/tmp/n8n_restore_$(date +%s)"
    mkdir -p $temp_extract
    
    cd $temp_extract
    unzip -q "$backup_file"
    
    # T√¨m th∆∞ m·ª•c ch·ª©a data
    local backup_data_dir=""
    if [[ -d "data" ]]; then
        backup_data_dir="data"
    else
        # T√¨m trong subdirectories
        backup_data_dir=$(find . -name "data" -type d | head -n1)
    fi
    
    if [[ -z "$backup_data_dir" ]]; then
        log_error "Kh√¥ng t√¨m th·∫•y th∆∞ m·ª•c data trong backup!"
        rm -rf $temp_extract
        return
    fi
    
    # Restore data
    log_info "üîÑ Restore d·ªØ li·ªáu N8N..."
    rm -rf $N8N_DIR/data
    cp -r "$backup_data_dir" $N8N_DIR/
    
    # Restore configs n·∫øu c√≥
    for config_file in docker-compose.yml Dockerfile Caddyfile; do
        if [[ -f "$config_file" ]]; then
            cp "$config_file" $N8N_DIR/
            log_info "‚úÖ Restored $config_file"
        fi
    done
    
    # Restore scripts n·∫øu c√≥
    if [[ -d "scripts" ]]; then
        cp -r scripts/* $N8N_DIR/scripts/ 2>/dev/null || true
        chmod +x $N8N_DIR/scripts/*.sh 2>/dev/null || true
        log_info "‚úÖ Restored scripts"
    fi
    
    # Restore news-api n·∫øu c√≥
    if [[ -d "news-api" ]]; then
        rm -rf $N8N_DIR/news-api
        cp -r news-api $N8N_DIR/
        log_info "‚úÖ Restored news-api"
    fi
    
    # Set permissions
    chown -R 1000:1000 $N8N_DIR/data 2>/dev/null || true
    
    # Cleanup
    rm -rf $temp_extract
    
    # Kh·ªüi ƒë·ªông l·∫°i containers
    log_info "üöÄ Kh·ªüi ƒë·ªông l·∫°i N8N..."
    cd $N8N_DIR
    docker-compose up -d
    
    log_success "üéâ Restore ho√†n th√†nh!"
    log_info "üìã Backup d·ªØ li·ªáu c≈©: $current_backup"
    
    if [[ "$USE_DOMAIN" == "true" ]]; then
        log_info "üåê N8N URL: https://$DOMAIN"
    else
        log_info "üåê N8N URL: http://localhost:5678"
    fi
}

# Main
if [[ $# -eq 0 ]]; then
    show_restore_menu
else
    perform_restore "$1"
fi
EOF
    
    chmod +x $N8N_DIR/scripts/restore.sh
    
    # T·∫°o config files cho Telegram v√† Google Drive
    if [[ "$TELEGRAM_BACKUP_ENABLED" == "true" ]]; then
        cat > $N8N_DIR/telegram_config.json << EOF
{
    "bot_token": "$TELEGRAM_BOT_TOKEN",
    "chat_id": "$TELEGRAM_CHAT_ID"
}
EOF
    fi
    
    if [[ "$GDRIVE_BACKUP_ENABLED" == "true" && -n "$GDRIVE_SERVICE_ACCOUNT" ]]; then
        echo "$GDRIVE_SERVICE_ACCOUNT" > $N8N_DIR/gdrive_service_account.json
    fi
    
    log_success "ƒê√£ t·∫°o h·ªá th·ªëng backup"
}

# T·∫°o SSL renewal script
create_ssl_renewal_script() {
    if [[ "$USE_DOMAIN" != "true" ]]; then
        return
    fi
    
    log_info "üîí T·∫°o SSL renewal script..."
    
    cat > $N8N_DIR/scripts/ssl_renewal.sh << 'EOF'
#!/bin/bash

# SSL Certificate Renewal Script v·ªõi ZeroSSL fallback
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Bi·∫øn
N8N_DIR="/home/n8n"
LOG_FILE="$N8N_DIR/logs/ssl_renewal.log"

# Logging
log() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo -e "$message"
    echo "$message" >> $LOG_FILE
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

# Ki·ªÉm tra SSL certificate
check_ssl_status() {
    local domain="$1"
    
    # Ki·ªÉm tra certificate expiry
    local cert_info=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "")
    
    if [[ -z "$cert_info" ]]; then
        echo "NO_CERT"
        return
    fi
    
    local not_after=$(echo "$cert_info" | grep "notAfter" | cut -d= -f2)
    local expiry_timestamp=$(date -d "$not_after" +%s 2>/dev/null || echo "0")
    local current_timestamp=$(date +%s)
    local days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
    
    if [[ $days_until_expiry -lt 30 ]]; then
        echo "EXPIRING_SOON"
    elif [[ $days_until_expiry -lt 0 ]]; then
        echo "EXPIRED"
    else
        echo "VALID"
    fi
}

# Ki·ªÉm tra Caddy logs cho rate limit
check_rate_limit() {
    local caddy_logs=$(docker logs caddy-proxy 2>&1 | tail -50)
    
    if echo "$caddy_logs" | grep -q "rateLimited\|too many certificates"; then
        # Extract retry after time
        local retry_after=$(echo "$caddy_logs" | grep -o "retry after [0-9-]* [0-9:]* UTC" | tail -1 | sed 's/retry after //' | sed 's/ UTC//')
        
        if [[ -n "$retry_after" ]]; then
            local retry_timestamp=$(date -d "$retry_after UTC" +%s 2>/dev/null || echo "0")
            local current_timestamp=$(date +%s)
            
            if [[ $retry_timestamp -gt $current_timestamp ]]; then
                echo "RATE_LIMITED"
                return
            fi
        fi
    fi
    
    echo "OK"
}

# Chuy·ªÉn sang ZeroSSL
switch_to_zerossl() {
    log_info "üîÑ Chuy·ªÉn sang ZeroSSL..."
    
    # Backup Caddyfile hi·ªán t·∫°i
    cp $N8N_DIR/Caddyfile $N8N_DIR/Caddyfile.backup
    
    # T·∫°o Caddyfile v·ªõi ZeroSSL
    cat > $N8N_DIR/Caddyfile << 'CADDY_EOF'
{
    acme_ca https://acme.zerossl.com/v2/DV90
}

# N8N Main Domain
DOMAIN_PLACEHOLDER {
    reverse_proxy n8n:5678
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
    }
    
    # Gzip compression
    encode gzip
    
    # Logging
    log {
        output file /var/log/caddy/n8n.log
        format json
    }
}

API_DOMAIN_PLACEHOLDER {
    reverse_proxy news-api:8001
    
    # Security headers
    header {
        Strict-Transport-Security "max-age=31536000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
    }
    
    # Gzip compression
    encode gzip
    
    # Logging
    log {
        output file /var/log/caddy/api.log
        format json
    }
}
CADDY_EOF
    
    # Replace placeholders (s·∫Ω ƒë∆∞·ª£c thay th·∫ø b·ªüi script ch√≠nh)
    # sed -i "s/DOMAIN_PLACEHOLDER/$DOMAIN/g" $N8N_DIR/Caddyfile
    # sed -i "s/API_DOMAIN_PLACEHOLDER/$API_DOMAIN/g" $N8N_DIR/Caddyfile
    
    # Restart Caddy
    cd $N8N_DIR
    docker-compose restart caddy
    
    log_success "‚úÖ ƒê√£ chuy·ªÉn sang ZeroSSL"
}

# Chuy·ªÉn v·ªÅ Let's Encrypt
switch_to_letsencrypt() {
    log_info "üîÑ Chuy·ªÉn v·ªÅ Let's Encrypt..."
    
    if [[ -f "$N8N_DIR/Caddyfile.backup" ]]; then
        cp $N8N_DIR/Caddyfile.backup $N8N_DIR/Caddyfile
        cd $N8N_DIR
        docker-compose restart caddy
        log_success "‚úÖ ƒê√£ chuy·ªÉn v·ªÅ Let's Encrypt"
    fi
}

# G·ª≠i th√¥ng b√°o Telegram
send_telegram_notification() {
    local message="$1"
    
    if [[ ! -f "$N8N_DIR/telegram_config.json" ]]; then
        return
    fi
    
    local bot_token=$(jq -r '.bot_token' $N8N_DIR/telegram_config.json 2>/dev/null || echo "")
    local chat_id=$(jq -r '.chat_id' $N8N_DIR/telegram_config.json 2>/dev/null || echo "")
    
    if [[ -n "$bot_token" && -n "$chat_id" && "$bot_token" != "null" && "$chat_id" != "null" ]]; then
        curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" \
            -d "chat_id=$chat_id" \
            -d "text=$message" \
            -d "parse_mode=HTML" > /dev/null
    fi
}

# Main renewal function
main() {
    log_info "üîí Ki·ªÉm tra SSL certificates..."
    
    # ƒê·ªçc domain t·ª´ docker-compose.yml ho·∫∑c Caddyfile
    local domain=$(grep "N8N_HOST=" $N8N_DIR/docker-compose.yml | cut -d= -f2 | head -1)
    
    if [[ -z "$domain" || "$domain" == "localhost" ]]; then
        log_info "‚è≠Ô∏è Localhost mode, b·ªè qua SSL check"
        exit 0
    fi
    
    # Ki·ªÉm tra tr·∫°ng th√°i SSL
    local ssl_status=$(check_ssl_status "$domain")
    local rate_limit_status=$(check_rate_limit)
    
    log_info "SSL Status: $ssl_status"
    log_info "Rate Limit Status: $rate_limit_status"
    
    case "$ssl_status" in
        "NO_CERT"|"EXPIRED"|"EXPIRING_SOON")
            if [[ "$rate_limit_status" == "RATE_LIMITED" ]]; then
                log_info "üîÑ Let's Encrypt rate limited, chuy·ªÉn sang ZeroSSL"
                switch_to_zerossl
                
                # Th√¥ng b√°o
                local message="‚ö†Ô∏è <b>SSL Certificate Issue</b>
üåê Domain: $domain
üîí Status: $ssl_status
üö´ Let's Encrypt: Rate Limited
üîÑ Action: Switched to ZeroSSL
üìÖ Time: $(date)"
                
                send_telegram_notification "$message"
            else
                log_info "üîÑ Renewing SSL certificate..."
                cd $N8N_DIR
                docker-compose restart caddy
                
                # ƒê·ª£i v√† ki·ªÉm tra l·∫°i
                sleep 30
                local new_status=$(check_ssl_status "$domain")
                
                if [[ "$new_status" == "VALID" ]]; then
                    log_success "‚úÖ SSL certificate renewed successfully"
                    
                    local message="‚úÖ <b>SSL Certificate Renewed</b>
üåê Domain: $domain
üîí Status: Valid
üìÖ Time: $(date)"
                    
                    send_telegram_notification "$message"
                else
                    log_error "‚ùå SSL renewal failed"
                    
                    local message="‚ùå <b>SSL Renewal Failed</b>
üåê Domain: $domain
üîí Status: $new_status
üìÖ Time: $(date)"
                    
                    send_telegram_notification "$message"
                fi
            fi
            ;;
        "VALID")
            log_success "‚úÖ SSL certificate is valid"
            ;;
    esac
}

# T·∫°o log directory
mkdir -p $(dirname $LOG_FILE)

# Ch·∫°y main function
main "$@"
EOF
    
    chmod +x $N8N_DIR/scripts/ssl_renewal.sh
    
    log_success "ƒê√£ t·∫°o SSL renewal script"
}

# T·∫°o auto-update script
create_auto_update_script() {
    if [[ "$AUTO_UPDATE_ENABLED" != "true" ]]; then
        return
    fi
    
    log_info "üîÑ T·∫°o script auto-update..."
    
    cat > $N8N_DIR/scripts/auto_update.sh << 'EOF'
#!/bin/bash

# N8N Auto-Update Script
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán

set -e

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

# Bi·∫øn
N8N_DIR="/home/n8n"
LOG_FILE="$N8N_DIR/logs/auto_update.log"

# Logging
log() {
    local message="[$(date '+%Y-%m-%d %H:%M:%S')] $1"
    echo -e "$message"
    echo "$message" >> $LOG_FILE
}

log_info() {
    log "${BLUE}[INFO]${NC} $1"
}

log_success() {
    log "${GREEN}[SUCCESS]${NC} $1"
}

log_error() {
    log "${RED}[ERROR]${NC} $1"
}

# G·ª≠i th√¥ng b√°o Telegram
send_telegram_notification() {
    local message="$1"
    
    if [[ ! -f "$N8N_DIR/telegram_config.json" ]]; then
        return
    fi
    
    local bot_token=$(jq -r '.bot_token' $N8N_DIR/telegram_config.json 2>/dev/null || echo "")
    local chat_id=$(jq -r '.chat_id' $N8N_DIR/telegram_config.json 2>/dev/null || echo "")
    
    if [[ -n "$bot_token" && -n "$chat_id" && "$bot_token" != "null" && "$chat_id" != "null" ]]; then
        curl -s -X POST "https://api.telegram.org/bot$bot_token/sendMessage" \
            -d "chat_id=$chat_id" \
            -d "text=$message" \
            -d "parse_mode=HTML" > /dev/null
    fi
}

# Backup tr∆∞·ªõc khi update
create_pre_update_backup() {
    log_info "üíæ T·∫°o backup tr∆∞·ªõc khi update..."
    
    if [[ -f "$N8N_DIR/scripts/backup.sh" ]]; then
        $N8N_DIR/scripts/backup.sh
        log_success "‚úÖ ƒê√£ t·∫°o backup"
    else
        log_error "‚ùå Kh√¥ng t√¨m th·∫•y script backup"
    fi
}

# Update Docker images
update_docker_images() {
    log_info "üê≥ C·∫≠p nh·∫≠t Docker images..."
    
    cd $N8N_DIR
    
    # Pull latest images
    docker-compose pull
    
    # Rebuild custom images
    docker-compose build --no-cache
    
    log_success "‚úÖ ƒê√£ c·∫≠p nh·∫≠t Docker images"
}

# Update system packages
update_system_packages() {
    log_info "üì¶ C·∫≠p nh·∫≠t system packages..."
    
    apt-get update -y
    apt-get upgrade -y
    apt-get autoremove -y
    apt-get autoclean
    
    log_success "‚úÖ ƒê√£ c·∫≠p nh·∫≠t system packages"
}

# Restart services
restart_services() {
    log_info "üîÑ Kh·ªüi ƒë·ªông l·∫°i services..."
    
    cd $N8N_DIR
    docker-compose down
    docker-compose up -d
    
    # ƒê·ª£i services kh·ªüi ƒë·ªông
    sleep 30
    
    log_success "‚úÖ ƒê√£ kh·ªüi ƒë·ªông l·∫°i services"
}

# Ki·ªÉm tra health
check_health() {
    log_info "üè• Ki·ªÉm tra health..."
    
    local n8n_health="‚ùå"
    local api_health="‚ùå"
    
    # Ki·ªÉm tra N8N
    if curl -s -f http://localhost:5678/healthz > /dev/null 2>&1; then
        n8n_health="‚úÖ"
    fi
    
    # Ki·ªÉm tra News API n·∫øu c√≥
    if docker ps | grep -q news-api-container; then
        if curl -s -f http://localhost:8001/ > /dev/null 2>&1; then
            api_health="‚úÖ"
        fi
    else
        api_health="‚è≠Ô∏è"
    fi
    
    log_info "N8N Health: $n8n_health"
    log_info "API Health: $api_health"
    
    if [[ "$n8n_health" == "‚úÖ" ]]; then
        return 0
    else
        return 1
    fi
}

# Main update function
main() {
    log_info "üöÄ B·∫Øt ƒë·∫ßu auto-update..."
    
    # T·∫°o log directory
    mkdir -p $(dirname $LOG_FILE)
    
    # Backup tr∆∞·ªõc khi update
    create_pre_update_backup
    
    # Update system packages
    update_system_packages
    
    # Update Docker images
    update_docker_images
    
    # Restart services
    restart_services
    
    # Ki·ªÉm tra health
    if check_health; then
        log_success "üéâ Auto-update ho√†n th√†nh th√†nh c√¥ng!"
        
        local message="‚úÖ <b>N8N Auto-Update Completed</b>
üîÑ Status: Success
üìÖ Time: $(date)
üñ•Ô∏è Server: $(hostname)
üê≥ Docker images updated
üì¶ System packages updated"
        
        send_telegram_notification "$message"
    else
        log_error "‚ùå Auto-update th·∫•t b·∫°i!"
        
        local message="‚ùå <b>N8N Auto-Update Failed</b>
üîÑ Status: Failed
üìÖ Time: $(date)
üñ•Ô∏è Server: $(hostname)
‚ö†Ô∏è Services may be down"
        
        send_telegram_notification "$message"
        
        exit 1
    fi
}

# Ch·∫°y main function
main "$@"
EOF
    
    chmod +x $N8N_DIR/scripts/auto_update.sh
    
    log_success "ƒê√£ t·∫°o script auto-update"
}

# T·∫°o script ch·∫©n ƒëo√°n
create_diagnostic_script() {
    log_info "üîß T·∫°o script ch·∫©n ƒëo√°n..."
    
    cat > $N8N_DIR/scripts/diagnose.sh << 'EOF'
#!/bin/bash

# N8N Diagnostic Script
# T√°c gi·∫£: Nguy·ªÖn Ng·ªçc Thi·ªán

# M√†u s·∫Øc
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m'

# Header
echo -e "${CYAN}"
cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üîß N8N DIAGNOSTIC TOOL                              ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
echo -e "${NC}"

# System Info
echo -e "${WHITE}üìä SYSTEM INFORMATION${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
echo -e "${BLUE}OS:${NC} $(lsb_release -d | cut -f2)"
echo -e "${BLUE}Kernel:${NC} $(uname -r)"
echo -e "${BLUE}Uptime:${NC} $(uptime -p)"
echo -e "${BLUE}Load Average:${NC} $(uptime | awk -F'load average:' '{print $2}')"
echo -e "${BLUE}Memory:${NC} $(free -h | grep Mem | awk '{print $3"/"$2" ("$3/$2*100"%)"}')"
echo -e "${BLUE}Disk:${NC} $(df -h / | tail -1 | awk '{print $3"/"$2" ("$5")"}')"
echo ""

# Docker Info
echo -e "${WHITE}üê≥ DOCKER INFORMATION${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
if command -v docker &> /dev/null; then
    echo -e "${GREEN}‚úÖ Docker installed${NC}"
    echo -e "${BLUE}Version:${NC} $(docker --version)"
    echo -e "${BLUE}Status:${NC} $(systemctl is-active docker)"
    
    if command -v docker-compose &> /dev/null; then
        echo -e "${GREEN}‚úÖ Docker Compose installed${NC}"
        echo -e "${BLUE}Version:${NC} $(docker-compose --version)"
    else
        echo -e "${RED}‚ùå Docker Compose not installed${NC}"
    fi
else
    echo -e "${RED}‚ùå Docker not installed${NC}"
fi
echo ""

# N8N Containers
echo -e "${WHITE}üì¶ N8N CONTAINERS${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
if [[ -d "/home/n8n" ]]; then
    cd /home/n8n
    
    if [[ -f "docker-compose.yml" ]]; then
        echo -e "${GREEN}‚úÖ Docker Compose file found${NC}"
        
        # Container status
        containers=$(docker-compose ps --services 2>/dev/null || echo "")
        if [[ -n "$containers" ]]; then
            while read -r container; do
                if [[ -n "$container" ]]; then
                    status=$(docker-compose ps $container 2>/dev/null | tail -n +3 | awk '{print $4}' || echo "Down")
                    if [[ "$status" == "Up" ]]; then
                        echo -e "${GREEN}‚úÖ $container: Running${NC}"
                    else
                        echo -e "${RED}‚ùå $container: $status${NC}"
                    fi
                fi
            done <<< "$containers"
        else
            echo -e "${YELLOW}‚ö†Ô∏è No containers found${NC}"
        fi
    else
        echo -e "${RED}‚ùå Docker Compose file not found${NC}"
    fi
else
    echo -e "${RED}‚ùå N8N directory not found${NC}"
fi
echo ""

# Network Connectivity
echo -e "${WHITE}üåê NETWORK CONNECTIVITY${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Check internet
if ping -c 1 8.8.8.8 &> /dev/null; then
    echo -e "${GREEN}‚úÖ Internet connectivity${NC}"
else
    echo -e "${RED}‚ùå No internet connectivity${NC}"
fi

# Check DNS
if nslookup google.com &> /dev/null; then
    echo -e "${GREEN}‚úÖ DNS resolution${NC}"
else
    echo -e "${RED}‚ùå DNS resolution failed${NC}"
fi

# Check ports
ports=("80" "443" "5678" "8001")
for port in "${ports[@]}"; do
    if netstat -tuln | grep -q ":$port "; then
        echo -e "${GREEN}‚úÖ Port $port is open${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è Port $port is not open${NC}"
    fi
done
echo ""

# SSL Certificate
echo -e "${WHITE}üîí SSL CERTIFICATE${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# ƒê·ªçc domain t·ª´ docker-compose.yml
if [[ -f "/home/n8n/docker-compose.yml" ]]; then
    domain=$(grep "N8N_HOST=" /home/n8n/docker-compose.yml | cut -d= -f2 | head -1)
    
    if [[ -n "$domain" && "$domain" != "localhost" ]]; then
        echo -e "${BLUE}Domain:${NC} $domain"
        
        # Check SSL
        cert_info=$(echo | openssl s_client -servername $domain -connect $domain:443 2>/dev/null | openssl x509 -noout -dates 2>/dev/null || echo "")
        
        if [[ -n "$cert_info" ]]; then
            not_after=$(echo "$cert_info" | grep "notAfter" | cut -d= -f2)
            expiry_timestamp=$(date -d "$not_after" +%s 2>/dev/null || echo "0")
            current_timestamp=$(date +%s)
            days_until_expiry=$(( (expiry_timestamp - current_timestamp) / 86400 ))
            
            if [[ $days_until_expiry -gt 30 ]]; then
                echo -e "${GREEN}‚úÖ SSL Certificate valid (expires in $days_until_expiry days)${NC}"
            elif [[ $days_until_expiry -gt 0 ]]; then
                echo -e "${YELLOW}‚ö†Ô∏è SSL Certificate expires soon ($days_until_expiry days)${NC}"
            else
                echo -e "${RED}‚ùå SSL Certificate expired${NC}"
            fi
            
            echo -e "${BLUE}Expires:${NC} $not_after"
        else
            echo -e "${RED}‚ùå No SSL Certificate found${NC}"
        fi
    else
        echo -e "${BLUE}Mode:${NC} Localhost (no SSL needed)"
    fi
else
    echo -e "${RED}‚ùå Cannot determine domain${NC}"
fi
echo ""

# Service Health
echo -e "${WHITE}üè• SERVICE HEALTH${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# N8N Health
if curl -s -f http://localhost:5678/healthz > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ N8N is healthy${NC}"
else
    echo -e "${RED}‚ùå N8N is not responding${NC}"
fi

# News API Health
if docker ps | grep -q news-api-container; then
    if curl -s -f http://localhost:8001/ > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ News API is healthy${NC}"
    else
        echo -e "${RED}‚ùå News API is not responding${NC}"
    fi
else
    echo -e "${BLUE}‚ÑπÔ∏è News API not installed${NC}"
fi

# Caddy Health
if docker ps | grep -q caddy-proxy; then
    if curl -s -f http://localhost:80 > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Caddy is healthy${NC}"
    else
        echo -e "${RED}‚ùå Caddy is not responding${NC}"
    fi
else
    echo -e "${BLUE}‚ÑπÔ∏è Caddy not installed (localhost mode)${NC}"
fi
echo ""

# Disk Usage
echo -e "${WHITE}üíæ DISK USAGE${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
if [[ -d "/home/n8n" ]]; then
    echo -e "${BLUE}N8N Directory:${NC} $(du -sh /home/n8n 2>/dev/null || echo "Unknown")"
    
    if [[ -d "/home/n8n/data" ]]; then
        echo -e "${BLUE}N8N Data:${NC} $(du -sh /home/n8n/data 2>/dev/null || echo "Unknown")"
    fi
    
    if [[ -d "/home/n8n/backups" ]]; then
        echo -e "${BLUE}Backups:${NC} $(du -sh /home/n8n/backups 2>/dev/null || echo "Unknown")"
        
        local_backups=$(ls /home/n8n/backups/local/*.zip 2>/dev/null | wc -l || echo "0")
        echo -e "${BLUE}Local Backups:${NC} $local_backups files"
    fi
fi

# Docker volumes
echo -e "${BLUE}Docker Volumes:${NC}"
docker volume ls | grep n8n || echo "No N8N volumes found"
echo ""

# Recent Logs
echo -e "${WHITE}üìã RECENT LOGS${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

if docker ps | grep -q n8n-container; then
    echo -e "${BLUE}N8N Container Logs (last 5 lines):${NC}"
    docker logs n8n-container --tail 5 2>/dev/null || echo "Cannot access logs"
    echo ""
fi

if docker ps | grep -q caddy-proxy; then
    echo -e "${BLUE}Caddy Logs (last 5 lines):${NC}"
    docker logs caddy-proxy --tail 5 2>/dev/null || echo "Cannot access logs"
    echo ""
fi

# Cron Jobs
echo -e "${WHITE}‚è∞ CRON JOBS${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
cron_jobs=$(crontab -l 2>/dev/null | grep -v "^#" | grep -v "^$" || echo "")
if [[ -n "$cron_jobs" ]]; then
    echo "$cron_jobs"
else
    echo "No cron jobs found"
fi
echo ""

# Recommendations
echo -e "${WHITE}üí° RECOMMENDATIONS${NC}"
echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

# Check if backup is configured
if [[ ! -f "/home/n8n/scripts/backup.sh" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Backup script not found - consider setting up backups${NC}"
fi

# Check if auto-update is configured
if [[ ! -f "/home/n8n/scripts/auto_update.sh" ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Auto-update script not found - consider enabling auto-updates${NC}"
fi

# Check disk space
disk_usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
if [[ $disk_usage -gt 80 ]]; then
    echo -e "${RED}‚ùå Disk usage is high ($disk_usage%) - consider cleaning up${NC}"
elif [[ $disk_usage -gt 70 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Disk usage is moderate ($disk_usage%) - monitor closely${NC}"
fi

# Check memory usage
mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
if [[ $mem_usage -gt 90 ]]; then
    echo -e "${RED}‚ùå Memory usage is high ($mem_usage%) - consider adding more RAM${NC}"
elif [[ $mem_usage -gt 80 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è Memory usage is moderate ($mem_usage%) - monitor closely${NC}"
fi

echo ""
echo -e "${GREEN}üéâ Diagnostic completed!${NC}"
echo -e "${BLUE}For support, contact: https://www.youtube.com/@kalvinthiensocial${NC}"
EOF
    
    chmod +x $N8N_DIR/scripts/diagnose.sh
    
    log_success "ƒê√£ t·∫°o script ch·∫©n ƒëo√°n"
}

# Thi·∫øt l·∫≠p cron jobs
setup_cron_jobs() {
    log_info "‚è∞ Thi·∫øt l·∫≠p cron jobs..."
    
    # Backup cron jobs hi·ªán t·∫°i
    crontab -l 2>/dev/null > /tmp/current_crontab || touch /tmp/current_crontab
    
    # X√≥a c√°c cron jobs N8N c≈©
    grep -v "/home/n8n" /tmp/current_crontab > /tmp/new_crontab || touch /tmp/new_crontab
    
    # Th√™m backup job (h√†ng ng√†y l√∫c 2:00 AM)
    echo "0 2 * * * /home/n8n/scripts/backup.sh >> /home/n8n/logs/backup.log 2>&1" >> /tmp/new_crontab
    
    # Th√™m SSL renewal job (h√†ng ng√†y l√∫c 3:00 AM)
    if [[ "$USE_DOMAIN" == "true" ]]; then
        echo "0 3 * * * /home/n8n/scripts/ssl_renewal.sh >> /home/n8n/logs/ssl_renewal.log 2>&1" >> /tmp/new_crontab
    fi
    
    # Th√™m auto-update job (m·ªói 12 gi·ªù)
    if [[ "$AUTO_UPDATE_ENABLED" == "true" ]]; then
        echo "0 */12 * * * /home/n8n/scripts/auto_update.sh >> /home/n8n/logs/auto_update.log 2>&1" >> /tmp/new_crontab
    fi
    
    # C√†i ƒë·∫∑t cron jobs m·ªõi
    crontab /tmp/new_crontab
    
    # Cleanup
    rm -f /tmp/current_crontab /tmp/new_crontab
    
    log_success "ƒê√£ thi·∫øt l·∫≠p cron jobs"
}

# Build v√† deploy containers
build_and_deploy() {
    log_info "üèóÔ∏è Build v√† deploy containers..."
    
    cd $N8N_DIR
    
    # D·ª´ng containers c≈©
    log_info "üõë D·ª´ng containers c≈©..."
    docker-compose down -v 2>/dev/null || true
    
    # Build Docker images
    log_info "üì¶ Build Docker images..."
    docker-compose build --no-cache
    
    # Kh·ªüi ƒë·ªông containers
    log_info "üöÄ Kh·ªüi ƒë·ªông containers..."
    docker-compose up -d
    
    # ƒê·ª£i containers kh·ªüi ƒë·ªông
    log_info "‚è≥ ƒê·ª£i services kh·ªüi ƒë·ªông..."
    sleep 30
    
    # Ki·ªÉm tra tr·∫°ng th√°i containers
    log_info "üîç Ki·ªÉm tra tr·∫°ng th√°i containers..."
    if docker-compose ps | grep -q "Up"; then
        log_success "‚úÖ Containers ƒë√£ kh·ªüi ƒë·ªông th√†nh c√¥ng"
    else
        log_error "‚ùå M·ªôt s·ªë containers kh√¥ng kh·ªüi ƒë·ªông ƒë∆∞·ª£c"
        docker-compose ps
        exit 1
    fi
}

# Ki·ªÉm tra SSL certificate
check_ssl_certificate() {
    if [[ "$USE_DOMAIN" != "true" ]]; then
        return
    fi
    
    log_info "üîí Ki·ªÉm tra SSL certificate..."
    
    # ƒê·ª£i SSL certificate ƒë∆∞·ª£c c·∫•p
    local max_attempts=10
    local attempt=1
    
    while [[ $attempt -le $max_attempts ]]; do
        log_info "Th·ª≠ l·∫ßn $attempt/$max_attempts..."
        
        # Ki·ªÉm tra Caddy logs
        local caddy_logs=$(docker logs caddy-proxy 2>&1 | tail -20)
        
        # Ki·ªÉm tra rate limit
        if echo "$caddy_logs" | grep -q "rateLimited\|too many certificates"; then
            log_error "üö® PH√ÅT HI·ªÜN SSL RATE LIMIT!"
            
            echo -e "${CYAN}"
            cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        ‚ö†Ô∏è  SSL RATE LIMIT DETECTED                          ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
            echo -e "${NC}"
            
            echo -e "${YELLOW}üîç NGUY√äN NH√ÇN:${NC}"
            echo -e "  ‚Ä¢ Let's Encrypt gi·ªõi h·∫°n 5 certificates/domain/tu·∫ßn"
            echo -e "  ‚Ä¢ Domain n√†y ƒë√£ ƒë·∫°t gi·ªõi h·∫°n mi·ªÖn ph√≠"
            echo -e "  ‚Ä¢ C·∫ßn ƒë·ª£i ƒë·∫øn tu·∫ßn sau ƒë·ªÉ c·∫•p SSL m·ªõi"
            echo ""
            
            echo -e "${YELLOW}üí° GI·∫¢I PH√ÅP:${NC}"
            echo -e "  ${GREEN}1. C√ÄI L·∫†I UBUNTU (KHUY·∫æN NGH·ªä):${NC}"
            echo -e "     ‚Ä¢ C√†i l·∫°i Ubuntu Server ho√†n to√†n"
            echo -e "     ‚Ä¢ S·ª≠ d·ª•ng subdomain kh√°c (vd: n8n2.domain.com)"
            echo -e "     ‚Ä¢ Ch·∫°y l·∫°i script n√†y"
            echo ""
            echo -e "  ${GREEN}2. S·ª¨ D·ª§NG ZEROSSL (T·ª∞ ƒê·ªòNG):${NC}"
            echo -e "     ‚Ä¢ Script s·∫Ω t·ª± ƒë·ªông chuy·ªÉn sang ZeroSSL"
            echo -e "     ‚Ä¢ SSL certificate v·∫´n ƒë∆∞·ª£c c·∫•p mi·ªÖn ph√≠"
            echo -e "     ‚Ä¢ T·ª± ƒë·ªông gia h·∫°n sau 90 ng√†y"
            echo ""
            echo -e "  ${GREEN}3. ƒê·ª¢I ƒê·∫æN KHI RATE LIMIT RESET:${NC}"
            
            # T√≠nh to√°n th·ªùi gian reset
            local retry_after=$(echo "$caddy_logs" | grep -o "retry after [0-9-]* [0-9:]* UTC" | tail -1 | sed 's/retry after //' | sed 's/ UTC//')
            
            if [[ -n "$retry_after" ]]; then
                local retry_timestamp=$(date -d "$retry_after UTC" +%s 2>/dev/null || echo "0")
                local vn_time=$(TZ='Asia/Ho_Chi_Minh' date -d "@$retry_timestamp" '+%Y-%m-%d %H:%M:%S' 2>/dev/null || echo "Unknown")
                echo -e "     ‚Ä¢ ƒê·ª£i ƒë·∫øn sau $vn_time (Gi·ªù VN)"
            else
                echo -e "     ‚Ä¢ ƒê·ª£i 7 ng√†y k·ªÉ t·ª´ l·∫ßn th·ª≠ SSL cu·ªëi c√πng"
            fi
            echo -e "     ‚Ä¢ Ch·∫°y l·∫°i script ƒë·ªÉ c·∫•p SSL m·ªõi"
            echo ""
            
            echo -e "${YELLOW}üìã L·ªäCH S·ª¨ SSL ATTEMPTS G·∫¶N ƒê√ÇY:${NC}"
            echo "$caddy_logs" | grep -E "(rateLimited|too many certificates|obtain|error)" | tail -5 | while read line; do
                echo "‚Ä¢ $line"
            done
            echo ""
            
            read -p "ü§î B·∫°n mu·ªën chuy·ªÉn sang ZeroSSL t·ª± ƒë·ªông? (Y/n): " zerossl_choice
            
            if [[ ! $zerossl_choice =~ ^[Nn]$ ]]; then
                log_info "üîÑ Chuy·ªÉn sang ZeroSSL..."
                
                # Update Caddyfile v·ªõi ZeroSSL
                sed -i '1i{\n    acme_ca https://acme.zerossl.com/v2/DV90\n}' $N8N_DIR/Caddyfile
                
                # Restart Caddy
                docker-compose restart caddy
                
                log_success "‚úÖ ƒê√£ chuy·ªÉn sang ZeroSSL"
                
                # ƒê·ª£i SSL ƒë∆∞·ª£c c·∫•p
                sleep 60
                continue
            else
                echo ""
                echo -e "${YELLOW}üìã H∆Ø·ªöNG D·∫™N C√ÄI L·∫†I UBUNTU:${NC}"
                echo -e "  1. Backup d·ªØ li·ªáu quan tr·ªçng"
                echo -e "  2. C√†i l·∫°i Ubuntu Server t·ª´ ƒë·∫ßu"
                echo -e "  3. S·ª≠ d·ª•ng subdomain kh√°c ho·∫∑c domain kh√°c"
                echo -e "  4. Ch·∫°y l·∫°i script: curl -sSL https://raw.githubusercontent.com/KalvinThien/install-n8n-ffmpeg/main/auto_cai_dat_n8n.sh | bash"
                echo ""
                exit 1
            fi
        fi
        
        # Ki·ªÉm tra SSL th√†nh c√¥ng
        if echo "$caddy_logs" | grep -q "certificate obtained successfully"; then
            log_success "‚úÖ SSL certificate ƒë√£ ƒë∆∞·ª£c c·∫•p th√†nh c√¥ng"
            return
        fi
        
        # Ki·ªÉm tra b·∫±ng c√°ch test HTTPS
        if curl -s -k https://$DOMAIN > /dev/null 2>&1; then
            log_success "‚úÖ HTTPS ƒëang ho·∫°t ƒë·ªông"
            return
        fi
        
        sleep 30
        ((attempt++))
    done
    
    log_warning "‚ö†Ô∏è Kh√¥ng th·ªÉ x√°c nh·∫≠n SSL certificate, nh∆∞ng c√≥ th·ªÉ v·∫´n ƒëang ƒë∆∞·ª£c c·∫•p"
}

# Hi·ªÉn th·ªã th√¥ng tin ho√†n th√†nh
show_completion_info() {
    echo -e "${GREEN}"
    cat << 'EOF'
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                        üéâ C√ÄI ƒê·∫∂T HO√ÄN TH√ÄNH!                               ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
EOF
    echo -e "${NC}"
    
    echo -e "${WHITE}üìã TH√îNG TIN TRUY C·∫¨P:${NC}"
    
    if [[ "$USE_DOMAIN" == "true" ]]; then
        echo -e "  üåê N8N URL: ${GREEN}https://$DOMAIN${NC}"
        if [[ "$NEWS_API_ENABLED" == "true" ]]; then
            echo -e "  üì∞ News API: ${GREEN}https://$API_DOMAIN${NC}"
            echo -e "  üîë Bearer Token: ${YELLOW}$BEARER_TOKEN${NC}"
        fi
    else
        echo -e "  üåê N8N URL: ${GREEN}http://localhost:5678${NC}"
        if [[ "$NEWS_API_ENABLED" == "true" ]]; then
            echo -e "  üì∞ News API: ${GREEN}http://localhost:8001${NC}"
            echo -e "  üîë Bearer Token: ${YELLOW}$BEARER_TOKEN${NC}"
        fi
    fi
    
    echo ""
    echo -e "${WHITE}üîß L·ªÜNH QU·∫¢N L√ù:${NC}"
    echo -e "  üìä Ch·∫©n ƒëo√°n h·ªá th·ªëng: ${CYAN}/home/n8n/scripts/diagnose.sh${NC}"
    echo -e "  üíæ Backup th·ªß c√¥ng: ${CYAN}/home/n8n/scripts/backup.sh${NC}"
    echo -e "  üîÑ Restore: ${CYAN}/home/n8n/scripts/restore.sh${NC}"
    
    if [[ "$USE_DOMAIN" == "true" ]]; then
        echo -e "  üîí Ki·ªÉm tra SSL: ${CYAN}/home/n8n/scripts/ssl_renewal.sh${NC}"
    fi
    
    if [[ "$AUTO_UPDATE_ENABLED" == "true" ]]; then
        echo -e "  üîÑ Update th·ªß c√¥ng: ${CYAN}/home/n8n/scripts/auto_update.sh${NC}"
    fi
    
    echo ""
    echo -e "${WHITE}üìÅ TH√îNG TIN TH√äM:${NC}"
    echo -e "  üìÇ Th∆∞ m·ª•c N8N: ${CYAN}/home/n8n${NC}"
    echo -e "  üìã Logs: ${CYAN}/home/n8n/logs/${NC}"
    echo -e "  üíæ Backups: ${CYAN}/home/n8n/backups/${NC}"
    
    if [[ "$TELEGRAM_BACKUP_ENABLED" == "true" ]]; then
        echo -e "  üì± Telegram backup: ${GREEN}Enabled${NC}"
    fi
    
    if [[ "$GDRIVE_BACKUP_ENABLED" == "true" ]]; then
        echo -e "  ‚òÅÔ∏è  Google Drive backup: ${GREEN}Enabled${NC}"
    fi
    
    if [[ "$AUTO_UPDATE_ENABLED" == "true" ]]; then
        echo -e "  üîÑ Auto-update: ${GREEN}Enabled (m·ªói 12 gi·ªù)${NC}"
    fi
    
    echo ""
    echo -e "${WHITE}üé¨ H·ªñ TR·ª¢:${NC}"
    echo -e "  üì∫ YouTube: ${CYAN}https://www.youtube.com/@kalvinthiensocial${NC}"
    echo -e "  üì± Zalo: ${CYAN}08.8888.4749${NC}"
    echo -e "  üîî ƒêƒÉng k√Ω k√™nh ƒë·ªÉ ·ªßng h·ªô m√¨nh nh√©!"
    
    echo ""
    log_success "üöÄ N8N ƒë√£ s·∫µn s√†ng s·ª≠ d·ª•ng!"
}

# Main function
main() {
    show_header
    check_root
    detect_os
    setup_swap
    configure_domain
    check_dns
    cleanup_old_installation
    install_docker
    create_directory_structure
    configure_news_api
    configure_telegram_backup
    configure_gdrive_backup
    configure_auto_update
    create_n8n_dockerfile
    create_news_api
    create_docker_compose
    create_caddyfile
    create_backup_system
    create_ssl_renewal_script
    create_auto_update_script
    create_diagnostic_script
    setup_cron_jobs
    build_and_deploy
    check_ssl_certificate
    show_completion_info
}

# Ch·∫°y script
main "$@"
