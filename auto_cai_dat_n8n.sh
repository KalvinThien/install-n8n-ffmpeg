#!/bin/bash

# Hi·ªÉn th·ªã banner
echo "======================================================================"
echo "     Script c√†i ƒë·∫∑t N8N v·ªõi FFmpeg, yt-dlp, Puppeteer, FastAPI v√† SSL t·ª± ƒë·ªông  "
echo "======================================================================"

# Ki·ªÉm tra xem script c√≥ ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root kh√¥ng
if [[ $EUID -ne 0 ]]; then
   echo "Script n√†y c·∫ßn ƒë∆∞·ª£c ch·∫°y v·ªõi quy·ªÅn root" 
   exit 1
fi

# Bi·∫øn ƒë·ªÉ l∆∞u tr·∫°ng th√°i c√†i ƒë·∫∑t
INSTALL_ISSUES=""
TELEGRAM_BOT_TOKEN=""
TELEGRAM_CHAT_ID=""
FASTAPI_PASSWORD=""
SETUP_TELEGRAM=false
SETUP_FASTAPI=false
API_DOMAIN=""

# H√†m thi·∫øt l·∫≠p swap t·ª± ƒë·ªông
setup_swap() {
    echo "Ki·ªÉm tra v√† thi·∫øt l·∫≠p swap t·ª± ƒë·ªông..."
    
    # Ki·ªÉm tra n·∫øu swap ƒë√£ ƒë∆∞·ª£c b·∫≠t
    if [ "$(swapon --show | wc -l)" -gt 0 ]; then
        SWAP_SIZE=$(free -h | grep Swap | awk '{print $2}')
        echo "Swap ƒë√£ ƒë∆∞·ª£c b·∫≠t v·ªõi k√≠ch th∆∞·ªõc ${SWAP_SIZE}. B·ªè qua thi·∫øt l·∫≠p."
        return
    fi
    
    # L·∫•y th√¥ng tin RAM (ƒë∆°n v·ªã MB)
    RAM_MB=$(free -m | grep Mem | awk '{print $2}')
    
    # T√≠nh to√°n k√≠ch th∆∞·ªõc swap d·ª±a tr√™n RAM
    if [ "$RAM_MB" -le 2048 ]; then
        # V·ªõi RAM <= 2GB, swap = 2x RAM
        SWAP_SIZE=$((RAM_MB * 2))
    elif [ "$RAM_MB" -gt 2048 ] && [ "$RAM_MB" -le 8192 ]; then
        # V·ªõi 2GB < RAM <= 8GB, swap = RAM
        SWAP_SIZE=$RAM_MB
    else
        # V·ªõi RAM > 8GB, swap = 4GB
        SWAP_SIZE=4096
    fi
    
    # Chuy·ªÉn ƒë·ªïi sang GB cho d·ªÖ nh√¨n (l√†m tr√≤n l√™n)
    SWAP_GB=$(( (SWAP_SIZE + 1023) / 1024 ))
    
    echo "ƒêang thi·∫øt l·∫≠p swap v·ªõi k√≠ch th∆∞·ªõc ${SWAP_GB}GB (${SWAP_SIZE}MB)..."
    
    # T·∫°o swap file v·ªõi ƒë∆°n v·ªã MB
    dd if=/dev/zero of=/swapfile bs=1M count=$SWAP_SIZE status=progress
    chmod 600 /swapfile
    mkswap /swapfile
    swapon /swapfile
    
    # Th√™m v√†o fstab ƒë·ªÉ swap ƒë∆∞·ª£c k√≠ch ho·∫°t sau khi kh·ªüi ƒë·ªông l·∫°i
    if ! grep -q "/swapfile" /etc/fstab; then
        echo '/swapfile none swap sw 0 0' >> /etc/fstab
    fi
    
    # C·∫•u h√¨nh swappiness v√† cache pressure
    sysctl vm.swappiness=10
    sysctl vm.vfs_cache_pressure=50
    
    # L∆∞u c·∫•u h√¨nh v√†o sysctl.conf n·∫øu ch∆∞a c√≥
    if ! grep -q "vm.swappiness" /etc/sysctl.conf; then
        echo "vm.swappiness=10" >> /etc/sysctl.conf
    fi
    
    if ! grep -q "vm.vfs_cache_pressure" /etc/sysctl.conf; then
        echo "vm.vfs_cache_pressure=50" >> /etc/sysctl.conf
    fi
    
    echo "ƒê√£ thi·∫øt l·∫≠p swap v·ªõi k√≠ch th∆∞·ªõc ${SWAP_GB}GB th√†nh c√¥ng."
    echo "Swappiness ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh 10 (m·∫∑c ƒë·ªãnh: 60)"
    echo "Vfs_cache_pressure ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t th√†nh 50 (m·∫∑c ƒë·ªãnh: 100)"
}

# H√†m hi·ªÉn th·ªã tr·ª£ gi√∫p
show_help() {
    echo "C√°ch s·ª≠ d·ª•ng: $0 [t√πy ch·ªçn]"
    echo "T√πy ch·ªçn:"
    echo "  -h, --help      Hi·ªÉn th·ªã tr·ª£ gi√∫p n√†y"
    echo "  -d, --dir DIR   Ch·ªâ ƒë·ªãnh th∆∞ m·ª•c c√†i ƒë·∫∑t n8n (m·∫∑c ƒë·ªãnh: /home/n8n)"
    echo "  -s, --skip-docker B·ªè qua c√†i ƒë·∫∑t Docker (n·∫øu ƒë√£ c√≥)"
    exit 0
}

# X·ª≠ l√Ω tham s·ªë d√≤ng l·ªánh
N8N_DIR="/home/n8n"
SKIP_DOCKER=false

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            show_help
            ;;
        -d|--dir)
            N8N_DIR="$2"
            shift 2
            ;;
        -s|--skip-docker)
            SKIP_DOCKER=true
            shift
            ;;
        *)
            echo "T√πy ch·ªçn kh√¥ng h·ª£p l·ªá: $1"
            show_help
            ;;
    esac
done

# H√†m ki·ªÉm tra domain
check_domain() {
    local domain=$1
    local server_ip=$(curl -s https://api.ipify.org)
    local domain_ip=$(dig +short $domain)

    if [ "$domain_ip" = "$server_ip" ]; then
        return 0  # Domain ƒë√£ tr·ªè ƒë√∫ng
    else
        return 1  # Domain ch∆∞a tr·ªè ƒë√∫ng
    fi
}

# H√†m ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
check_commands() {
    if ! command -v dig &> /dev/null; then
        echo "C√†i ƒë·∫∑t dnsutils (ƒë·ªÉ s·ª≠ d·ª•ng l·ªánh dig)..."
        apt-get update
        apt-get install -y dnsutils
    fi
}

# H√†m thi·∫øt l·∫≠p Telegram backup
setup_telegram_backup() {
    echo ""
    echo "======================================================================"
    echo "  C·∫§U H√åNH G·ª¨I BACKUP T·ª∞ ƒê·ªòNG QUA TELEGRAM"
    echo "======================================================================"
    echo ""
    read -p "B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p g·ª≠i backup t·ª± ƒë·ªông qua Telegram kh√¥ng? (y/n): " setup_tg
    
    if [[ $setup_tg =~ ^[Yy]$ ]]; then
        SETUP_TELEGRAM=true
        echo ""
        echo "ƒê·ªÉ thi·∫øt l·∫≠p Telegram backup, b·∫°n c·∫ßn:"
        echo "1. T·∫°o bot Telegram b·∫±ng c√°ch nh·∫Øn tin cho @BotFather"
        echo "2. L·∫•y Bot Token t·ª´ @BotFather"
        echo "3. L·∫•y Chat ID c·ªßa b·∫°n b·∫±ng c√°ch nh·∫Øn tin cho bot @userinfobot"
        echo ""
        read -p "Nh·∫≠p Bot Token: " TELEGRAM_BOT_TOKEN
        read -p "Nh·∫≠p Chat ID: " TELEGRAM_CHAT_ID
        
        # Ki·ªÉm tra token v√† chat ID
        echo "ƒêang ki·ªÉm tra k·∫øt n·ªëi Telegram..."
        test_response=$(curl -s -X POST "https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage" \
            -d chat_id="${TELEGRAM_CHAT_ID}" \
            -d text="üéâ Thi·∫øt l·∫≠p backup N8N qua Telegram th√†nh c√¥ng!")
        
        if echo "$test_response" | grep -q '"ok":true'; then
            echo "‚úÖ K·∫øt n·ªëi Telegram th√†nh c√¥ng!"
        else
            echo "‚ùå L·ªói k·∫øt n·ªëi Telegram. Vui l√≤ng ki·ªÉm tra l·∫°i Token v√† Chat ID."
            SETUP_TELEGRAM=false
            INSTALL_ISSUES="$INSTALL_ISSUES\n- Thi·∫øt l·∫≠p Telegram backup th·∫•t b·∫°i"
        fi
    else
        echo "B·ªè qua thi·∫øt l·∫≠p Telegram backup."
    fi
}

# H√†m thi·∫øt l·∫≠p FastAPI cho crawl b√†i vi·∫øt
setup_fastapi_crawler() {
    echo ""
    echo "======================================================================"
    echo "  C·∫§U H√åNH API CRAWL B√ÄI VI·∫æT V·ªöI FASTAPI"
    echo "======================================================================"
    echo ""
    read -p "B·∫°n c√≥ mu·ªën thi·∫øt l·∫≠p API ri√™ng ƒë·ªÉ l·∫•y n·ªôi dung b√†i vi·∫øt kh√¥ng? (y/n): " setup_api
    
    if [[ $setup_api =~ ^[Yy]$ ]]; then
        SETUP_FASTAPI=true
        echo ""
        echo "API n√†y s·∫Ω cho ph√©p b·∫°n crawl n·ªôi dung t·ª´ c√°c trang web b√°o."
        
        # H·ªèi v·ªÅ subdomain cho API
        read -p "Nh·∫≠p subdomain cho API (v√≠ d·ª•: api.yourdomain.com): " API_DOMAIN
        
        # Ki·ªÉm tra API domain
        echo "Ki·ªÉm tra API domain $API_DOMAIN..."
        if check_domain $API_DOMAIN; then
            echo "‚úÖ API Domain $API_DOMAIN ƒë√£ ƒë∆∞·ª£c tr·ªè ƒë√∫ng ƒë·∫øn server n√†y."
        else
            echo "‚ö†Ô∏è API Domain $API_DOMAIN ch∆∞a ƒë∆∞·ª£c tr·ªè ƒë·∫øn server n√†y."
            echo "üìç Vui l√≤ng t·∫°o b·∫£n ghi DNS: $API_DOMAIN ‚Üí $(curl -s https://api.ipify.org)"
            echo "üí° B·∫°n c√≥ th·ªÉ ti·∫øp t·ª•c c√†i ƒë·∫∑t v√† c·∫•u h√¨nh DNS sau."
        fi
        
        read -p "Nh·∫≠p m·∫≠t kh·∫©u Bearer token cho API: " FASTAPI_PASSWORD
        echo "‚úÖ API s·∫Ω ƒë∆∞·ª£c tri·ªÉn khai t·∫°i: https://${API_DOMAIN}"
        echo "üìñ Documentation: https://${API_DOMAIN}/docs"
    else
        echo "B·ªè qua thi·∫øt l·∫≠p FastAPI crawler."
    fi
}

# Thi·∫øt l·∫≠p swap
setup_swap

# C√†i ƒë·∫∑t c√°c g√≥i c·∫ßn thi·∫øt
echo "ƒêang c√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt..."
apt-get update
apt-get install -y dnsutils curl cron jq tar gzip python3-full python3-venv python3-pip pipx net-tools

# C√†i ƒë·∫∑t yt-dlp th√¥ng qua pipx ho·∫∑c virtual environment
echo "C√†i ƒë·∫∑t yt-dlp..."
if command -v pipx &> /dev/null; then
    pipx install yt-dlp
else
    # T·∫°o virtual environment v√† c√†i ƒë·∫∑t yt-dlp v√†o ƒë√≥
    python3 -m venv /opt/yt-dlp-venv
    /opt/yt-dlp-venv/bin/pip install yt-dlp
    ln -sf /opt/yt-dlp-venv/bin/yt-dlp /usr/local/bin/yt-dlp
    chmod +x /usr/local/bin/yt-dlp
fi

# Ki·ªÉm tra c√°c l·ªánh c·∫ßn thi·∫øt
check_commands

# Nh·∫≠n input domain v√† thi·∫øt l·∫≠p c·∫•u h√¨nh - UPDATED
echo ""
echo "======================================================================"
echo "  C·∫§U H√åNH DOMAIN"
echo "======================================================================"
echo ""
read -p "Nh·∫≠p t√™n mi·ªÅn ch√≠nh cho N8N (v√≠ d·ª•: n8n.yourdomain.com): " DOMAIN

# Ki·ªÉm tra domain ch√≠nh
echo "Ki·ªÉm tra domain $DOMAIN..."
if check_domain $DOMAIN; then
    echo "‚úÖ Domain $DOMAIN ƒë√£ ƒë∆∞·ª£c tr·ªè ƒë√∫ng ƒë·∫øn server n√†y."
else
    echo "‚ùå Domain $DOMAIN ch∆∞a ƒë∆∞·ª£c tr·ªè ƒë·∫øn server n√†y."
    echo "üìç IP server hi·ªán t·∫°i: $(curl -s https://api.ipify.org)"
    echo "üìç IP domain ƒëang tr·ªè: $(dig +short $DOMAIN | head -1)"
    echo ""
    echo "Vui l√≤ng c·∫≠p nh·∫≠t b·∫£n ghi DNS ƒë·ªÉ tr·ªè $DOMAIN ƒë·∫øn IP $(curl -s https://api.ipify.org)"
    read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c c√†i ƒë·∫∑t kh√¥ng? (y/n): " continue_install
    if [[ ! $continue_install =~ ^[Yy]$ ]]; then
        echo "Tho√°t c√†i ƒë·∫∑t. Vui l√≤ng c·∫•u h√¨nh DNS v√† ch·∫°y l·∫°i script."
        exit 1
    fi
fi

# Thi·∫øt l·∫≠p Telegram backup
setup_telegram_backup

# Thi·∫øt l·∫≠p FastAPI crawler v·ªõi subdomain
setup_fastapi_crawler

# C√†i ƒë·∫∑t FastAPI v√† dependencies n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if [ "$SETUP_FASTAPI" = true ]; then
    echo "C√†i ƒë·∫∑t FastAPI v√† c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt..."
    
    # T·∫°o virtual environment cho FastAPI
    python3 -m venv /opt/fastapi-venv
    
    # C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán
    /opt/fastapi-venv/bin/pip install fastapi uvicorn newspaper4k requests python-multipart fake-useragent || {
        echo "‚ùå L·ªói c√†i ƒë·∫∑t FastAPI dependencies"
        INSTALL_ISSUES="$INSTALL_ISSUES\n- FastAPI dependencies c√†i ƒë·∫∑t th·∫•t b·∫°i"
        SETUP_FASTAPI=false
    }
fi

# ƒê·∫£m b·∫£o cron service ƒëang ch·∫°y
systemctl enable cron
systemctl start cron

# Ki·ªÉm tra domain
echo "Ki·ªÉm tra domain $DOMAIN..."
if check_domain $DOMAIN; then
    echo "Domain $DOMAIN ƒë√£ ƒë∆∞·ª£c tr·ªè ƒë√∫ng ƒë·∫øn server n√†y. Ti·∫øp t·ª•c c√†i ƒë·∫∑t"
else
    echo "Domain $DOMAIN ch∆∞a ƒë∆∞·ª£c tr·ªè ƒë·∫øn server n√†y."
    echo "Vui l√≤ng c·∫≠p nh·∫≠t b·∫£n ghi DNS ƒë·ªÉ tr·ªè $DOMAIN ƒë·∫øn IP $(curl -s https://api.ipify.org)"
    echo "Sau khi c·∫≠p nh·∫≠t DNS, h√£y ch·∫°y l·∫°i script n√†y"
    exit 1
fi

# H√†m c√†i ƒë·∫∑t Docker
install_docker() {
    if $SKIP_DOCKER; then
        echo "B·ªè qua c√†i ƒë·∫∑t Docker theo y√™u c·∫ßu..."
        return
    fi
    
    echo "C√†i ƒë·∫∑t Docker v√† Docker Compose..."
    apt-get update
    apt-get install -y apt-transport-https ca-certificates curl software-properties-common
    
    # Th√™m kh√≥a Docker GPG theo c√°ch m·ªõi
    mkdir -p /etc/apt/keyrings
    curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
    
    # Th√™m repository Docker
    echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | \
    tee /etc/apt/sources.list.d/docker.list > /dev/null
    
    # C√†i ƒë·∫∑t Docker
    apt-get update
    apt-get install -y docker-ce docker-ce-cli containerd.io
    
    # C√†i ƒë·∫∑t Docker Compose
    if ! command -v docker-compose &> /dev/null && ! command -v docker &> /dev/null; then
        echo "C√†i ƒë·∫∑t Docker Compose..."
        apt-get install -y docker-compose
    elif command -v docker &> /dev/null && ! docker compose version &> /dev/null; then
        echo "C√†i ƒë·∫∑t Docker Compose plugin..."
        apt-get install -y docker-compose-plugin
    fi
    
    # Ki·ªÉm tra Docker ƒë√£ c√†i ƒë·∫∑t th√†nh c√¥ng ch∆∞a
    if ! command -v docker &> /dev/null; then
        echo "L·ªói: Docker ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        INSTALL_ISSUES="$INSTALL_ISSUES\n- Docker c√†i ƒë·∫∑t th·∫•t b·∫°i"
        return 1
    fi

    if ! command -v docker-compose &> /dev/null && ! (command -v docker &> /dev/null && docker compose version &> /dev/null); then
        echo "L·ªói: Docker Compose ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë√∫ng c√°ch."
        INSTALL_ISSUES="$INSTALL_ISSUES\n- Docker Compose c√†i ƒë·∫∑t th·∫•t b·∫°i"
        return 1
    fi

    # Th√™m user hi·ªán t·∫°i v√†o nh√≥m docker n·∫øu kh√¥ng ph·∫£i root
    if [ "$SUDO_USER" != "" ]; then
        echo "Th√™m user $SUDO_USER v√†o nh√≥m docker ƒë·ªÉ c√≥ th·ªÉ ch·∫°y docker m√† kh√¥ng c·∫ßn sudo..."
        usermod -aG docker $SUDO_USER
        echo "ƒê√£ th√™m user $SUDO_USER v√†o nh√≥m docker. C√°c thay ƒë·ªïi s·∫Ω c√≥ hi·ªáu l·ª±c sau khi ƒëƒÉng nh·∫≠p l·∫°i."
    fi

    # Kh·ªüi ƒë·ªông l·∫°i d·ªãch v·ª• Docker
    systemctl restart docker

    echo "Docker v√† Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng."
}

# C√†i ƒë·∫∑t Docker v√† Docker Compose
install_docker

# T·∫°o th∆∞ m·ª•c cho n8n
echo "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c cho n8n t·∫°i $N8N_DIR..."
mkdir -p $N8N_DIR
mkdir -p $N8N_DIR/files
mkdir -p $N8N_DIR/files/temp
mkdir -p $N8N_DIR/files/youtube_content_anylystic
mkdir -p $N8N_DIR/files/backup_full

# T·∫°o th∆∞ m·ª•c cho FastAPI n·∫øu c·∫ßn
if [ "$SETUP_FASTAPI" = true ]; then
    mkdir -p $N8N_DIR/fastapi
fi

# T·∫°o FastAPI app cho crawling n·∫øu ƒë∆∞·ª£c y√™u c·∫ßu
if [ "$SETUP_FASTAPI" = true ]; then
    echo "T·∫°o FastAPI app cho crawling b√†i vi·∫øt..."
    
    cat << 'EOF' > $N8N_DIR/fastapi/main.py
import asyncio
import json
import logging
from datetime import datetime
from typing import Dict, List, Optional
from urllib.parse import urlparse
import hashlib
import time
import os

import newspaper
from fake_useragent import UserAgent
from fastapi import FastAPI, HTTPException, Depends, status
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, HttpUrl
import requests
import uvicorn

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o FastAPI app
app = FastAPI(
    title="N8N Article Crawler API",
    description="API ƒë·ªÉ crawl n·ªôi dung b√†i vi·∫øt t·ª´ c√°c trang web b√°o",
    version="1.0.0",
    docs_url="/docs",
    redoc_url="/redoc"
)

# C·∫•u h√¨nh b·∫£o m·∫≠t
BEARER_TOKEN = os.getenv("FASTAPI_PASSWORD", "changeme")
security = HTTPBearer()

# User agent ƒë·ªÉ tr√°nh b·ªã ch·∫∑n
ua = UserAgent()

# Models
class ArticleRequest(BaseModel):
    url: HttpUrl
    language: Optional[str] = "vi"

class ArticleResponse(BaseModel):
    url: str
    title: str
    authors: List[str]
    publish_date: Optional[str]
    text: str
    summary: str
    keywords: List[str]
    top_image: Optional[str]
    meta_description: Optional[str]
    extracted_at: str
    success: bool
    error: Optional[str] = None

class UrlMonitorRequest(BaseModel):
    source_url: HttpUrl
    check_interval: int = 3600  # Gi√¢y
    max_articles: int = 10

# Cache ƒë∆°n gi·∫£n ƒë·ªÉ l∆∞u k·∫øt qu·∫£
article_cache = {}
monitored_sources = {}

def verify_token(credentials: HTTPAuthorizationCredentials = Depends(security)):
    """X√°c th·ª±c Bearer token"""
    if credentials.credentials != BEARER_TOKEN:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Token kh√¥ng h·ª£p l·ªá",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return credentials.credentials

def get_article_hash(url: str) -> str:
    """T·∫°o hash cho URL ƒë·ªÉ cache"""
    return hashlib.md5(url.encode()).hexdigest()

def extract_article_content(url: str, language: str = "vi") -> ArticleResponse:
    """Tr√≠ch xu·∫•t n·ªôi dung b√†i vi·∫øt t·ª´ URL"""
    try:
        # T·∫°o c·∫•u h√¨nh cho newspaper
        config = newspaper.Config()
        config.browser_user_agent = ua.random
        config.request_timeout = 10
        config.number_threads = 1
        
        # T·∫£i v√† ph√¢n t√≠ch b√†i vi·∫øt
        article = newspaper.Article(url, config=config, language=language)
        article.download()
        article.parse()
        
        # Th·ª±c hi·ªán NLP ƒë·ªÉ l·∫•y keywords v√† summary
        try:
            article.nlp()
        except Exception as e:
            logger.warning(f"NLP th·∫•t b·∫°i cho {url}: {e}")
        
        # T·∫°o response
        response = ArticleResponse(
            url=url,
            title=article.title or "Kh√¥ng c√≥ ti√™u ƒë·ªÅ",
            authors=article.authors or [],
            publish_date=article.publish_date.isoformat() if article.publish_date else None,
            text=article.text or "Kh√¥ng th·ªÉ tr√≠ch xu·∫•t n·ªôi dung",
            summary=article.summary or "Kh√¥ng c√≥ t√≥m t·∫Øt",
            keywords=article.keywords or [],
            top_image=article.top_image or None,
            meta_description=article.meta_description or None,
            extracted_at=datetime.now().isoformat(),
            success=True
        )
        
        return response
        
    except Exception as e:
        logger.error(f"L·ªói tr√≠ch xu·∫•t {url}: {e}")
        return ArticleResponse(
            url=url,
            title="",
            authors=[],
            publish_date=None,
            text="",
            summary="",
            keywords=[],
            top_image=None,
            meta_description=None,
            extracted_at=datetime.now().isoformat(),
            success=False,
            error=str(e)
        )

@app.get("/", response_class=HTMLResponse)
async def read_root():
    """Trang ch·ªß API"""
    api_domain = os.getenv("API_DOMAIN", "api.localhost")
    main_domain = os.getenv("DOMAIN", "localhost")
    html_content = f'''
    <!DOCTYPE html>
    <html lang="vi">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>N8N Article Crawler API</title>
        <style>
            body {{ font-family: Arial, sans-serif; margin: 40px; background: #f5f5f5; }}
            .container {{ max-width: 800px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }}
            h1 {{ color: #333; text-align: center; }}
            .endpoint {{ background: #f8f9fa; padding: 20px; margin: 20px 0; border-radius: 5px; border-left: 4px solid #007bff; }}
            .method {{ display: inline-block; padding: 4px 8px; border-radius: 3px; color: white; font-weight: bold; }}
            .post {{ background: #28a745; }}
            .get {{ background: #007bff; }}
            code {{ background: #e9ecef; padding: 2px 4px; border-radius: 3px; }}
            .auth-note {{ background: #fff3cd; border: 1px solid #ffeaa7; padding: 15px; border-radius: 5px; margin: 20px 0; }}
            .example {{ background: #f8f9fa; padding: 15px; margin: 10px 0; border-radius: 5px; border: 1px solid #dee2e6; }}
            .success {{ color: #28a745; }}
            .warning {{ color: #ffc107; }}
        </style>
    </head>
    <body>
        <div class="container">
            <h1>üöÄ N8N Article Crawler API</h1>
            <p>API ƒë·ªÉ crawl n·ªôi dung b√†i vi·∫øt t·ª´ c√°c trang web b√°o v·ªõi kh·∫£ nƒÉng theo d√µi t·ª± ƒë·ªông.</p>
            
            <div class="auth-note">
                <strong>‚ö†Ô∏è L∆∞u √Ω:</strong> T·∫•t c·∫£ API ƒë·ªÅu y√™u c·∫ßu Bearer token trong header Authorization.
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/extract</strong><br>
                Tr√≠ch xu·∫•t n·ªôi dung t·ª´ m·ªôt URL b√†i vi·∫øt c·ª• th·ªÉ.<br>
                <div class="example">
                    <strong>V√≠ d·ª• request:</strong><br>
                    <code>POST https://{api_domain}/extract</code><br>
                    <code>Authorization: Bearer YOUR_TOKEN</code><br>
                    <code>{{"url": "https://example.com/article", "language": "vi"}}</code>
                </div>
            </div>
            
            <div class="endpoint">
                <span class="method post">POST</span> <strong>/monitor</strong><br>
                Thi·∫øt l·∫≠p theo d√µi t·ª± ƒë·ªông cho m·ªôt ngu·ªìn tin (trang web).
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/sources</strong><br>
                Li·ªát k√™ t·∫•t c·∫£ ngu·ªìn tin ƒëang ƒë∆∞·ª£c theo d√µi.
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/health</strong><br>
                Ki·ªÉm tra s·ª©c kh·ªèe API.
            </div>
            
            <div class="endpoint">
                <span class="method get">GET</span> <strong>/docs</strong><br>
                T√†i li·ªáu API chi ti·∫øt v·ªõi giao di·ªán Swagger.
            </div>
            
            <h3>üìã C√°ch s·ª≠ d·ª•ng v·ªõi N8N:</h3>
            <p>1. T·∫°o HTTP Request node trong N8N</p>
            <p>2. ƒê·∫∑t URL: <code>https://{api_domain}/extract</code></p>
            <p>3. Method: POST</p>
            <p>4. Headers: <code>Authorization: Bearer YOUR_TOKEN</code></p>
            <p>5. Body: <code>{{"url": "https://example.com/article"}}</code></p>
            
            <h3>üîó Li√™n k·∫øt h·ªØu √≠ch:</h3>
            <p>üåê <a href="https://{main_domain}">N8N Dashboard</a></p>
            <p>üìñ <a href="/docs">API Documentation</a></p>
            <p>‚ù§Ô∏è <a href="/health">API Health Check</a></p>
            
            <h3>üîÑ Response Format:</h3>
            <div class="example">
                <code>{{<br>
                &nbsp;&nbsp;"url": "https://example.com/article",<br>
                &nbsp;&nbsp;"title": "Ti√™u ƒë·ªÅ b√†i vi·∫øt",<br>
                &nbsp;&nbsp;"authors": ["T√°c gi·∫£"],<br>
                &nbsp;&nbsp;"text": "N·ªôi dung ƒë·∫ßy ƒë·ªß...",<br>
                &nbsp;&nbsp;"summary": "T√≥m t·∫Øt b√†i vi·∫øt...",<br>
                &nbsp;&nbsp;"keywords": ["t·ª´ kh√≥a"],<br>
                &nbsp;&nbsp;"success": true<br>
                }}</code>
            </div>
        </div>
    </body>
    </html>
    '''
    return html_content

@app.post("/extract", response_model=ArticleResponse)
async def extract_article(
    request: ArticleRequest,
    token: str = Depends(verify_token)
) -> ArticleResponse:
    """Tr√≠ch xu·∫•t n·ªôi dung t·ª´ URL b√†i vi·∫øt"""
    
    url = str(request.url)
    article_hash = get_article_hash(url)
    
    # Ki·ªÉm tra cache (cache trong 1 gi·ªù)
    if article_hash in article_cache:
        cached_data = article_cache[article_hash]
        if time.time() - cached_data['timestamp'] < 3600:
            logger.info(f"Tr·∫£ v·ªÅ k·∫øt qu·∫£ t·ª´ cache cho {url}")
            return cached_data['data']
    
    logger.info(f"ƒêang tr√≠ch xu·∫•t n·ªôi dung t·ª´: {url}")
    result = extract_article_content(url, request.language)
    
    # L∆∞u v√†o cache
    article_cache[article_hash] = {
        'data': result,
        'timestamp': time.time()
    }
    
    return result

@app.post("/monitor")
async def setup_monitoring(
    request: UrlMonitorRequest,
    token: str = Depends(verify_token)
) -> Dict:
    """Thi·∫øt l·∫≠p theo d√µi t·ª± ƒë·ªông cho ngu·ªìn tin"""
    
    source_url = str(request.source_url)
    
    try:
        # T·∫°o source object t·ª´ newspaper
        source = newspaper.build(source_url, language='vi')
        
        # L∆∞u th√¥ng tin theo d√µi
        monitored_sources[source_url] = {
            'source': source,
            'check_interval': request.check_interval,
            'max_articles': request.max_articles,
            'last_check': None,
            'articles_found': 0,
            'created_at': datetime.now().isoformat()
        }
        
        return {
            "success": True,
            "message": f"ƒê√£ thi·∫øt l·∫≠p theo d√µi cho {source_url}",
            "articles_count": len(source.articles),
            "check_interval": request.check_interval
        }
        
    except Exception as e:
        logger.error(f"L·ªói thi·∫øt l·∫≠p theo d√µi {source_url}: {e}")
        raise HTTPException(
            status_code=400,
            detail=f"Kh√¥ng th·ªÉ thi·∫øt l·∫≠p theo d√µi: {str(e)}"
        )

@app.get("/sources")
async def get_monitored_sources(token: str = Depends(verify_token)) -> Dict:
    """L·∫•y danh s√°ch ngu·ªìn tin ƒëang theo d√µi"""
    return {
        "total_sources": len(monitored_sources),
        "sources": {url: {
            "check_interval": data["check_interval"],
            "max_articles": data["max_articles"],
            "last_check": data["last_check"],
            "articles_found": data["articles_found"],
            "created_at": data["created_at"]
        } for url, data in monitored_sources.items()}
    }

@app.get("/health")
async def health_check():
    """Ki·ªÉm tra s·ª©c kh·ªèe API"""
    return {
        "status": "healthy",
        "timestamp": datetime.now().isoformat(),
        "cache_size": len(article_cache),
        "monitored_sources": len(monitored_sources)
    }

if __name__ == "__main__":
    uvicorn.run(app, host="0.0.0.0", port=8001)
EOF

    # T·∫°o script ch·∫°y FastAPI
    cat << EOF > $N8N_DIR/fastapi/run.sh
#!/bin/bash
export FASTAPI_PASSWORD="$FASTAPI_PASSWORD"
export DOMAIN="$DOMAIN"
export API_DOMAIN="$API_DOMAIN"
cd /app/fastapi
/opt/fastapi-venv/bin/uvicorn main:app --host 0.0.0.0 --port 8001 --reload
EOF
    chmod +x $N8N_DIR/fastapi/run.sh
fi

# T·∫°o Dockerfile t√πy ch·ªânh cho n8n v·ªõi FFmpeg, yt-dlp v√† Puppeteer
echo "T·∫°o Dockerfile t√πy ch·ªânh cho n8n..."
cat << EOF > $N8N_DIR/Dockerfile
FROM n8nio/n8n:latest

USER root

# C·∫≠p nh·∫≠t packages v√† c√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt
RUN apk update && apk add --no-cache \\
    ffmpeg \\
    python3 \\
    py3-pip \\
    chromium \\
    chromium-chromedriver \\
    ttf-freefont \\
    font-noto-emoji \\
    wqy-zenhei \\
    curl \\
    wget \\
    git \\
    bash \\
    jq \\
    tar \\
    gzip

# C√†i ƒë·∫∑t yt-dlp
RUN pip3 install --no-cache-dir yt-dlp

# C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán Python b·ªï sung
RUN pip3 install --no-cache-dir requests beautifulsoup4 lxml

# Thi·∫øt l·∫≠p bi·∫øn m√¥i tr∆∞·ªùng cho Chromium
ENV PUPPETEER_SKIP_CHROMIUM_DOWNLOAD=true
ENV PUPPETEER_EXECUTABLE_PATH=/usr/bin/chromium-browser
ENV CHROME_BIN=/usr/bin/chromium-browser
ENV CHROME_PATH=/usr/bin/chromium-browser

# C√†i ƒë·∫∑t Puppeteer v√† dependencies
RUN npm install -g puppeteer@latest
RUN npm install -g playwright
RUN npx playwright install chromium

# T·∫°o th∆∞ m·ª•c v√† set quy·ªÅn
RUN mkdir -p /home/node/files && chown -R node:node /home/node/files
RUN mkdir -p /home/node/.cache && chown -R node:node /home/node/.cache

# Chuy·ªÉn v·ªÅ user node
USER node

# Thi·∫øt l·∫≠p th∆∞ m·ª•c l√†m vi·ªác
WORKDIR /home/node

# Expose port
EXPOSE 5678

# L·ªánh kh·ªüi ƒë·ªông
CMD ["n8n", "start"]
EOF

# T·∫°o docker-compose.yml
echo "T·∫°o docker-compose.yml..."
if [ "$SETUP_FASTAPI" = true ]; then
cat << EOF > $N8N_DIR/docker-compose.yml
version: '3.8'

services:
  n8n:
    build: .
    image: n8n-ffmpeg-latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=changeme
      - N8N_HOST=\${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://\${DOMAIN}/
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
    volumes:
      - ./files:/files
      - n8n_data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n-network

  fastapi:
    image: python:3.11-slim
    container_name: fastapi-crawler
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      - FASTAPI_PASSWORD=\${FASTAPI_PASSWORD}
      - DOMAIN=\${DOMAIN}
      - API_DOMAIN=\${API_DOMAIN}
    volumes:
      - ./fastapi:/app/fastapi
      - /opt/fastapi-venv:/opt/fastapi-venv
    working_dir: /app
    command: bash -c "apt-get update && apt-get install -y curl && /app/fastapi/run.sh"
    networks:
      - n8n-network

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - n8n-network

volumes:
  n8n_data:
  caddy_data:
  caddy_config:

networks:
  n8n-network:
    driver: bridge
EOF
else
    cat << EOF > $N8N_DIR/docker-compose.yml
version: '3.8'

services:
  n8n:
    build: .
    image: n8n-ffmpeg-latest
    container_name: n8n
    restart: unless-stopped
    ports:
      - "5678:5678"
    environment:
      - N8N_BASIC_AUTH_ACTIVE=true
      - N8N_BASIC_AUTH_USER=admin
      - N8N_BASIC_AUTH_PASSWORD=changeme
      - N8N_HOST=\${DOMAIN}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://\${DOMAIN}/
      - GENERIC_TIMEZONE=Asia/Ho_Chi_Minh
    volumes:
      - ./files:/files
      - n8n_data:/home/node/.n8n
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - n8n-network

  caddy:
    image: caddy:2
    container_name: caddy
    restart: unless-stopped
    ports:
      - "8080:80"
      - "443:443"
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
      - caddy_data:/data
      - caddy_config:/config
    networks:
      - n8n-network

volumes:
  n8n_data:
  caddy_data:
  caddy_config:

networks:
  n8n-network:
    driver: bridge
EOF
fi

# T·∫°o .env file
echo "T·∫°o file .env..."
cat << EOF > $N8N_DIR/.env
DOMAIN=$DOMAIN
API_DOMAIN=$API_DOMAIN
FASTAPI_PASSWORD=$FASTAPI_PASSWORD
EOF

# T·∫°o Caddyfile
echo "T·∫°o Caddyfile cho SSL t·ª± ƒë·ªông..."
if [ "$SETUP_FASTAPI" = true ]; then
cat << EOF > $N8N_DIR/Caddyfile
# N8N Main Domain
$DOMAIN {
    reverse_proxy n8n:5678
    
    # C·∫•u h√¨nh headers b·∫£o m·∫≠t
    header {
        # B·∫£o m·∫≠t
        Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Lo·∫°i b·ªè th√¥ng tin server
        -Server
    }
    
    # C·∫•u h√¨nh gzip
    encode gzip
    
    # Log
    log {
        output file /var/log/caddy/n8n-access.log
        format console
    }
}

# FastAPI Subdomain
$API_DOMAIN {
    reverse_proxy fastapi:8001
    
    # C·∫•u h√¨nh headers b·∫£o m·∫≠t
    header {
        # B·∫£o m·∫≠t
        Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "SAMEORIGIN"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # CORS cho API
        Access-Control-Allow-Origin "*"
        Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
        Access-Control-Allow-Headers "Content-Type, Authorization"
        
        # Lo·∫°i b·ªè th√¥ng tin server
        -Server
    }
    
    # C·∫•u h√¨nh gzip
    encode gzip
    
    # Log
    log {
        output file /var/log/caddy/api-access.log
        format console
    }
}
EOF
else
    cat << EOF > $N8N_DIR/Caddyfile
$DOMAIN {
    reverse_proxy n8n:5678
    
    # C·∫•u h√¨nh headers b·∫£o m·∫≠t
    header {
        # B·∫£o m·∫≠t
        Strict-Transport-Security "max-age=63072000; includeSubDomains; preload"
        X-Content-Type-Options "nosniff"
        X-Frame-Options "DENY"
        X-XSS-Protection "1; mode=block"
        Referrer-Policy "strict-origin-when-cross-origin"
        
        # Lo·∫°i b·ªè th√¥ng tin server
        -Server
    }
    
    # C·∫•u h√¨nh gzip
    encode gzip
    
    # Log
    log {
        output file /var/log/caddy/access.log
        format console
    }
}
EOF
fi

# T·∫°o script backup ƒë∆∞·ª£c c·∫£i ti·∫øn v·ªõi h·ªó tr·ª£ Telegram
echo "T·∫°o script backup workflows v√† credentials..."
cat << EOF > $N8N_DIR/backup-workflows.sh
#!/bin/bash

# C·∫•u h√¨nh
BACKUP_DIR="$N8N_DIR/files/backup_full"
TIMESTAMP=\$(date '+%Y%m%d_%H%M%S')
BACKUP_FILE="\$BACKUP_DIR/n8n_backup_\$TIMESTAMP.tar.gz"
TEMP_DIR="/tmp/n8n_backup_\$TIMESTAMP"

# Telegram c·∫•u h√¨nh
TELEGRAM_BOT_TOKEN="$TELEGRAM_BOT_TOKEN"
TELEGRAM_CHAT_ID="$TELEGRAM_CHAT_ID"
SEND_TO_TELEGRAM=$SETUP_TELEGRAM

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" | tee -a "\$BACKUP_DIR/backup.log"
}

# H√†m g·ª≠i tin nh·∫Øn Telegram
send_telegram_message() {
    local message="\$1"
    if [ "\$SEND_TO_TELEGRAM" = true ] && [ -n "\$TELEGRAM_BOT_TOKEN" ] && [ -n "\$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendMessage" \\
            -d chat_id="\$TELEGRAM_CHAT_ID" \\
            -d text="\$message" \\
            -d parse_mode="HTML" > /dev/null
    fi
}

# H√†m g·ª≠i file qua Telegram
send_telegram_file() {
    local file_path="\$1"
    local caption="\$2"
    if [ "\$SEND_TO_TELEGRAM" = true ] && [ -n "\$TELEGRAM_BOT_TOKEN" ] && [ -n "\$TELEGRAM_CHAT_ID" ]; then
        curl -s -X POST "https://api.telegram.org/bot\$TELEGRAM_BOT_TOKEN/sendDocument" \\
            -F chat_id="\$TELEGRAM_CHAT_ID" \\
            -F document=@"\$file_path" \\
            -F caption="\$caption" > /dev/null
    fi
}

log "üîÑ B·∫Øt ƒë·∫ßu qu√° tr√¨nh backup N8N..."
send_telegram_message "üîÑ <b>B·∫Øt ƒë·∫ßu backup N8N</b>%0AüìÖ Th·ªùi gian: \$(date '+%d/%m/%Y %H:%M:%S')"

# T·∫°o th∆∞ m·ª•c backup n·∫øu kh√¥ng t·ªìn t·∫°i
mkdir -p "\$BACKUP_DIR"
mkdir -p "\$TEMP_DIR/workflows"
mkdir -p "\$TEMP_DIR/credentials"

# T√¨m container N8N
log "T√¨m container N8N..."
N8N_CONTAINER=\$(docker ps -q --filter "name=n8n" 2>/dev/null)

if [ -z "\$N8N_CONTAINER" ]; then
    log "‚ùå L·ªói: Kh√¥ng t√¨m th·∫•y container n8n ƒëang ch·∫°y"
    send_telegram_message "‚ùå <b>L·ªói Backup</b>%0AKh√¥ng t√¨m th·∫•y container N8N ƒëang ch·∫°y"
    rm -rf "\$TEMP_DIR"
    exit 1
fi

log "‚úÖ T√¨m th·∫•y container N8N: \$N8N_CONTAINER"

# Xu·∫•t workflows
log "üìù ƒêang xu·∫•t workflows..."
WORKFLOWS=\$(docker exec \$N8N_CONTAINER n8n list:workflows --json 2>/dev/null)
if [ -z "\$WORKFLOWS" ] || [ "\$WORKFLOWS" = "[]" ]; then
    log "‚ö†Ô∏è C·∫£nh b√°o: Kh√¥ng t√¨m th·∫•y workflow n√†o ho·∫∑c ch∆∞a c√≥ workflow"
    echo "[]" > "\$TEMP_DIR/workflows/empty.json"
else
    # Xu·∫•t t·ª´ng workflow
    WORKFLOW_COUNT=0
    echo "\$WORKFLOWS" | jq -c '.[]' | while read -r workflow; do
        id=\$(echo "\$workflow" | jq -r '.id')
        name=\$(echo "\$workflow" | jq -r '.name' | tr -dc '[:alnum:][:space:]_-' | tr '[:space:]' '_')
        log "  ‚Üí Xu·∫•t workflow: \$name (ID: \$id)"
        
        # Xu·∫•t workflow v·ªõi x·ª≠ l√Ω l·ªói
        if docker exec \$N8N_CONTAINER n8n export:workflow --id="\$id" --output="/tmp/workflow_\$id.json" 2>/dev/null; then
            docker cp "\$N8N_CONTAINER:/tmp/workflow_\$id.json" "\$TEMP_DIR/workflows/\$id-\$name.json"
            docker exec \$N8N_CONTAINER rm -f "/tmp/workflow_\$id.json"
            WORKFLOW_COUNT=\$((WORKFLOW_COUNT + 1))
        else
            log "    ‚ö†Ô∏è L·ªói xu·∫•t workflow \$name"
        fi
    done
    
    # L∆∞u s·ªë l∆∞·ª£ng workflow ƒë√£ backup
    echo "\$WORKFLOW_COUNT" > "\$TEMP_DIR/workflow_count.txt"
fi

# Sao l∆∞u credentials v√† database
log "üîê ƒêang sao l∆∞u credentials v√† database..."
if docker exec \$N8N_CONTAINER test -f "/home/node/.n8n/database.sqlite"; then
    docker cp "\$N8N_CONTAINER:/home/node/.n8n/database.sqlite" "\$TEMP_DIR/credentials/"
    log "  ‚úÖ ƒê√£ sao l∆∞u database.sqlite"
else
    log "  ‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y database.sqlite"
fi

if docker exec \$N8N_CONTAINER test -f "/home/node/.n8n/config"; then
    docker cp "\$N8N_CONTAINER:/home/node/.n8n/config" "\$TEMP_DIR/credentials/"
    log "  ‚úÖ ƒê√£ sao l∆∞u config"
fi

# T·∫°o th√¥ng tin backup
cat << EOL > "\$TEMP_DIR/backup_info.txt"
Backup N8N ƒë∆∞·ª£c t·∫°o v√†o: \$(date '+%Y-%m-%d %H:%M:%S')
Domain: $DOMAIN
Container ID: \$N8N_CONTAINER
S·ªë workflow: \$(cat "\$TEMP_DIR/workflow_count.txt" 2>/dev/null || echo "0")
EOL

# T·∫°o file tar.gz
log "üì¶ ƒêang t·∫°o file backup..."
cd "\$(dirname "\$TEMP_DIR")"
tar -czf "\$BACKUP_FILE" "\$(basename "\$TEMP_DIR")"

# Ki·ªÉm tra backup th√†nh c√¥ng
if [ -f "\$BACKUP_FILE" ]; then
    BACKUP_SIZE=\$(du -h "\$BACKUP_FILE" | cut -f1)
    log "‚úÖ Backup th√†nh c√¥ng: \$BACKUP_FILE (K√≠ch th∆∞·ªõc: \$BACKUP_SIZE)"
    
    # G·ª≠i th√¥ng b√°o v√† file backup qua Telegram
    send_telegram_message "‚úÖ <b>Backup N8N th√†nh c√¥ng!</b>%0AüìÅ File: n8n_backup_\$TIMESTAMP.tar.gz%0Aüìä K√≠ch th∆∞·ªõc: \$BACKUP_SIZE%0Aüïê Th·ªùi gian: \$(date '+%d/%m/%Y %H:%M:%S')"
    
    # G·ª≠i file backup qua Telegram (n·∫øu file < 50MB)
    FILE_SIZE_MB=\$(stat -f%z "\$BACKUP_FILE" 2>/dev/null || stat -c%s "\$BACKUP_FILE" 2>/dev/null)
    FILE_SIZE_MB=\$((FILE_SIZE_MB / 1024 / 1024))
    
    if [ \$FILE_SIZE_MB -lt 50 ]; then
        log "üì§ ƒêang g·ª≠i file backup qua Telegram..."
        send_telegram_file "\$BACKUP_FILE" "üì¶ N8N Backup - \$(date '+%d/%m/%Y %H:%M:%S')"
        log "‚úÖ ƒê√£ g·ª≠i file backup qua Telegram"
    else
        log "‚ö†Ô∏è File backup qu√° l·ªõn (\${FILE_SIZE_MB}MB) ƒë·ªÉ g·ª≠i qua Telegram"
        send_telegram_message "‚ö†Ô∏è File backup qu√° l·ªõn (\${FILE_SIZE_MB}MB) ƒë·ªÉ g·ª≠i qua Telegram"
    fi
else
    log "‚ùå L·ªói: Kh√¥ng th·ªÉ t·∫°o file backup"
    send_telegram_message "‚ùå <b>L·ªói Backup</b>%0AKh√¥ng th·ªÉ t·∫°o file backup"
    rm -rf "\$TEMP_DIR"
    exit 1
fi

# D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m
log "üßπ D·ªçn d·∫πp th∆∞ m·ª•c t·∫°m..."
rm -rf "\$TEMP_DIR"

# Gi·ªØ l·∫°i t·ªëi ƒëa 30 b·∫£n backup g·∫ßn nh·∫•t
log "üóÇÔ∏è D·ªçn d·∫πp backup c≈©..."
BACKUP_COUNT=\$(ls -1 "\$BACKUP_DIR"/n8n_backup_*.tar.gz 2>/dev/null | wc -l)
if [ \$BACKUP_COUNT -gt 30 ]; then
    REMOVED_COUNT=\$((\$BACKUP_COUNT - 30))
    ls -t "\$BACKUP_DIR"/n8n_backup_*.tar.gz | tail -n +31 | xargs -r rm
    log "üóëÔ∏è ƒê√£ x√≥a \$REMOVED_COUNT backup c≈©, gi·ªØ l·∫°i 30 backup g·∫ßn nh·∫•t"
fi

log "üéâ Ho√†n t·∫•t qu√° tr√¨nh backup!"
EOF

# ƒê·∫∑t quy·ªÅn th·ª±c thi cho script backup
chmod +x $N8N_DIR/backup-workflows.sh

# T·∫°o cron job cho backup h√†ng ng√†y
echo "Thi·∫øt l·∫≠p backup t·ª± ƒë·ªông h√†ng ng√†y..."
CRON_JOB="0 2 * * * $N8N_DIR/backup-workflows.sh"

# Ki·ªÉm tra xem cron job ƒë√£ t·ªìn t·∫°i ch∆∞a
if ! crontab -l 2>/dev/null | grep -q "$N8N_DIR/backup-workflows.sh"; then
    # Th√™m cron job
    (crontab -l 2>/dev/null; echo "$CRON_JOB") | crontab -
    echo "‚úÖ ƒê√£ thi·∫øt l·∫≠p backup t·ª± ƒë·ªông l√∫c 2:00 s√°ng h√†ng ng√†y"
else
    echo "‚ÑπÔ∏è Cron job backup ƒë√£ t·ªìn t·∫°i"
fi

# ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n
echo "ƒê·∫∑t quy·ªÅn cho th∆∞ m·ª•c n8n..."
chown -R 1000:1000 $N8N_DIR
chmod -R 755 $N8N_DIR

# Kh·ªüi ƒë·ªông c√°c container
echo "Kh·ªüi ƒë·ªông c√°c container..."
echo "L∆∞u √Ω: Qu√° tr√¨nh build image c√≥ th·ªÉ m·∫•t v√†i ph√∫t, vui l√≤ng ƒë·ª£i..."
cd $N8N_DIR

# Ki·ªÉm tra c·ªïng 80 c√≥ ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng kh√¥ng
if netstat -tuln | grep -q ":80\s"; then
    echo "C·∫¢NH B√ÅO: C·ªïng 80 ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng b·ªüi m·ªôt ·ª©ng d·ª•ng kh√°c. Caddy s·∫Ω s·ª≠ d·ª•ng c·ªïng 8080."
    # ƒê√£ c·∫•u h√¨nh 8080 trong docker-compose.yml
else
    # N·∫øu c·ªïng 80 tr·ªëng, c·∫≠p nh·∫≠t docker-compose.yml ƒë·ªÉ s·ª≠ d·ª•ng c·ªïng 80
    sed -i 's/"8080:80"/"80:80"/g' $N8N_DIR/docker-compose.yml
    echo "C·ªïng 80 ƒëang tr·ªëng. Caddy s·∫Ω s·ª≠ d·ª•ng c·ªïng 80 m·∫∑c ƒë·ªãnh."
fi

# Ki·ªÉm tra quy·ªÅn truy c·∫≠p Docker
echo "Ki·ªÉm tra quy·ªÅn truy c·∫≠p Docker..."
if ! docker ps &>/dev/null; then
    echo "Kh·ªüi ƒë·ªông container v·ªõi sudo v√¨ quy·ªÅn truy c·∫≠p Docker..."
    # S·ª≠ d·ª•ng docker-compose ho·∫∑c docker compose t√πy theo phi√™n b·∫£n
    if command -v docker-compose &> /dev/null; then
        sudo docker-compose up -d
    elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
        sudo docker compose up -d
    else
        echo "L·ªói: Kh√¥ng t√¨m th·∫•y l·ªánh docker-compose ho·∫∑c docker compose."
        exit 1
    fi
else
    # S·ª≠ d·ª•ng docker-compose ho·∫∑c docker compose t√πy theo phi√™n b·∫£n
    if command -v docker-compose &> /dev/null; then
        docker-compose up -d
    elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
        docker compose up -d
    else
        echo "L·ªói: Kh√¥ng t√¨m th·∫•y l·ªánh docker-compose ho·∫∑c docker compose."
        exit 1
    fi
fi

# ƒê·ª£i m·ªôt l√∫c ƒë·ªÉ c√°c container c√≥ th·ªÉ kh·ªüi ƒë·ªông
echo "ƒê·ª£i c√°c container kh·ªüi ƒë·ªông..."
sleep 15

# T·∫°o script c·∫≠p nh·∫≠t t·ª± ƒë·ªông
echo "T·∫°o script c·∫≠p nh·∫≠t t·ª± ƒë·ªông..."
cat << EOF > $N8N_DIR/update-n8n.sh
#!/bin/bash

# ƒê∆∞·ªùng d·∫´n ƒë·∫øn th∆∞ m·ª•c n8n
N8N_DIR="$N8N_DIR"

# H√†m ghi log
log() {
    echo "[\$(date '+%Y-%m-%d %H:%M:%S')] \$1" >> \$N8N_DIR/update.log
}

log "B·∫Øt ƒë·∫ßu ki·ªÉm tra c·∫≠p nh·∫≠t..."

# Ki·ªÉm tra Docker command
if command -v docker-compose &> /dev/null; then
    DOCKER_COMPOSE="docker-compose"
elif command -v docker &> /dev/null && docker compose version &> /dev/null; then
    DOCKER_COMPOSE="docker compose"
else
    log "Kh√¥ng t√¨m th·∫•y l·ªánh docker-compose ho·∫∑c docker compose."
    exit 1
fi

# C·∫≠p nh·∫≠t yt-dlp tr√™n host
log "C·∫≠p nh·∫≠t yt-dlp tr√™n host system..."
if command -v pipx &> /dev/null; then
    pipx upgrade yt-dlp
elif [ -d "/opt/yt-dlp-venv" ]; then
    /opt/yt-dlp-venv/bin/pip install -U yt-dlp
else
    log "Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t yt-dlp ƒë√£ bi·∫øt"
fi

# L·∫•y phi√™n b·∫£n hi·ªán t·∫°i
CURRENT_IMAGE_ID=\$(docker images -q n8n-ffmpeg-latest)
if [ -z "\$CURRENT_IMAGE_ID" ]; then
    log "Kh√¥ng t√¨m th·∫•y image n8n-ffmpeg-latest"
    exit 1
fi

# Ki·ªÉm tra v√† x√≥a image g·ªëc n8nio/n8n c≈© n·∫øu c·∫ßn
OLD_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Pull image g·ªëc m·ªõi nh·∫•t
log "K√©o image n8nio/n8n m·ªõi nh·∫•t"
docker pull n8nio/n8n

# L·∫•y image ID m·ªõi
NEW_BASE_IMAGE_ID=\$(docker images -q n8nio/n8n)

# Ki·ªÉm tra xem image g·ªëc ƒë√£ thay ƒë·ªïi ch∆∞a
if [ "\$NEW_BASE_IMAGE_ID" != "\$OLD_BASE_IMAGE_ID" ]; then
    log "Ph√°t hi·ªán image m·ªõi (\${NEW_BASE_IMAGE_ID}), ti·∫øn h√†nh c·∫≠p nh·∫≠t..."
    
    # Sao l∆∞u d·ªØ li·ªáu n8n tr∆∞·ªõc khi c·∫≠p nh·∫≠t
    \$N8N_DIR/backup-workflows.sh
    
    # Build l·∫°i image n8n-ffmpeg
    cd \$N8N_DIR
    log "ƒêang build l·∫°i image n8n-ffmpeg-latest..."
    \$DOCKER_COMPOSE build
    
    # Kh·ªüi ƒë·ªông l·∫°i container
    log "Kh·ªüi ƒë·ªông l·∫°i container..."
    \$DOCKER_COMPOSE down
    \$DOCKER_COMPOSE up -d
    
    log "C·∫≠p nh·∫≠t ho√†n t·∫•t!"
else
    log "Image n8nio/n8n ƒë√£ l√† phi√™n b·∫£n m·ªõi nh·∫•t"
fi
EOF

chmod +x $N8N_DIR/update-n8n.sh

# T·∫°o script ki·ªÉm tra SSL
echo "T·∫°o script ki·ªÉm tra SSL..."
cat << EOF > $N8N_DIR/check-ssl.sh
#!/bin/bash

echo "======================================================================"
echo "                    KI·ªÇM TRA SSL V√Ä DOMAIN"
echo "======================================================================"

# Ki·ªÉm tra DNS
echo "üîç Ki·ªÉm tra DNS cho domain ch√≠nh..."
MAIN_IP=\$(dig +short $DOMAIN | head -1)
SERVER_IP=\$(curl -s https://api.ipify.org)

echo "üìç IP Server: \$SERVER_IP"
echo "üìç IP Domain $DOMAIN: \$MAIN_IP"

if [ "\$MAIN_IP" = "\$SERVER_IP" ]; then
    echo "‚úÖ Domain $DOMAIN ƒë√£ tr·ªè ƒë√∫ng"
else
    echo "‚ùå Domain $DOMAIN ch∆∞a tr·ªè ƒë√∫ng"
fi

# Ki·ªÉm tra API domain n·∫øu c√≥
if [ "$SETUP_FASTAPI" = true ]; then
    echo ""
    echo "üîç Ki·ªÉm tra DNS cho API domain..."
    API_IP=\$(dig +short $API_DOMAIN | head -1)
    echo "üìç IP API Domain $API_DOMAIN: \$API_IP"
    
    if [ "\$API_IP" = "\$SERVER_IP" ]; then
        echo "‚úÖ API Domain $API_DOMAIN ƒë√£ tr·ªè ƒë√∫ng"
    else
        echo "‚ùå API Domain $API_DOMAIN ch∆∞a tr·ªè ƒë√∫ng"
    fi
fi

echo ""
echo "üê≥ Ki·ªÉm tra containers..."
docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}"

echo ""
echo "üìã Ki·ªÉm tra logs containers..."
echo "--- Caddy Logs (10 d√≤ng cu·ªëi) ---"
docker logs caddy --tail 10

if [ "$SETUP_FASTAPI" = true ]; then
    echo ""
    echo "--- FastAPI Logs (10 d√≤ng cu·ªëi) ---"
    docker logs fastapi-crawler --tail 10
fi

echo ""
echo "--- N8N Logs (10 d√≤ng cu·ªëi) ---"
docker logs n8n --tail 10

echo ""
echo "üåê Ki·ªÉm tra k·∫øt n·ªëi..."
echo "Test HTTP $DOMAIN:"
curl -I -s --connect-timeout 5 http://$DOMAIN || echo "‚ùå HTTP kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c"

echo ""
echo "Test HTTPS $DOMAIN:"
curl -I -s --connect-timeout 5 https://$DOMAIN || echo "‚ùå HTTPS kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c"

if [ "$SETUP_FASTAPI" = true ]; then
    echo ""
    echo "Test API $API_DOMAIN:"
    curl -I -s --connect-timeout 5 https://$API_DOMAIN || echo "‚ùå API kh√¥ng k·∫øt n·ªëi ƒë∆∞·ª£c"
fi

echo ""
echo "üîß H∆∞·ªõng d·∫´n debug:"
echo "1. N·∫øu DNS ch∆∞a ƒë√∫ng: C·∫≠p nh·∫≠t b·∫£n ghi A record"
echo "2. N·∫øu container kh√¥ng ch·∫°y: docker-compose restart"
echo "3. N·∫øu SSL l·ªói: ƒê·ª£i 2-5 ph√∫t ƒë·ªÉ Let's Encrypt c·∫•p cert"
echo "4. Xem logs chi ti·∫øt: docker-compose logs -f caddy"
echo "======================================================================"
EOF

chmod +x $N8N_DIR/check-ssl.sh

# T·∫°o cron job cho c·∫≠p nh·∫≠t t·ª± ƒë·ªông (h√†ng tu·∫ßn)
CRON_UPDATE="0 3 * * 0 $N8N_DIR/update-n8n.sh"
if ! crontab -l 2>/dev/null | grep -q "$N8N_DIR/update-n8n.sh"; then
    (crontab -l 2>/dev/null; echo "$CRON_UPDATE") | crontab -
    echo "‚úÖ ƒê√£ thi·∫øt l·∫≠p c·∫≠p nh·∫≠t t·ª± ƒë·ªông v√†o Ch·ªß nh·∫≠t h√†ng tu·∫ßn l√∫c 3:00 s√°ng"
fi

# T·∫°o l·∫ßn backup ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra
echo "T·∫°o backup ƒë·∫ßu ti√™n ƒë·ªÉ ki·ªÉm tra..."
$N8N_DIR/backup-workflows.sh

# Ch·∫°y script ki·ªÉm tra SSL sau khi kh·ªüi ƒë·ªông
echo ""
echo "üîç Ch·∫°y ki·ªÉm tra SSL v√† domain..."
sleep 5
$N8N_DIR/check-ssl.sh

# Hi·ªÉn th·ªã th√¥ng tin ho√†n th√†nh
echo ""
echo "======================================================================"
echo "                    C√ÄI ƒê·∫∂T HO√ÄN T·∫§T!"
echo "======================================================================"
echo ""
echo "üéâ N8N ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng v·ªõi c√°c t√≠nh nƒÉng:"
echo ""
echo "‚úÖ N8N v·ªõi FFmpeg, yt-dlp, Puppeteer"
echo "‚úÖ SSL t·ª± ƒë·ªông v·ªõi Let's Encrypt"
echo "‚úÖ Backup t·ª± ƒë·ªông h√†ng ng√†y l√∫c 2:00 s√°ng"
echo "‚úÖ C·∫≠p nh·∫≠t t·ª± ƒë·ªông h√†ng tu·∫ßn v√†o Ch·ªß nh·∫≠t"

if [ "$SETUP_TELEGRAM" = true ]; then
    echo "‚úÖ Backup qua Telegram ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p"
fi

if [ "$SETUP_FASTAPI" = true ]; then
    echo "‚úÖ FastAPI Article Crawler ƒë√£ ƒë∆∞·ª£c thi·∫øt l·∫≠p"
    echo "   ‚Üí API domain: https://$API_DOMAIN"
    echo "   ‚Üí API docs: https://$API_DOMAIN/docs"
    echo "   ‚Üí API endpoint: https://$API_DOMAIN/extract"
fi

echo ""
echo "üåê Truy c·∫≠p N8N t·∫°i: https://$DOMAIN"
echo "üîê T√†i kho·∫£n m·∫∑c ƒë·ªãnh: admin / changeme"
echo "üìÅ Th∆∞ m·ª•c c√†i ƒë·∫∑t: $N8N_DIR"
echo "üíæ Th∆∞ m·ª•c backup: $N8N_DIR/files/backup_full"
echo ""
echo "üìã L·ªánh h·ªØu √≠ch:"
echo "   - Xem logs: docker-compose logs -f"
echo "   - Kh·ªüi ƒë·ªông l·∫°i: docker-compose restart"
echo "   - D·ª´ng d·ªãch v·ª•: docker-compose down"
echo "   - Backup th·ªß c√¥ng: $N8N_DIR/backup-workflows.sh"
echo "   - C·∫≠p nh·∫≠t th·ªß c√¥ng: $N8N_DIR/update-n8n.sh"
echo ""

# Hi·ªÉn th·ªã c√°c v·∫•n ƒë·ªÅ c√†i ƒë·∫∑t n·∫øu c√≥
if [ -n "$INSTALL_ISSUES" ]; then
    echo "‚ö†Ô∏è C√°c v·∫•n ƒë·ªÅ ƒë√£ ghi nh·∫≠n:"
    echo -e "$INSTALL_ISSUES"
echo ""
fi

echo "üîß H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng chi ti·∫øt:"
echo "   - T√†i li·ªáu N8N: https://docs.n8n.io"
echo "   - H·ªó tr·ª£: https://community.n8n.io"

if [ "$SETUP_FASTAPI" = true ]; then
echo ""
    echo "üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng FastAPI Crawler v·ªõi N8N:"
    echo "   1. T·∫°o HTTP Request node"
    echo "   2. URL: https://$API_DOMAIN/extract"
    echo "   3. Method: POST"
    echo "   4. Headers: Authorization: Bearer $FASTAPI_PASSWORD"
    echo "   5. Body: {\"url\": \"https://example.com/article\"}"
    echo ""
    echo "üîó Ki·ªÉm tra API:"
    echo "   - Health check: curl https://$API_DOMAIN/health"
    echo "   - API docs: https://$API_DOMAIN/docs"
fi

echo ""
echo "C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng script c√†i ƒë·∫∑t N8N t·ª± ƒë·ªông! üöÄ"
echo "======================================================================"
